[{"D:\\monday.com\\Monday.form\\quickstart-react\\src\\index.js":"1","D:\\monday.com\\Monday.form\\quickstart-react\\src\\App.js":"2","D:\\monday.com\\Monday.form\\quickstart-react\\src\\serviceWorker.js":"3","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\getValues.js":"4","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\CalendarEvents.js":"5","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\MyCalendar.js":"6","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\Form.js":"7","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\getids.js":"8","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mutation.js":"9","D:\\monday.com\\Monday.form\\quickstart-react\\src\\Features\\PopupMessage.js":"10","D:\\monday.com\\Monday.form\\quickstart-react\\src\\ManageAuthAndBoard\\keyandboardid.js":"11"},{"size":484,"mtime":1691032858000,"results":"12","hashOfConfig":"13"},{"size":1056,"mtime":1701258625043,"results":"14","hashOfConfig":"13"},{"size":5085,"mtime":1691032858000,"results":"15","hashOfConfig":"13"},{"size":1822,"mtime":1701262526782,"results":"16","hashOfConfig":"13"},{"size":1698,"mtime":1701252829307,"results":"17","hashOfConfig":"13"},{"size":764,"mtime":1701259523266,"results":"18","hashOfConfig":"13"},{"size":12058,"mtime":1701336236752,"results":"19","hashOfConfig":"13"},{"size":2402,"mtime":1701255196682,"results":"20","hashOfConfig":"13"},{"size":2369,"mtime":1701335952903,"results":"21","hashOfConfig":"13"},{"size":534,"mtime":1699364322932,"results":"22","hashOfConfig":"13"},{"size":296,"mtime":1701254783368,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1153pv6",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\monday.com\\Monday.form\\quickstart-react\\src\\index.js",[],[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\App.js",["64"],[],"// App.js\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Form from './UI Components/Form/Form.js';\nimport ApiCall from './API Call/getValues';\nimport MyCalendar from './UI Components/Calendar/MyCalendar';\nimport extractCalendarEvents from './UI Components/Calendar/CalendarEvents';\n\nconst App = () => {\n  const [selectedData, setSelectedData] = useState(null);\n  const [calendarEvents, setCalendarEvents] = useState([]);\n\n  const populateForm = (selectedData) => {\n    setSelectedData(selectedData);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"FormContainer\">\n        <Form title=\"Your Form Title\" populateForm={populateForm} />\n      </div>\n      <div className=\"CalendarContainer\">\n        <MyCalendar events={calendarEvents} />\n      </div>\n      <div>\n        <ApiCall\n          render={(groupedItems, workspace, boardName) => {\n            const events = extractCalendarEvents(groupedItems);\n            setCalendarEvents(events);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","D:\\monday.com\\Monday.form\\quickstart-react\\src\\serviceWorker.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\getValues.js",["65"],[],"import React, { Component } from 'react';\r\nimport { apiKey, mondayboardid } from '../ManageAuthAndBoard/keyandboardid';\r\n\r\nclass ApiCall extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      groupedItems: {},\r\n      workspace: '',\r\n      boardName: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Perform the API call to fetch data from Monday.com\r\n    fetch(\"https://api.monday.com/v2\", {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': apiKey, \r\n      },\r\n      body: JSON.stringify({\r\n        'query': `{boards(ids:${mondayboardid}) {name workspace {id name} items{id name group{id title} column_values{id title text value type}}}}`,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const boards = data.data.boards;\r\n        const groupedItems = {};\r\n        const workspace = boards[0].workspace;\r\n        const boardName = boards[0].name;\r\n\r\n        const workspaceName = workspace.name;\r\n\r\n        boards.forEach((board) => {\r\n          board.items.forEach((item) => {\r\n            const groupId = item.group.id;\r\n            if (!groupedItems[groupId]) {\r\n              groupedItems[groupId] = {\r\n                title: item.group.title,\r\n                items: [],\r\n              };\r\n            }\r\n            groupedItems[groupId].items.push(item);\r\n          });\r\n        });\r\n\r\n        this.setState({ groupedItems, workspace: workspaceName, boardName });\r\n        console.log(groupedItems);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data from Monday.com:', error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return this.props.render(this.state.groupedItems, this.state.workspace, this.state.boardName);\r\n  }\r\n}\r\n\r\nexport default ApiCall;\r\n","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\CalendarEvents.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\MyCalendar.js",["66"],[],"import React, { useState } from 'react';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport moment from 'moment';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport './Calendar.css';\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nconst MyCalendar = ({ events }) => {\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <div><h1>Calendar</h1></div>\r\n      <div>\r\n      <Calendar\r\n        localizer={localizer}\r\n        events={events}\r\n        startAccessor=\"start\"\r\n        endAccessor=\"end\"\r\n        defaultView=\"month\"\r\n        views={['month', 'week', 'day', 'agenda']}\r\n        selectable={true}\r\n        style={{ height: 500, width: 800}}\r\n      />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyCalendar;\r\n","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\Form.js",["67"],[],"import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { fetchColumns, fetchBoardAndGroupId } from '../../API Call/getids';\r\nimport { createItem } from '../../API Call/mutation';\r\nimport PopupMessage from '../../Features/PopupMessage';\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [],\r\n      boardId: null,\r\n      groupId: null,\r\n      successMessage: '',\r\n      errorMessage: '',\r\n      showPopup: false,\r\n      popupMessage: '',\r\n      popupType: 'success',\r\n      edit: false, // Set edit to true or false based on your requirement\r\n      ...props,\r\n    };\r\n  }\r\n\r\n  ///////////////////////////////////////////App Handlers///////////////////////////////////////\r\n\r\n  handlePopupClose = () => {\r\n    this.setState({\r\n      showPopup: false,\r\n      popupMessage: '',\r\n    });\r\n  };\r\n\r\n  handleBoardRelationChange = (e, column) => {\r\n    const selectedItemId = e.target.value;\r\n    const selectedBoardItems = this.state[column.id].items;\r\n    const selectedItem = selectedBoardItems.find(item => item.id === selectedItemId);\r\n  \r\n    // Log the selectedItem to verify its structure\r\n    \r\n  \r\n    // Populate Manager field based on the selected board-relation option\r\n    const managerValue = selectedItem ? selectedItem.manager : ''; // Update to 'text' from 'person'\r\n    console.log('Selected Item:', managerValue);\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: {\r\n        selectedItemId,\r\n        selectedItem,\r\n        items: prevState[column.id].items,\r\n      },\r\n      // Use a separate update for Manager field\r\n      managerFieldId: managerValue,\r\n    }));\r\n  };\r\n  \r\n\r\n  handleCheckboxChange = (e, column) => {\r\n    const { checked } = e.target;\r\n    this.setState({\r\n      [column.id]: checked,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (e, column) => {\r\n    const { value } = e.target;\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: value,\r\n    }));\r\n  }\r\n\r\n  resetFormState() {\r\n    const { columns } = this.state;\r\n    const initialValues = {};\r\n    columns.forEach((column) => {\r\n      initialValues[column.id] = null;\r\n    });\r\n\r\n    this.setState({ successMessage: '', errorMessage: '', ...initialValues });\r\n  }\r\n  \r\n  handleHourChange = (e, column) => {\r\n    const { value } = e.target;\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: value,\r\n    }));\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const columns = await fetchColumns();\r\n      const { boardId, groupId } = await fetchBoardAndGroupId();\r\n      const initialValues = {};\r\n      const boardRelationColumns = columns.filter((column) => column.type === 'board-relation');\r\n\r\n      // Fetch and populate data for board-relation columns\r\n      for (const boardRelationColumn of boardRelationColumns) {\r\n        const { boardIds } = JSON.parse(boardRelationColumn.settings_str);\r\n        const boardItems = await this.fetchBoardItems(boardIds[0]);\r\n        initialValues[boardRelationColumn.id] = {\r\n          selectedItemId: '', // Initialize selectedItemId\r\n          selectedItem: null, // Initialize selectedItem\r\n          items: boardItems,\r\n        };\r\n      }\r\n\r\n      // Initialize other columns\r\n      columns.forEach((column) => {\r\n        if (column.type !== 'board-relation') {\r\n          initialValues[column.id] = null;\r\n        }\r\n      });\r\n\r\n      this.setState({ columns, boardId, groupId, ...initialValues });\r\n    } catch (error) {\r\n      console.error('Error Fetching data.', error);\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////Fetching Projects/////////////////////////////////////\r\n  async fetchBoardItems(boardId) {\r\n    try {\r\n      const response = await fetch(`https://api.monday.com/v2`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk', // Replace with your Monday.com API key\r\n        },\r\n        body: JSON.stringify({\r\n          query: `\r\n            query {\r\n              boards(ids: ${boardId}) {\r\n                items {\r\n                  id\r\n                  name\r\n                  group {\r\n                    id\r\n                    title\r\n                  }\r\n                  column_values {\r\n                    id\r\n                    title\r\n                    text\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n      if (data.data && data.data.boards && data.data.boards.length > 0) {\r\n        return data.data.boards[0].items.map(item => {\r\n          const managerColumn = item.column_values.find(column => column.title === 'Manager');\r\n          return {\r\n            id: item.id,\r\n            name: item.name,\r\n            group: item.group,\r\n            manager: managerColumn ? managerColumn.text : '',\r\n          };\r\n        }).filter(item => item.group.title === 'On Going Projects');\r\n      }\r\n\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching board items:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  ////////////////////////////////////////////////////Submit Handler////////////////////////////////////////////////////\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Define the list of mandatory fields\r\n    const mandatoryFields = [\"Name\", \"Date\", \"Hours Spent\", \"Project\"];\r\n  \r\n    const { boardId, groupId, columns, ...values } = this.state;\r\n  \r\n    // Check if all mandatory fields are filled\r\n    const missingFields = mandatoryFields.filter(field => !values[field]);\r\n  \r\n    if (missingFields.length > 0) {\r\n      // Display error message if any mandatory field is missing\r\n      this.setState({\r\n        errorMessage: `Please fill in the following mandatory fields: ${missingFields.join(\", \")}`,\r\n        successMessage: '',\r\n        showPopup: true,\r\n        popupMessage: `Please fill in the following mandatory fields: ${missingFields.join(\", \")}`,\r\n        popupType: 'error',\r\n      });\r\n      return;\r\n    }\r\n  \r\n    // Exclude \"Manager\" column from the submission\r\n    const columnValues = columns\r\n      .filter(column => column.title !== \"Manager\")\r\n      .map(column => ({\r\n        id: column.id,\r\n        value: values[column.id],\r\n        type: column.type,\r\n      }));\r\n  \r\n    try {\r\n      const newItem = await createItem(boardId, groupId, columnValues);\r\n  \r\n      if (newItem) {\r\n        this.setState({\r\n          successMessage: 'Item created successfully',\r\n          errorMessage: '',\r\n          showPopup: true,\r\n          popupMessage: 'Item created successfully',\r\n          popupType: 'success',\r\n        });\r\n        this.resetFormState();\r\n        setTimeout(() => {\r\n          this.setState({ successMessage: '' });\r\n        }, 3000);\r\n      } else {\r\n        this.setState({\r\n          errorMessage: 'Error creating item',\r\n          successMessage: '',\r\n          showPopup: true,\r\n          popupMessage: 'Error creating item',\r\n          popupType: 'error',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating item:', error);\r\n      this.setState({\r\n        errorMessage: 'Error creating item',\r\n        successMessage: '',\r\n        showPopup: true,\r\n        popupMessage: 'Error creating item',\r\n        popupType: 'error',\r\n      });\r\n    }\r\n  };\r\n  \r\n\r\n  /////////////////////////////////////////App Render/////////////////////////////////////////////\r\n  render() {\r\n    const { columns, successMessage, errorMessage, showPopup, popupMessage, popupType, edit } = this.state;\r\n\r\n    // Filter out columns \r\n    const filteredColumns = columns.filter(column => column.title !== \"Subitems\" && column.title !== \"Person\");\r\n    // Inside the render method\r\n    return (\r\n      <div className=\"form-container\">\r\n        <h1>Time Entry Form</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-row\">\r\n            {filteredColumns.map((column, index) => (\r\n              <div key={column.id} className=\"form-input\">\r\n                <label>{column.title}</label>\r\n                {column.title === \"Manager\" ? (\r\n                  <input\r\n                  type={column.type === 'text'}\r\n                  name={column.id}  // Make sure the name attribute matches the column.id\r\n                  value={this.state.managerFieldId || ''}  // Use managerFieldId instead of managerFieldName\r\n                  readOnly\r\n                />\r\n                ) : column.type === 'board-relation' ? (\r\n                  <select\r\n                    name={column.title}\r\n                    value={this.state[column.id] ? this.state[column.id].selectedItemId : ''}\r\n                    onChange={(e) => this.handleBoardRelationChange(e, column)}\r\n                  >\r\n                    <option value=\"\">Select an option</option>\r\n                    {this.state[column.id] && this.state[column.id].items.map((item) => (\r\n                      <option\r\n                        key={item.id}\r\n                        value={item.id}\r\n                      >\r\n                        {item.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ) : column.type === 'color' ? (\r\n                  <span>In Approval</span>\r\n                  // <select\r\n                  //   name={column.title}\r\n                  //   value={this.state[column.id] || ''}\r\n                  //   onChange={(e) => this.handleInputChange(e, column)}\r\n                  // >\r\n                  //   {column.settings_str ? (\r\n                  //     Object.keys(JSON.parse(column.settings_str).labels).map((labelKey) => (\r\n                  //       <option\r\n                  //         key={labelKey}\r\n                  //         value={labelKey}  \r\n                  //       >\r\n                  //         {JSON.parse(column.settings_str).labels[labelKey]}\r\n                  //       </option>\r\n                  //     ))\r\n                  //   ) : null}\r\n                  // </select>\r\n                ) : column.type === 'hour' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"time\"\r\n                      name={column.title}\r\n                      value={this.state[column.id] || ''}  // Set the checked attribute based on the state\r\n                      onChange={(e) => this.handleHourChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : column.type === 'boolean' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name={column.title}\r\n                      checked={this.state[column.id] || false}  // Set the checked attribute based on the state\r\n                      onChange={(e) => this.handleCheckboxChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <input\r\n                    type={column.type === 'color' ? 'text' : column.type}\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"form-submit\">\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n        </form>\r\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        {showPopup && (\r\n          <PopupMessage message={popupMessage} type={popupType} onClose={this.handlePopupClose} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\getids.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mutation.js",["68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],[],"import { apiKey } from '../ManageAuthAndBoard/keyandboardid';\r\n\r\nexport async function createItem(boardId, groupId, columnData) {\r\n  // Filter out columns with null values\r\n  const filteredColumnData = columnData.filter(({ value }) => value !== null && value !== '' && value.selectedItemId !== '' && value.selectedItemId !== false);\r\n\r\n  // Construct the mutation query dynamically\r\n  const itemName = filteredColumnData.find(column => column.id === 'name').value;\r\n\r\n  const columnValues = filteredColumnData\r\n    .map(({ id, value, type }) => {\r\n      if (type === 'board-relation' && typeof value === 'object' && value !== null) {\r\n        return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"linkedPulseIds\\\\\\\":[{\\\\\\\"linkedPulseId\\\\\\\":${value.selectedItemId}}]}`;\r\n      } else if (type === 'hour') {\r\n        const [hourStr, minuteStr] = value.split(':');\r\n        const formattedHour = parseInt(hourStr, 10);\r\n        const formattedMinute = parseInt(minuteStr, 10);\r\n\r\n        if (!isNaN(formattedHour) && !isNaN(formattedMinute)) {\r\n          return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"hour\\\\\\\":${formattedHour},\\\\\\\"minute\\\\\\\":${formattedMinute}}`;\r\n        } else {\r\n          // Handle the case where the conversion fails\r\n          console.error(`Invalid hour type value: ${value}`);\r\n          return '';\r\n        }\r\n      } else if (type === 'boolean') {\r\n        const booleanValue = value ? 'true' : 'false';\r\n      return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"checked\\\\\\\":\\\\\\\"${booleanValue}\\\\\\\"}`;\r\n      } else {\r\n        return `\\\\\\\"${id}\\\\\\\": \\\\\\\"${value}\\\\\\\"`;\r\n      }\r\n    })\r\n    .join(', ');\r\n\r\n  const query = `mutation {\r\n      create_item (\r\n        board_id: ${boardId},\r\n        group_id: \"${groupId}\",\r\n        item_name: \"${itemName.replace(/\"/g, '\\\\\"')}\",\r\n        column_values: \"{${columnValues}}\"\r\n      ) {\r\n        id\r\n      }\r\n    }`;\r\n\r\n  // Make the API request with the dynamic query\r\n  const response = await fetch(\"https://api.monday.com/v2\", {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': apiKey, // Replace with your API key\r\n    },\r\n    body: JSON.stringify({\r\n      'query': query,\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const responseData = await response.json();\r\n    console.log(responseData);\r\n    throw new Error('Failed to create item');\r\n  }\r\n\r\n  const data = await response.json();\r\n  return data.data;\r\n}\r\n","D:\\monday.com\\Monday.form\\quickstart-react\\src\\Features\\PopupMessage.js",[],[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\ManageAuthAndBoard\\keyandboardid.js",[],[],{"ruleId":"90","severity":1,"message":"91","line":11,"column":10,"nodeType":"92","messageId":"93","endLine":11,"endColumn":22},{"ruleId":"90","severity":1,"message":"94","line":1,"column":8,"nodeType":"92","messageId":"93","endLine":1,"endColumn":13},{"ruleId":"90","severity":1,"message":"95","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"96","line":246,"column":88,"nodeType":"92","messageId":"93","endLine":246,"endColumn":92},{"ruleId":"97","severity":1,"message":"98","line":13,"column":19,"nodeType":"99","messageId":"100","endLine":13,"endColumn":20,"suggestions":"101"},{"ruleId":"97","severity":1,"message":"98","line":13,"column":28,"nodeType":"99","messageId":"100","endLine":13,"endColumn":29,"suggestions":"102"},{"ruleId":"97","severity":1,"message":"98","line":13,"column":34,"nodeType":"99","messageId":"100","endLine":13,"endColumn":35,"suggestions":"103"},{"ruleId":"97","severity":1,"message":"98","line":13,"column":52,"nodeType":"99","messageId":"100","endLine":13,"endColumn":53,"suggestions":"104"},{"ruleId":"97","severity":1,"message":"98","line":13,"column":59,"nodeType":"99","messageId":"100","endLine":13,"endColumn":60,"suggestions":"105"},{"ruleId":"97","severity":1,"message":"98","line":13,"column":76,"nodeType":"99","messageId":"100","endLine":13,"endColumn":77,"suggestions":"106"},{"ruleId":"97","severity":1,"message":"98","line":20,"column":21,"nodeType":"99","messageId":"100","endLine":20,"endColumn":22,"suggestions":"107"},{"ruleId":"97","severity":1,"message":"98","line":20,"column":30,"nodeType":"99","messageId":"100","endLine":20,"endColumn":31,"suggestions":"108"},{"ruleId":"97","severity":1,"message":"98","line":20,"column":36,"nodeType":"99","messageId":"100","endLine":20,"endColumn":37,"suggestions":"109"},{"ruleId":"97","severity":1,"message":"98","line":20,"column":44,"nodeType":"99","messageId":"100","endLine":20,"endColumn":45,"suggestions":"110"},{"ruleId":"97","severity":1,"message":"98","line":20,"column":66,"nodeType":"99","messageId":"100","endLine":20,"endColumn":67,"suggestions":"111"},{"ruleId":"97","severity":1,"message":"98","line":20,"column":76,"nodeType":"99","messageId":"100","endLine":20,"endColumn":77,"suggestions":"112"},{"ruleId":"97","severity":1,"message":"98","line":28,"column":17,"nodeType":"99","messageId":"100","endLine":28,"endColumn":18,"suggestions":"113"},{"ruleId":"97","severity":1,"message":"98","line":28,"column":26,"nodeType":"99","messageId":"100","endLine":28,"endColumn":27,"suggestions":"114"},{"ruleId":"97","severity":1,"message":"98","line":28,"column":32,"nodeType":"99","messageId":"100","endLine":28,"endColumn":33,"suggestions":"115"},{"ruleId":"97","severity":1,"message":"98","line":28,"column":43,"nodeType":"99","messageId":"100","endLine":28,"endColumn":44,"suggestions":"116"},{"ruleId":"97","severity":1,"message":"98","line":28,"column":48,"nodeType":"99","messageId":"100","endLine":28,"endColumn":49,"suggestions":"117"},{"ruleId":"97","severity":1,"message":"98","line":28,"column":67,"nodeType":"99","messageId":"100","endLine":28,"endColumn":68,"suggestions":"118"},{"ruleId":"97","severity":1,"message":"98","line":30,"column":19,"nodeType":"99","messageId":"100","endLine":30,"endColumn":20,"suggestions":"119"},{"ruleId":"97","severity":1,"message":"98","line":30,"column":28,"nodeType":"99","messageId":"100","endLine":30,"endColumn":29,"suggestions":"120"},{"ruleId":"97","severity":1,"message":"98","line":30,"column":34,"nodeType":"99","messageId":"100","endLine":30,"endColumn":35,"suggestions":"121"},{"ruleId":"97","severity":1,"message":"98","line":30,"column":46,"nodeType":"99","messageId":"100","endLine":30,"endColumn":47,"suggestions":"122"},"no-unused-vars","'selectedData' is assigned a value but never used.","Identifier","unusedVar","'React' is defined but never used.","'useState' is defined but never used.","'edit' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\\".","TemplateElement","unnecessaryEscape",["123","124"],["125","126"],["127","128"],["129","130"],["131","132"],["133","134"],["135","136"],["137","138"],["139","140"],["141","142"],["143","144"],["145","146"],["147","148"],["149","150"],["151","152"],["153","154"],["155","156"],["157","158"],["159","160"],["161","162"],["163","164"],["165","166"],{"messageId":"167","fix":"168","desc":"169"},{"messageId":"170","fix":"171","desc":"172"},{"messageId":"167","fix":"173","desc":"169"},{"messageId":"170","fix":"174","desc":"172"},{"messageId":"167","fix":"175","desc":"169"},{"messageId":"170","fix":"176","desc":"172"},{"messageId":"167","fix":"177","desc":"169"},{"messageId":"170","fix":"178","desc":"172"},{"messageId":"167","fix":"179","desc":"169"},{"messageId":"170","fix":"180","desc":"172"},{"messageId":"167","fix":"181","desc":"169"},{"messageId":"170","fix":"182","desc":"172"},{"messageId":"167","fix":"183","desc":"169"},{"messageId":"170","fix":"184","desc":"172"},{"messageId":"167","fix":"185","desc":"169"},{"messageId":"170","fix":"186","desc":"172"},{"messageId":"167","fix":"187","desc":"169"},{"messageId":"170","fix":"188","desc":"172"},{"messageId":"167","fix":"189","desc":"169"},{"messageId":"170","fix":"190","desc":"172"},{"messageId":"167","fix":"191","desc":"169"},{"messageId":"170","fix":"192","desc":"172"},{"messageId":"167","fix":"193","desc":"169"},{"messageId":"170","fix":"194","desc":"172"},{"messageId":"167","fix":"195","desc":"169"},{"messageId":"170","fix":"196","desc":"172"},{"messageId":"167","fix":"197","desc":"169"},{"messageId":"170","fix":"198","desc":"172"},{"messageId":"167","fix":"199","desc":"169"},{"messageId":"170","fix":"200","desc":"172"},{"messageId":"167","fix":"201","desc":"169"},{"messageId":"170","fix":"202","desc":"172"},{"messageId":"167","fix":"203","desc":"169"},{"messageId":"170","fix":"204","desc":"172"},{"messageId":"167","fix":"205","desc":"169"},{"messageId":"170","fix":"206","desc":"172"},{"messageId":"167","fix":"207","desc":"169"},{"messageId":"170","fix":"208","desc":"172"},{"messageId":"167","fix":"209","desc":"169"},{"messageId":"170","fix":"210","desc":"172"},{"messageId":"167","fix":"211","desc":"169"},{"messageId":"170","fix":"212","desc":"172"},{"messageId":"167","fix":"213","desc":"169"},{"messageId":"170","fix":"214","desc":"172"},"removeEscape",{"range":"215","text":"216"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"217","text":"218"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"219","text":"216"},{"range":"220","text":"218"},{"range":"221","text":"216"},{"range":"222","text":"218"},{"range":"223","text":"216"},{"range":"224","text":"218"},{"range":"225","text":"216"},{"range":"226","text":"218"},{"range":"227","text":"216"},{"range":"228","text":"218"},{"range":"229","text":"216"},{"range":"230","text":"218"},{"range":"231","text":"216"},{"range":"232","text":"218"},{"range":"233","text":"216"},{"range":"234","text":"218"},{"range":"235","text":"216"},{"range":"236","text":"218"},{"range":"237","text":"216"},{"range":"238","text":"218"},{"range":"239","text":"216"},{"range":"240","text":"218"},{"range":"241","text":"216"},{"range":"242","text":"218"},{"range":"243","text":"216"},{"range":"244","text":"218"},{"range":"245","text":"216"},{"range":"246","text":"218"},{"range":"247","text":"216"},{"range":"248","text":"218"},{"range":"249","text":"216"},{"range":"250","text":"218"},{"range":"251","text":"216"},{"range":"252","text":"218"},{"range":"253","text":"216"},{"range":"254","text":"218"},{"range":"255","text":"216"},{"range":"256","text":"218"},{"range":"257","text":"216"},{"range":"258","text":"218"},{"range":"259","text":"216"},{"range":"260","text":"218"},[653,654],"",[653,653],"\\",[662,663],[662,662],[668,669],[668,668],[686,687],[686,686],[693,694],[693,693],[710,711],[710,710],[1035,1036],[1035,1035],[1044,1045],[1044,1044],[1050,1051],[1050,1050],[1058,1059],[1058,1058],[1080,1081],[1080,1080],[1090,1091],[1090,1090],[1399,1400],[1399,1399],[1408,1409],[1408,1408],[1414,1415],[1414,1414],[1425,1426],[1425,1425],[1430,1431],[1430,1430],[1449,1450],[1449,1449],[1490,1491],[1490,1490],[1499,1500],[1499,1499],[1505,1506],[1505,1505],[1517,1518],[1517,1517]]