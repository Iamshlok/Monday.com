[{"D:\\monday.com\\Monday.form\\quickstart-react\\src\\index.js":"1","D:\\monday.com\\Monday.form\\quickstart-react\\src\\App.js":"2","D:\\monday.com\\Monday.form\\quickstart-react\\src\\serviceWorker.js":"3","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\getValues.js":"4","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\CalendarEvents.js":"5","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\MyCalendar.js":"6","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\Form.js":"7","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mutation.js":"8","D:\\monday.com\\Monday.form\\quickstart-react\\src\\Features\\PopupMessage.js":"9","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mondaysdk.js":"10","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\eventUpdateForm.js":"11","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\PopupForm.js":"12"},{"size":484,"mtime":1691032858000,"results":"13","hashOfConfig":"14"},{"size":2005,"mtime":1704721387713,"results":"15","hashOfConfig":"14"},{"size":5085,"mtime":1691032858000,"results":"16","hashOfConfig":"14"},{"size":2293,"mtime":1704721984736,"results":"17","hashOfConfig":"14"},{"size":2965,"mtime":1704718404283,"results":"18","hashOfConfig":"14"},{"size":4834,"mtime":1704735044722,"results":"19","hashOfConfig":"14"},{"size":15325,"mtime":1704721940978,"results":"20","hashOfConfig":"14"},{"size":2105,"mtime":1704721887729,"results":"21","hashOfConfig":"14"},{"size":534,"mtime":1699364322932,"results":"22","hashOfConfig":"14"},{"size":2527,"mtime":1704721963387,"results":"23","hashOfConfig":"14"},{"size":524,"mtime":1704720094289,"results":"24","hashOfConfig":"14"},{"size":4320,"mtime":1704725473321,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1153pv6",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\monday.com\\Monday.form\\quickstart-react\\src\\index.js",[],[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\App.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\serviceWorker.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\getValues.js",["67","68","69"],[],"//getValues.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport { board, initializeMondaySdk } from './mondaysdk.js';\r\n\r\nconst monday = mondaySdk();\r\n\r\nconst ApiCall = ({ render }) => {\r\n  const [groupedItems, setGroupedItems] = useState([]);\r\n  const [workspace, setWorkspace] = useState('');\r\n  const [boardName, setBoardName] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the Monday.com board\r\n    async function fetchData() {\r\n      try {\r\n        await initializeMondaySdk();\r\n        const response = await monday.api(\r\n          `query {\r\n            boards(ids: ${board}) {\r\n              name \r\n              workspace {\r\n                id \r\n                name\r\n              } \r\n              items{\r\n                id \r\n                name \r\n                group{\r\n                  id \r\n                  title\r\n                } \r\n                column_values{\r\n                  id \r\n                  title \r\n                  text \r\n                  value \r\n                  type\r\n                }\r\n              }\r\n            }\r\n          }`\r\n        );\r\n\r\n        const boardData = response.data.boards[0]; // Access the first board in the response\r\n\r\n        const workspaceName = boardData.workspace.name;\r\n        const boardName = boardData.name;\r\n\r\n        // Process the data to create groupedItems\r\n        const groupedItems = processGroupedItems(boardData.items);\r\n\r\n        setGroupedItems(groupedItems);\r\n        setWorkspace(workspaceName);\r\n        setBoardName(boardName);\r\n      } catch (error) {\r\n        console.error('Error fetching data from Monday.com:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []); // Empty dependency array to run the effect only once\r\n\r\n  // Render the child components\r\n  return render(groupedItems);\r\n};\r\n\r\n// Function to process data and create groupedItems\r\nconst processGroupedItems = (items) => {\r\n  const groupedItems = {};\r\n\r\n  items.forEach((item) => {\r\n    const groupId = item.group.id;\r\n    if (!groupedItems[groupId]) {\r\n      groupedItems[groupId] = {\r\n        title: item.group.title,\r\n        items: [],\r\n      };\r\n    }\r\n    groupedItems[groupId].items.push(item);\r\n  });\r\n\r\n  return groupedItems;\r\n};\r\n\r\nexport default ApiCall;","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\CalendarEvents.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\MyCalendar.js",["70"],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\Form.js",["71","72","73","74"],[],"import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { fetchColumns, fetchBoardAndGroupId, fetchCurrentUser } from '../../API Call/mondaysdk';\r\nimport { createItem } from '../../API Call/mutation';\r\nimport PopupMessage from '../../Features/PopupMessage';\r\nimport { initializeMondaySdk, curUserID, curUserName } from '../../API Call/mondaysdk';\r\nimport mondaySdk from 'monday-sdk-js';\r\nimport Select from 'react-select';\r\n\r\nconst monday = mondaySdk();\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [],\r\n      boardId: null,\r\n      groupId: null,\r\n      successMessage: '',\r\n      errorMessage: '',\r\n      showPopup: false,\r\n      popupMessage: '',\r\n      popupType: 'success',\r\n      totalHours: '',\r\n      edit: false, // Set edit to true or false based on your requirement\r\n      nameFieldId: '', // Add nameFieldId to the initial state\r\n      subitemsField: [],\r\n      boardRelationSelections: {},\r\n      ...props,\r\n    };\r\n\r\n    // Initialize board-relation columns\r\n    const boardRelationColumns = this.state.columns.filter((column) => column.type === 'board-relation');\r\n    for (const boardRelationColumn of boardRelationColumns) {\r\n      this.state[boardRelationColumn.id] = {\r\n        selectedItemId: '', // Initialize selectedItemId\r\n        selectedItem: null, // Initialize selectedItem\r\n        items: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////App Handlers///////////////////////////////////////\r\n\r\n  handlePopupClose = () => {\r\n    this.setState({\r\n      showPopup: false,\r\n      popupMessage: '',\r\n    });\r\n  };\r\n\r\n  handleBoardRelationChange = async (e, column) => {\r\n    const selectedItemId = e.target.value;\r\n    const selectedBoardItems = this.state[column.id].items;\r\n    const selectedItem = selectedBoardItems.find((item) => item.id === selectedItemId);\r\n\r\n    // Log the selectedItem to verify its structure\r\n\r\n    // Populate Manager and Subitems fields based on the selected board-relation option\r\n    const managerValue = selectedItem ? selectedItem.manager : '';\r\n    const subitems = selectedItem ? selectedItem.subitems : [];\r\n\r\n\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: {\r\n        selectedItemId,\r\n        selectedItem,\r\n        items: prevState[column.id].items,\r\n      },\r\n      // Use a separate update for Manager and Subitems fields\r\n      managerFieldId: managerValue,\r\n      // Reset the name field when a new project is selected\r\n      subitemsField: subitems,\r\n    }));\r\n  };\r\n\r\n\r\n  handleCheckboxChange = (e, column) => {\r\n    const { checked } = e.target;\r\n    this.setState({\r\n      [column.id]: checked,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (e, column) => {\r\n    const { value } = e.target;\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: value,\r\n    }));\r\n  }\r\n\r\n\r\n  resetFormState() {\r\n    const { columns } = this.state;\r\n    const initialValues = {};\r\n\r\n    // Only reset non-board-relation columns\r\n    columns.forEach((column) => {\r\n      if (column.type !== 'board-relation') {\r\n        initialValues[column.id] = null;\r\n      }\r\n    });\r\n\r\n    this.setState({ successMessage: '', errorMessage: '', ...initialValues });\r\n  }\r\n\r\n  handleHourChange = (e, column) => {\r\n    const { value } = e.target;\r\n  \r\n    if (column.title === 'Spent Hours') {\r\n      this.setState({\r\n        totalHours: value,\r\n      });\r\n    } else {\r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        [column.id]: value,\r\n      }));\r\n  \r\n      // Calculate total hours when both \"Start Time\" and \"End Time\" are provided\r\n      const startTime = this.state['Start Time'] || ''; // Adjust the key based on your actual column title\r\n      const endTime = this.state['End Time'] || ''; // Adjust the key based on your actual column title\r\n  \r\n      // Check if both start and end times are provided\r\n      if (startTime && endTime) {\r\n        const moment = require('moment'); // Import moment.js\r\n        const format = 'HH:mm';\r\n        const startMoment = moment(startTime, format);\r\n        const endMoment = moment(endTime, format);\r\n  \r\n        if (startMoment.isValid() && endMoment.isValid()) {\r\n          const totalHours = endMoment.diff(startMoment, 'hours', true).toFixed(2);\r\n          this.setState({\r\n            totalHours,\r\n          });\r\n        } else {\r\n          // Handle invalid time inputs if needed\r\n          this.setState({\r\n            totalHours: '',\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  async componentDidMount() {\r\n    try {\r\n      if (!this.state.columns.length) { // Check if columns are already fetched\r\n        await initializeMondaySdk(); // Call initializeMondaySdk here\r\n        const uservalue = await fetchCurrentUser();\r\n        const columns = await fetchColumns();\r\n        const { boardId, groupId } = await fetchBoardAndGroupId();\r\n        const initialValues = {};\r\n        const boardRelationColumns = columns.filter((column) => column.type === 'board-relation');\r\n\r\n        // Fetch and populate data for board-relation columns\r\n        for (const boardRelationColumn of boardRelationColumns) {\r\n          const { boardIds } = JSON.parse(boardRelationColumn.settings_str);\r\n          const boardItems = await this.fetchBoardItems(boardIds[0]);\r\n\r\n          initialValues[boardRelationColumn.id] = {\r\n            selectedItemId: '', // Initialize selectedItemId\r\n            selectedItem: null, // Initialize selectedItem\r\n            items: boardItems,\r\n          };\r\n        }\r\n\r\n        // Initialize other columns\r\n        columns.forEach((column) => {\r\n          if (column.type !== 'board-relation') {\r\n            initialValues[column.id] = null;\r\n          }\r\n\r\n          if (column.type === 'date') {\r\n            initialValues[column.id] = new Date().toISOString().split('T')[0];\r\n          }\r\n        });\r\n\r\n\r\n\r\n        this.setState({ columns, boardId, groupId, ...initialValues });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error Fetching data in Form.js:', error);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /////////////////////////////////////Fetching Projects/////////////////////////////////////\r\n  async fetchBoardItems(boardId) {\r\n    try {\r\n\r\n      const response1 = await monday.api(`\r\n      query {\r\n        boards(ids: ${boardId}) {\r\n          items {\r\n            id\r\n            name\r\n            group {\r\n              id\r\n              title\r\n            }\r\n            column_values {\r\n              id\r\n              title\r\n              text\r\n            }\r\n            subitems {\r\n              id\r\n              name\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `);\r\n\r\n      const data = response1;\r\n      if (data.data && data.data.boards && data.data.boards.length > 0) {\r\n        return data.data.boards[0].items.map(item => {\r\n          const managerColumn = item.column_values.find(column => column.title === 'Manager');\r\n          return {\r\n            id: item.id,\r\n            name: item.name,\r\n            group: item.group,\r\n            manager: managerColumn ? managerColumn.text : '',\r\n            subitems: item.subitems || [],\r\n          };\r\n        }).filter(item => item.group.title === 'On Going Projects');\r\n      }\r\n\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching board items:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n\r\n  ////////////////////////////////////////////////////Submit Handler////////////////////////////////////////////////////\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { boardId, groupId, columns, ...values } = this.state;\r\n    // Exclude \"Manager\" column from the submission\r\n    const columnValues = columns\r\n      .filter(column => column.title !== \"Manager\")\r\n      .map(column => ({\r\n        id: column.id,\r\n        value: values[column.id],\r\n        type: column.type,\r\n      }));\r\n\r\n    try {\r\n      const newItem = await createItem(boardId, groupId, columnValues);\r\n\r\n      if (newItem) {\r\n        this.setState({\r\n          showPopup: true,\r\n          popupMessage: 'Item created successfully',\r\n          popupType: 'success',\r\n        });\r\n        this.resetFormState();\r\n        setTimeout(() => {\r\n          this.setState({ successMessage: '' });\r\n        }, 3000);\r\n        monday.execute(\"notice\", { \r\n          message: \"Time entry created successfully.\",\r\n          type: \"success\", // or \"error\" (red), or \"info\" (blue)\r\n          timeout: 10000,\r\n       });\r\n      } else {\r\n        this.setState({\r\n          showPopup: true,\r\n          popupMessage: 'Error creating item',\r\n          popupType: 'error',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating item:', error);\r\n      this.setState({\r\n        showPopup: true,\r\n        popupMessage: 'Error creating item',\r\n        popupType: 'error',\r\n      });\r\n      monday.execute(\"notice\", { \r\n        message: \"Error creating time entry!!\",\r\n        type: \"error\", // or \"error\" (red), or \"info\" (blue)\r\n        timeout: 10000,\r\n     });\r\n    }\r\n  };\r\n\r\n\r\n  /////////////////////////////////////////App Render/////////////////////////////////////////////\r\n  render() {\r\n    const { columns, successMessage, errorMessage, showPopup, popupMessage, popupType } = this.state;\r\n\r\n    // Filter out columns \r\n    const filteredColumns = columns.filter(column => column.title !== \"Subitems\" && column.title !== \"Person\" && column.title !== \"Status\" && column.id !== \"text6\" && column.id !== \"text66\");\r\n    const headerFilter = columns.filter(column => column.title === \"Person\" || column.title === \"Status\")\r\n    // Specify the desired column order\r\n    const desiredColumnOrder = [\"Project\", \"Manager\", \"Name\", \"Start Date\", \"End Date\", \"Hours Spent\", \"All Day Task\", \"Start Time\", \"End Time\"];\r\n\r\n    // Create a map to efficiently look up column indices by title\r\n    const columnIndexMap = {};\r\n    columns.forEach((column, index) => {\r\n      columnIndexMap[column.title] = index;\r\n    });\r\n\r\n    // Sort filtered columns based on the desired order\r\n    const sortedColumns = [...filteredColumns].sort((a, b) => {\r\n      const indexA = columnIndexMap[a.title];\r\n      const indexB = columnIndexMap[b.title];\r\n      return desiredColumnOrder.indexOf(a.title) - desiredColumnOrder.indexOf(b.title);\r\n    });\r\n\r\n    // Inside the render method\r\n    return (\r\n      <div className=\"form-container\">\r\n        <h2>Time Entry Form (User view)</h2>\r\n        <h4>\r\n          {headerFilter.map((column, index) => (\r\n            <span key={column.id}>\r\n              {column.title === 'Person'\r\n                ? `Person: ${curUserName}`\r\n                : `${column.title}: ${column.type === 'color' ? 'In Approval' : this.state[column.id] || 'N/A'}`}\r\n              {index < headerFilter.length - 1 && ' | '} {/* Add a space if it's not the last column */}\r\n            </span>\r\n          ))}\r\n        </h4>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-row\">\r\n            {sortedColumns.map((column, index) => (\r\n              <div key={column.id} className=\"form-input\">\r\n                <label>{column.type === 'name' ? 'Task' : column.title}</label>\r\n                {column.type === \"name\" ? (\r\n                  <Select\r\n                    name={column.id}\r\n                    value={this.state[column.id] ? { value: this.state[column.id], label: this.state[column.id] } : null}\r\n                    onChange={(selectedOption) => this.handleInputChange({ target: { value: selectedOption.value } }, column)}\r\n                    options={[\r\n                      { value: '', label: 'Select a task' }, // Default option\r\n                      ...this.state.subitemsField.map((subitem) => ({ value: subitem.name, label: subitem.name }))\r\n                    ]}\r\n                    placeholder=\"Select a task\"\r\n                    isSearchable={false}\r\n                  />\r\n                ) : column.title === \"Manager\" ? (\r\n                  <input\r\n                    type={column.type === 'text'}\r\n                    name={column.id}  // Make sure the name attribute matches the column.id\r\n                    value={this.state.managerFieldId || ''}  // Use managerFieldId instead of managerFieldName\r\n                    readOnly\r\n                  />\r\n                ) : column.type === 'board-relation' ? (\r\n                  <Select\r\n                    name={column.title}\r\n                    value={this.state[column.id] ? { value: this.state[column.id].selectedItemId, label: this.state[column.id].selectedItem ? this.state[column.id].selectedItem.name : '' } : null}\r\n                    onChange={(selectedOption) => this.handleBoardRelationChange({ target: { value: selectedOption.value } }, column)}\r\n                    options={[\r\n                      { value: '', label: 'Select an option' }, // Default option\r\n                      ...(this.state[column.id] ? this.state[column.id].items.map((item) => ({ value: item.id, label: item.name })) : [])\r\n                    ]}\r\n                    placeholder=\"Select an option\"\r\n                    isSearchable={false}\r\n                  />\r\n                ) : column.type === 'hour' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"time\"\r\n                      name={column.title}\r\n                      value={this.state[column.id] || ''}  // Set the checked attribute based on the state\r\n                      onChange={(e) => this.handleHourChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : column.type === 'boolean' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"yourCheckboxId\"\r\n                      name={column.title}\r\n                      checked={this.state[column.id] || false}  // Set the checked attribute based on the state\r\n                      onChange={(e) => this.handleCheckboxChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : column.title === 'Hours Spent' ? (\r\n                  <div>\r\n                    <input\r\n                      type={column.type === 'hour' ? 'text' : column.type}\r\n                      name={column.title}\r\n                      value={this.state.totalHours || ''}\r\n                      onChange={(e) => this.handleHourChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <input\r\n                    type={column.type === 'color' ? 'text' : column.type}\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"form-submit\">\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n        </form>\r\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        {showPopup && (\r\n          <PopupMessage message={popupMessage} type={popupType} onClose={this.handlePopupClose} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mutation.js",["75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],[],"import mondaySdk from 'monday-sdk-js';\r\n\r\nconst monday = mondaySdk();\r\n\r\nexport async function createItem(boardId, groupId, columnData) {\r\n  // Filter out columns with null values\r\n  const filteredColumnData = columnData.filter(({ value }) => value !== null && value !== '' && value.selectedItemId !== '' && value.selectedItemId !== false);\r\n\r\n  // Construct the mutation query dynamically\r\n  const itemName = filteredColumnData.find(column => column.id === 'name').value;\r\n\r\n  const columnValues = filteredColumnData\r\n    .map(({ id, value, type }) => {\r\n      if (type === 'board-relation' && typeof value === 'object' && value !== null) {\r\n        return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"linkedPulseIds\\\\\\\":[{\\\\\\\"linkedPulseId\\\\\\\":${value.selectedItemId}}]}`;\r\n      } else if (type === 'hour') {\r\n        const [hourStr, minuteStr] = value.split(':');\r\n        const formattedHour = parseInt(hourStr, 10);\r\n        const formattedMinute = parseInt(minuteStr, 10);\r\n\r\n        if (!isNaN(formattedHour) && !isNaN(formattedMinute)) {\r\n          return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"hour\\\\\\\":${formattedHour},\\\\\\\"minute\\\\\\\":${formattedMinute}}`;\r\n        } else {\r\n          // Handle the case where the conversion fails\r\n          console.error(`Invalid hour type value: ${value}`);\r\n          return '';\r\n        }\r\n      } else if (type === 'boolean') {\r\n        const booleanValue = value ? 'true' : 'false';\r\n      return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"checked\\\\\\\":\\\\\\\"${booleanValue}\\\\\\\"}`;\r\n      } else {\r\n        return `\\\\\\\"${id}\\\\\\\": \\\\\\\"${value}\\\\\\\"`;\r\n      }\r\n    })\r\n    .join(', ');\r\n\r\n  const mutationQuery = `mutation {\r\n      create_item (\r\n        board_id: ${boardId},\r\n        group_id: \"${groupId}\",\r\n        item_name: \"${itemName.replace(/\"/g, '\\\\\"')}\",\r\n        column_values: \"{${columnValues}}\"\r\n      ) {\r\n        id\r\n      }\r\n    }`;\r\n\r\n  // Make the API request with the dynamic query\r\n  try {\r\n    const response = await monday.api(mutationQuery);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Failed to create item:', error);\r\n    throw new Error('Failed to create item');\r\n  }\r\n}\r\n","D:\\monday.com\\Monday.form\\quickstart-react\\src\\Features\\PopupMessage.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mondaysdk.js",["97","98","99"],[],"import mondaySdk from \"monday-sdk-js\";\r\nimport React, { Component } from 'react';\r\n\r\nconst monday = mondaySdk();\r\nlet board;\r\nlet sessionToken;\r\nlet columnsData = null;\r\nlet curUserID;\r\nlet curUserName;\r\nlet isViewonly;\r\n// fetch Board ID and Session Token\r\nasync function initializeMondaySdk() {\r\n  try {\r\n    const contextResponse = await monday.get(\"context\");\r\n\r\n    isViewonly = contextResponse.data.user.isViewOnly;\r\n    board = contextResponse.data.boardId;\r\n    await fetchColumns(board); // Pass board as an argument\r\n    await fetchBoardAndGroupId(board); // Pass board as an argument\r\n  } catch (error) {\r\n    console.error(\"Error initializing Monday SDK:\", error.message);\r\n  }\r\n}\r\n\r\ninitializeMondaySdk();\r\n\r\n// Update fetchColumns to accept board as an argument\r\n//Fetching Columns\r\nexport async function fetchColumns() {\r\n  // Fetching Board ID\r\n  if (columnsData === null) {\r\n    try {\r\n      const response = await monday.api(\r\n        `query { boards(ids: ${board}) { name workspace { id name } columns { id title type settings_str } } }`\r\n      );\r\n      if (response.data && response.data.boards.length > 0) {\r\n        const col = response;\r\n        columnsData = col.data.boards[0].columns;\r\n      }\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch data: ' + error.message);\r\n    }\r\n  }\r\n\r\n  return columnsData;\r\n}\r\n\r\n// Update fetchBoardAndGroupId to accept board as an argument\r\nexport async function fetchBoardAndGroupId() {\r\n  try {\r\n    // Make an API call to fetch the boardId and groupId from Monday.com\r\n    const response = await monday.api(\r\n      `query { boards(ids: ${board}) { id groups { id title } } }`\r\n    );\r\n\r\n    if (response.data && response.data.boards.length > 0) {\r\n      const bg = response;\r\n      const boardId = bg.data.boards[0].id;\r\n      const groupId = bg.data.boards[0].groups[0].id;\r\n      return { boardId, groupId };\r\n    } else {\r\n      throw new Error('Failed to fetch board and group data');\r\n    }\r\n  } catch (error) {\r\n    throw new Error('Error fetching board and group data: ' + error.message);\r\n  }\r\n}\r\n\r\n\r\n//Fetching Current User\r\nexport async function fetchCurrentUser() {\r\n  try {\r\n    const user = await monday.api(`query {\r\n      me{\r\n        id\r\n        name\r\n      }\r\n    }\r\n    `);\r\n    const res = user.data.me;\r\n    curUserID = res.id;\r\n    curUserName = res.name;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch current User');\r\n  }\r\n}\r\n\r\nexport { board, curUserID, curUserName, isViewonly };\r\nexport { initializeMondaySdk };","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\eventUpdateForm.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\PopupForm.js",[],[],{"ruleId":"100","severity":1,"message":"101","line":2,"column":8,"nodeType":"102","messageId":"103","endLine":2,"endColumn":13},{"ruleId":"100","severity":1,"message":"104","line":10,"column":10,"nodeType":"102","messageId":"103","endLine":10,"endColumn":19},{"ruleId":"100","severity":1,"message":"105","line":11,"column":10,"nodeType":"102","messageId":"103","endLine":11,"endColumn":19},{"ruleId":"100","severity":1,"message":"106","line":6,"column":8,"nodeType":"102","messageId":"103","endLine":6,"endColumn":12},{"ruleId":"100","severity":1,"message":"107","line":6,"column":31,"nodeType":"102","messageId":"103","endLine":6,"endColumn":40},{"ruleId":"100","severity":1,"message":"108","line":152,"column":15,"nodeType":"102","messageId":"103","endLine":152,"endColumn":24},{"ruleId":"100","severity":1,"message":"109","line":314,"column":13,"nodeType":"102","messageId":"103","endLine":314,"endColumn":19},{"ruleId":"100","severity":1,"message":"110","line":315,"column":13,"nodeType":"102","messageId":"103","endLine":315,"endColumn":19},{"ruleId":"111","severity":1,"message":"112","line":15,"column":19,"nodeType":"113","messageId":"114","endLine":15,"endColumn":20,"suggestions":"115"},{"ruleId":"111","severity":1,"message":"112","line":15,"column":28,"nodeType":"113","messageId":"114","endLine":15,"endColumn":29,"suggestions":"116"},{"ruleId":"111","severity":1,"message":"112","line":15,"column":34,"nodeType":"113","messageId":"114","endLine":15,"endColumn":35,"suggestions":"117"},{"ruleId":"111","severity":1,"message":"112","line":15,"column":52,"nodeType":"113","messageId":"114","endLine":15,"endColumn":53,"suggestions":"118"},{"ruleId":"111","severity":1,"message":"112","line":15,"column":59,"nodeType":"113","messageId":"114","endLine":15,"endColumn":60,"suggestions":"119"},{"ruleId":"111","severity":1,"message":"112","line":15,"column":76,"nodeType":"113","messageId":"114","endLine":15,"endColumn":77,"suggestions":"120"},{"ruleId":"111","severity":1,"message":"112","line":22,"column":21,"nodeType":"113","messageId":"114","endLine":22,"endColumn":22,"suggestions":"121"},{"ruleId":"111","severity":1,"message":"112","line":22,"column":30,"nodeType":"113","messageId":"114","endLine":22,"endColumn":31,"suggestions":"122"},{"ruleId":"111","severity":1,"message":"112","line":22,"column":36,"nodeType":"113","messageId":"114","endLine":22,"endColumn":37,"suggestions":"123"},{"ruleId":"111","severity":1,"message":"112","line":22,"column":44,"nodeType":"113","messageId":"114","endLine":22,"endColumn":45,"suggestions":"124"},{"ruleId":"111","severity":1,"message":"112","line":22,"column":66,"nodeType":"113","messageId":"114","endLine":22,"endColumn":67,"suggestions":"125"},{"ruleId":"111","severity":1,"message":"112","line":22,"column":76,"nodeType":"113","messageId":"114","endLine":22,"endColumn":77,"suggestions":"126"},{"ruleId":"111","severity":1,"message":"112","line":30,"column":17,"nodeType":"113","messageId":"114","endLine":30,"endColumn":18,"suggestions":"127"},{"ruleId":"111","severity":1,"message":"112","line":30,"column":26,"nodeType":"113","messageId":"114","endLine":30,"endColumn":27,"suggestions":"128"},{"ruleId":"111","severity":1,"message":"112","line":30,"column":32,"nodeType":"113","messageId":"114","endLine":30,"endColumn":33,"suggestions":"129"},{"ruleId":"111","severity":1,"message":"112","line":30,"column":43,"nodeType":"113","messageId":"114","endLine":30,"endColumn":44,"suggestions":"130"},{"ruleId":"111","severity":1,"message":"112","line":30,"column":48,"nodeType":"113","messageId":"114","endLine":30,"endColumn":49,"suggestions":"131"},{"ruleId":"111","severity":1,"message":"112","line":30,"column":67,"nodeType":"113","messageId":"114","endLine":30,"endColumn":68,"suggestions":"132"},{"ruleId":"111","severity":1,"message":"112","line":32,"column":19,"nodeType":"113","messageId":"114","endLine":32,"endColumn":20,"suggestions":"133"},{"ruleId":"111","severity":1,"message":"112","line":32,"column":28,"nodeType":"113","messageId":"114","endLine":32,"endColumn":29,"suggestions":"134"},{"ruleId":"111","severity":1,"message":"112","line":32,"column":34,"nodeType":"113","messageId":"114","endLine":32,"endColumn":35,"suggestions":"135"},{"ruleId":"111","severity":1,"message":"112","line":32,"column":46,"nodeType":"113","messageId":"114","endLine":32,"endColumn":47,"suggestions":"136"},{"ruleId":"100","severity":1,"message":"101","line":2,"column":8,"nodeType":"102","messageId":"103","endLine":2,"endColumn":13},{"ruleId":"100","severity":1,"message":"137","line":2,"column":17,"nodeType":"102","messageId":"103","endLine":2,"endColumn":26},{"ruleId":"100","severity":1,"message":"138","line":6,"column":5,"nodeType":"102","messageId":"103","endLine":6,"endColumn":17},"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'workspace' is assigned a value but never used.","'boardName' is assigned a value but never used.","'Form' is defined but never used.","'curUserID' is defined but never used.","'uservalue' is assigned a value but never used.","'indexA' is assigned a value but never used.","'indexB' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\\".","TemplateElement","unnecessaryEscape",["139","140"],["141","142"],["143","144"],["145","146"],["147","148"],["149","150"],["151","152"],["153","154"],["155","156"],["157","158"],["159","160"],["161","162"],["163","164"],["165","166"],["167","168"],["169","170"],["171","172"],["173","174"],["175","176"],["177","178"],["179","180"],["181","182"],"'Component' is defined but never used.","'sessionToken' is defined but never used.",{"messageId":"183","fix":"184","desc":"185"},{"messageId":"186","fix":"187","desc":"188"},{"messageId":"183","fix":"189","desc":"185"},{"messageId":"186","fix":"190","desc":"188"},{"messageId":"183","fix":"191","desc":"185"},{"messageId":"186","fix":"192","desc":"188"},{"messageId":"183","fix":"193","desc":"185"},{"messageId":"186","fix":"194","desc":"188"},{"messageId":"183","fix":"195","desc":"185"},{"messageId":"186","fix":"196","desc":"188"},{"messageId":"183","fix":"197","desc":"185"},{"messageId":"186","fix":"198","desc":"188"},{"messageId":"183","fix":"199","desc":"185"},{"messageId":"186","fix":"200","desc":"188"},{"messageId":"183","fix":"201","desc":"185"},{"messageId":"186","fix":"202","desc":"188"},{"messageId":"183","fix":"203","desc":"185"},{"messageId":"186","fix":"204","desc":"188"},{"messageId":"183","fix":"205","desc":"185"},{"messageId":"186","fix":"206","desc":"188"},{"messageId":"183","fix":"207","desc":"185"},{"messageId":"186","fix":"208","desc":"188"},{"messageId":"183","fix":"209","desc":"185"},{"messageId":"186","fix":"210","desc":"188"},{"messageId":"183","fix":"211","desc":"185"},{"messageId":"186","fix":"212","desc":"188"},{"messageId":"183","fix":"213","desc":"185"},{"messageId":"186","fix":"214","desc":"188"},{"messageId":"183","fix":"215","desc":"185"},{"messageId":"186","fix":"216","desc":"188"},{"messageId":"183","fix":"217","desc":"185"},{"messageId":"186","fix":"218","desc":"188"},{"messageId":"183","fix":"219","desc":"185"},{"messageId":"186","fix":"220","desc":"188"},{"messageId":"183","fix":"221","desc":"185"},{"messageId":"186","fix":"222","desc":"188"},{"messageId":"183","fix":"223","desc":"185"},{"messageId":"186","fix":"224","desc":"188"},{"messageId":"183","fix":"225","desc":"185"},{"messageId":"186","fix":"226","desc":"188"},{"messageId":"183","fix":"227","desc":"185"},{"messageId":"186","fix":"228","desc":"188"},{"messageId":"183","fix":"229","desc":"185"},{"messageId":"186","fix":"230","desc":"188"},"removeEscape",{"range":"231","text":"232"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"233","text":"234"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"235","text":"232"},{"range":"236","text":"234"},{"range":"237","text":"232"},{"range":"238","text":"234"},{"range":"239","text":"232"},{"range":"240","text":"234"},{"range":"241","text":"232"},{"range":"242","text":"234"},{"range":"243","text":"232"},{"range":"244","text":"234"},{"range":"245","text":"232"},{"range":"246","text":"234"},{"range":"247","text":"232"},{"range":"248","text":"234"},{"range":"249","text":"232"},{"range":"250","text":"234"},{"range":"251","text":"232"},{"range":"252","text":"234"},{"range":"253","text":"232"},{"range":"254","text":"234"},{"range":"255","text":"232"},{"range":"256","text":"234"},{"range":"257","text":"232"},{"range":"258","text":"234"},{"range":"259","text":"232"},{"range":"260","text":"234"},{"range":"261","text":"232"},{"range":"262","text":"234"},{"range":"263","text":"232"},{"range":"264","text":"234"},{"range":"265","text":"232"},{"range":"266","text":"234"},{"range":"267","text":"232"},{"range":"268","text":"234"},{"range":"269","text":"232"},{"range":"270","text":"234"},{"range":"271","text":"232"},{"range":"272","text":"234"},{"range":"273","text":"232"},{"range":"274","text":"234"},{"range":"275","text":"232"},{"range":"276","text":"234"},[661,662],"",[661,661],"\\",[670,671],[670,670],[676,677],[676,676],[694,695],[694,694],[701,702],[701,701],[718,719],[718,718],[1043,1044],[1043,1043],[1052,1053],[1052,1052],[1058,1059],[1058,1058],[1066,1067],[1066,1066],[1088,1089],[1088,1088],[1098,1099],[1098,1098],[1407,1408],[1407,1407],[1416,1417],[1416,1416],[1422,1423],[1422,1422],[1433,1434],[1433,1433],[1438,1439],[1438,1438],[1457,1458],[1457,1457],[1498,1499],[1498,1498],[1507,1508],[1507,1507],[1513,1514],[1513,1513],[1525,1526],[1525,1525]]