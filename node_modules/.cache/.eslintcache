[{"D:\\monday.com\\Monday.form\\quickstart-react\\src\\index.js":"1","D:\\monday.com\\Monday.form\\quickstart-react\\src\\App.js":"2","D:\\monday.com\\Monday.form\\quickstart-react\\src\\serviceWorker.js":"3","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\getValues.js":"4","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\CalendarEvents.js":"5","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\MyCalendar.js":"6","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\Form.js":"7","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mutation.js":"8","D:\\monday.com\\Monday.form\\quickstart-react\\src\\Features\\PopupMessage.js":"9","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mondaysdk.js":"10","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\eventUpdateForm.js":"11","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\PopupForm.js":"12"},{"size":484,"mtime":1691032858000,"results":"13","hashOfConfig":"14"},{"size":1931,"mtime":1705406955430,"results":"15","hashOfConfig":"14"},{"size":5085,"mtime":1691032858000,"results":"16","hashOfConfig":"14"},{"size":2261,"mtime":1705317224549,"results":"17","hashOfConfig":"14"},{"size":3021,"mtime":1704979054006,"results":"18","hashOfConfig":"14"},{"size":4834,"mtime":1704735044722,"results":"19","hashOfConfig":"14"},{"size":15128,"mtime":1705403271591,"results":"20","hashOfConfig":"14"},{"size":2105,"mtime":1705052224391,"results":"21","hashOfConfig":"14"},{"size":534,"mtime":1699364322932,"results":"22","hashOfConfig":"14"},{"size":2508,"mtime":1704971175125,"results":"23","hashOfConfig":"14"},{"size":531,"mtime":1705069034392,"results":"24","hashOfConfig":"14"},{"size":12793,"mtime":1705499878349,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1153pv6",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},"D:\\monday.com\\Monday.form\\quickstart-react\\src\\index.js",[],[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\App.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\serviceWorker.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\getValues.js",["70"],[],"//getValues.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport { board, initializeMondaySdk } from './mondaysdk.js';\r\n\r\nconst monday = mondaySdk();\r\n\r\nconst ApiCall = ({ render }) => {\r\n  const [groupedItems, setGroupedItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the Monday.com board\r\n    async function fetchData() {\r\n      try {\r\n        await initializeMondaySdk();\r\n        const response = await monday.api(\r\n          `query{\r\n            boards(ids: ${board}){\r\n              name\r\n              workspace{\r\n                id\r\n                name\r\n              }\r\n              items_page (limit:500){\r\n                cursor\r\n                items{\r\n                  id\r\n                  name\r\n                  group{\r\n                    id\r\n                    title\r\n                  }\r\n                  column_values{\r\n                    id\r\n                    text\r\n                    type\r\n                    value\r\n                    column{\r\n                      id\r\n                      title\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }`,{apiVersion: '2023-10'}\r\n        );\r\n\r\n        const boardData = response.data.boards[0].items_page; // Access the first board in the response\r\n        console.log(boardData);\r\n\r\n        // Process the data to create groupedItems\r\n        const groupedItems = processGroupedItems(boardData.items);\r\n\r\n        setGroupedItems(groupedItems);\r\n      } catch (error) {\r\n        console.error('Error fetching data from Monday.com:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []); // Empty dependency array to run the effect only once\r\n\r\n  // Render the child components\r\n  return render(groupedItems);\r\n};\r\n\r\n// Function to process data and create groupedItems\r\nconst processGroupedItems = (items) => {\r\n  const groupedItems = {};\r\n\r\n  items.forEach((item) => {\r\n    const groupId = item.group.id;\r\n    if (!groupedItems[groupId]) {\r\n      groupedItems[groupId] = {\r\n        title: item.group.title,\r\n        items: [],\r\n      };\r\n    }\r\n    groupedItems[groupId].items.push(item);\r\n  });\r\n\r\n  return groupedItems;\r\n};\r\n\r\nexport default ApiCall;",[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\CalendarEvents.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\MyCalendar.js",["71"],[],"import React, { useState } from 'react';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport moment from 'moment';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport './Calendar.css'; // Import your existing styles\r\nimport Form from '../Form/Form'; // Import the Form component\r\nimport { fetchItemData } from '../Form/eventUpdateForm';\r\nimport mondaySdk from 'monday-sdk-js';\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nconst monday = mondaySdk();\r\nconst MyCalendar = ({ events, setSelectedEvent, setShowPopup, showPopup, selectedEvent }) => {\r\n  const [view, setView] = useState('month');\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [editMode, setEditMode] = useState(false); // New state for edit mode\r\n\r\n  const handleEventClick = (event, e) => {\r\n    if (event.status && event.status.toLowerCase() === 'approved' && editMode) {\r\n      monday.execute(\"notice\", {\r\n        message: \"You cannot edit/update approved time entries\",\r\n        type: \"error\", // or \"error\" (red), or \"info\" (blue)\r\n        timeout: 10000,\r\n      });\r\n    } else if (editMode) {\r\n      fetchItemData(event.resource)\r\n        .then((itemData) => {\r\n          setSelectedEvent(itemData);\r\n          setShowPopup(true);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching item data:', error);\r\n        });\r\n    } else {\r\n      setView('day');\r\n      setSelectedDate(moment(event.start));\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleDateClick = (date, view) => {\r\n    if (view === 'month') {\r\n      setView('day');\r\n      setSelectedDate(moment(date));\r\n    }\r\n  };\r\n\r\n  const eventStyleGetter = (event, start, end, isSelected) => {\r\n    let backgroundColor = '#FFB534'; // Default color\r\n\r\n    switch (event.status?.toLowerCase()) {\r\n      case 'in approval':\r\n        backgroundColor = '#F7C04A';\r\n        break;\r\n      case 'approved':\r\n        backgroundColor = '#65B741';\r\n        break;\r\n      case 'rejected':\r\n        backgroundColor = '#FF6464';\r\n        break;\r\n      default:\r\n        backgroundColor = '#FFB534'; // Default color\r\n    }\r\n\r\n    return {\r\n      style: {\r\n        backgroundColor,\r\n      },\r\n    };\r\n  };\r\n\r\n\r\n\r\n  const handleDrillDown = (date, view) => {\r\n    if (view === 'day') {\r\n      setView('day');\r\n      setSelectedDate(moment(date));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"calendar-container\">\r\n      <div className='heading'>\r\n        <h1>Calendar</h1>\r\n        <button onClick={() => setEditMode(!editMode)}>\r\n          {editMode ? 'Switch to View Mode' : 'Switch to Edit Mode'}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        {editMode ? (\r\n          <Calendar\r\n            localizer={localizer}\r\n            events={events}\r\n            startAccessor=\"start\"\r\n            endAccessor=\"end\"\r\n            defaultView=\"month\"\r\n            views={['month', 'week', 'day', 'agenda']}\r\n            selectable={true}\r\n            onView={(newView) => setView(newView)}\r\n            onSelectEvent={handleEventClick}\r\n            onSelectSlot={handleDateClick}\r\n            view={view}\r\n            resourceAccessor=\"resource\"\r\n            date={selectedDate}\r\n            onDrillDown={handleDrillDown}\r\n            onNavigate={(date, view) => {\r\n              setView(view);\r\n              setSelectedDate(date);\r\n            }}\r\n            eventPropGetter={eventStyleGetter}\r\n            style={{ height: 600, width: 750 }}\r\n          />// Render the Form component in edit mode\r\n        ) : (\r\n          <Calendar\r\n            localizer={localizer}\r\n            events={events}\r\n            startAccessor=\"start\"\r\n            endAccessor=\"end\"\r\n            defaultView=\"month\"\r\n            views={['month', 'week', 'day', 'agenda']}\r\n            selectable={true}\r\n            onView={(newView) => setView(newView)}\r\n            onSelectEvent={handleEventClick}\r\n            onSelectSlot={handleDateClick}\r\n            resourceAccessor=\"resource\"\r\n            view={view}\r\n            date={selectedDate}\r\n            onDrillDown={handleDrillDown}\r\n            onNavigate={(date, view) => {\r\n              setView(view);\r\n              setSelectedDate(date);\r\n            }}\r\n            eventPropGetter={eventStyleGetter}\r\n            style={{ height: 600, width: 750 }}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n\r\n      <div className=\"legend\">\r\n        <div className=\"legend-item\" style={{ backgroundColor: '#F7C04A', marginRight: '5px' }}></div>\r\n        <span>In Approval </span>\r\n        <div className=\"legend-item\" style={{ backgroundColor: '#65B741', marginLeft: '5px' }}></div>\r\n        <span>Approved </span>\r\n        <div className=\"legend-item\" style={{ backgroundColor: '#FF6464', marginLeft: '5px' }}></div>\r\n        <span>Rejected </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyCalendar;","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\Form.js",["72","73","74","75"],[],"import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { fetchColumns, fetchBoardAndGroupId, fetchCurrentUser } from '../../API Call/mondaysdk';\r\nimport { createItem } from '../../API Call/mutation';\r\nimport PopupMessage from '../../Features/PopupMessage';\r\nimport { initializeMondaySdk, curUserID, curUserName } from '../../API Call/mondaysdk';\r\nimport mondaySdk from 'monday-sdk-js';\r\nimport Select from 'react-select';\r\n\r\nconst monday = mondaySdk();\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [],\r\n      boardId: null,\r\n      groupId: null,\r\n      successMessage: '',\r\n      errorMessage: '',\r\n      showPopup: false,\r\n      popupMessage: '',\r\n      popupType: 'success',\r\n      totalHours: '',\r\n      edit: false, // Set edit to true or false based on your requirement\r\n      nameFieldId: '', // Add nameFieldId to the initial state\r\n      subitemsField: [],\r\n      boardRelationSelections: {},\r\n      text6: null,\r\n      text66: null,\r\n      ...props,\r\n    };\r\n\r\n    // Initialize board-relation columns\r\n    const boardRelationColumns = this.state.columns.filter((column) => column.type === 'board-relation');\r\n    for (const boardRelationColumn of boardRelationColumns) {\r\n      this.state[boardRelationColumn.id] = {\r\n        selectedItemId: '', // Initialize selectedItemId\r\n        selectedItem: null, // Initialize selectedItem\r\n        items: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////App Handlers///////////////////////////////////////\r\n\r\n  handlePopupClose = () => {\r\n    this.setState({\r\n      showPopup: false,\r\n      popupMessage: '',\r\n    });\r\n  };\r\n\r\n  handleBoardRelationChange = async (e, column) => {\r\n    const selectedItemId = e.target.value;\r\n    const selectedBoardItems = this.state[column.id].items;\r\n    const selectedItem = selectedBoardItems.find((item) => item.id === selectedItemId);\r\n\r\n    // Log the selectedItem to verify its structure\r\n\r\n    // Populate Manager and Subitems fields based on the selected board-relation option\r\n    const managerValue = selectedItem ? selectedItem.manager : '';\r\n    const subitems = selectedItem ? selectedItem.subitems : [];\r\n\r\n\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: {\r\n        selectedItemId,\r\n        selectedItem,\r\n        items: prevState[column.id].items,\r\n      },\r\n      // Use a separate update for Manager and Subitems fields\r\n      managerFieldId: managerValue,\r\n      // Reset the name field when a new project is selected\r\n      subitemsField: subitems,\r\n      // Update state for the \"Selected Project\" column (text6)\r\n      text6: selectedItemId, // Assuming text6 is of type \"text\"\r\n    }));\r\n  };\r\n\r\n\r\n  handleCheckboxChange = (e, column) => {\r\n    const { checked } = e.target;\r\n    this.setState({\r\n      [column.id]: checked,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (selectedOption, column) => {\r\n    // Assuming that the selectedOption contains the ID as value\r\n    const selectedId = selectedOption ? selectedOption.value : null;\r\n    const selectedOptionName = selectedOption ? selectedOption.label : null;\r\n    // Update state for the \"Name\" column\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: selectedOptionName,\r\n    }));\r\n  \r\n    // Update state for the \"Selected Task\" column (text66)\r\n    this.setState({\r\n      text66: selectedId,\r\n    });\r\n  }\r\n  \r\n\r\n  handleTextInputChange = (e, column) => {\r\n    const { value } = e.target;\r\n  \r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: value,\r\n    }));\r\n  }\r\n\r\n\r\n  resetFormState() {\r\n    const { columns } = this.state;\r\n    const initialValues = {};\r\n\r\n    // Only reset non-board-relation columns\r\n    columns.forEach((column) => {\r\n      if (column.type !== 'board-relation') {\r\n        initialValues[column.id] = null;\r\n      }\r\n    });\r\n\r\n    this.setState({ successMessage: '', errorMessage: '', ...initialValues });\r\n  }\r\n\r\n  handleHourChange = (e, column) => {\r\n    const { value } = e.target;\r\n\r\n    if (column.title === 'Hours Spent') {\r\n      this.setState({\r\n        totalHours: value,\r\n      });\r\n    } else {\r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        [column.id]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      if (!this.state.columns.length) { // Check if columns are already fetched\r\n        await initializeMondaySdk(); // Call initializeMondaySdk here\r\n        const uservalue = await fetchCurrentUser();\r\n        const columns = await fetchColumns();\r\n        const { boardId, groupId } = await fetchBoardAndGroupId();\r\n        const initialValues = {};\r\n        const boardRelationColumns = columns.filter((column) => column.type === 'board-relation');\r\n\r\n        // Fetch and populate data for board-relation columns\r\n        for (const boardRelationColumn of boardRelationColumns) {\r\n          const { boardIds } = JSON.parse(boardRelationColumn.settings_str);\r\n          const boardItems = await this.fetchBoardItems(boardIds[0]);\r\n\r\n          initialValues[boardRelationColumn.id] = {\r\n            selectedItemId: '', // Initialize selectedItemId\r\n            selectedItem: null, // Initialize selectedItem\r\n            items: boardItems,\r\n          };\r\n        }\r\n\r\n        // Initialize other columns\r\n        columns.forEach((column) => {\r\n          if (column.type !== 'board-relation') {\r\n            initialValues[column.id] = null;\r\n          }\r\n\r\n          if (column.type === 'date') {\r\n            initialValues[column.id] = new Date().toISOString().split('T')[0];\r\n          }\r\n        });\r\n\r\n\r\n\r\n        this.setState({ columns, boardId, groupId, ...initialValues });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error Fetching data in Form.js:', error);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /////////////////////////////////////Fetching Projects/////////////////////////////////////\r\n  async fetchBoardItems(boardId) {\r\n    try {\r\n\r\n      const response1 = await monday.api(`\r\n      query {\r\n        boards(ids: ${boardId}) {\r\n          items {\r\n            id\r\n            name\r\n            group {\r\n              id\r\n              title\r\n            }\r\n            column_values {\r\n              id\r\n              title\r\n              text\r\n            }\r\n            subitems {\r\n              id\r\n              name\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `);\r\n\r\n      const data = response1;\r\n      if (data.data && data.data.boards && data.data.boards.length > 0) {\r\n        return data.data.boards[0].items.map(item => {\r\n          const managerColumn = item.column_values.find(column => column.title === 'Manager');\r\n          return {\r\n            id: item.id,\r\n            name: item.name,\r\n            group: item.group,\r\n            manager: managerColumn ? managerColumn.text : '',\r\n            subitems: item.subitems || [],\r\n          };\r\n        }).filter(item => item.group.title === 'On Going Projects');\r\n      }\r\n\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching board items:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n\r\n  ////////////////////////////////////////////////////Submit Handler////////////////////////////////////////////////////\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { boardId, groupId, columns, ...values } = this.state;\r\n    // Exclude \"Manager\" column from the submission\r\n    const columnValues = columns\r\n      .filter(column => column.title !== \"Manager\")\r\n      .map(column => ({\r\n        id: column.id,\r\n        value: values[column.id],\r\n        type: column.type,\r\n      }));\r\n\r\n    try {\r\n      const newItem = await createItem(boardId, groupId, columnValues);\r\n\r\n      if (newItem) {\r\n        this.setState({\r\n          showPopup: true,\r\n          popupMessage: 'Item created successfully',\r\n          popupType: 'success',\r\n        });\r\n        this.resetFormState();\r\n        setTimeout(() => {\r\n          this.setState({ successMessage: '' });\r\n        }, 3000);\r\n        monday.execute(\"notice\", {\r\n          message: \"Time entry created successfully.\",\r\n          type: \"success\", // or \"error\" (red), or \"info\" (blue)\r\n          timeout: 10000,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          showPopup: true,\r\n          popupMessage: 'Error creating item',\r\n          popupType: 'error',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating item:', error);\r\n      this.setState({\r\n        showPopup: true,\r\n        popupMessage: 'Error creating item',\r\n        popupType: 'error',\r\n      });\r\n      monday.execute(\"notice\", {\r\n        message: \"Error creating time entry!!\",\r\n        type: \"error\", // or \"error\" (red), or \"info\" (blue)\r\n        timeout: 10000,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  /////////////////////////////////////////App Render/////////////////////////////////////////////\r\n  render() {\r\n    const { columns, successMessage, errorMessage, showPopup, popupMessage, popupType } = this.state;\r\n\r\n    // Filter out columns \r\n    const filteredColumns = columns.filter(column => column.title !== \"Subitems\" && column.title !== \"Person\" && column.title !== \"Status\" && column.id !== \"text6\" && column.id !== \"text66\" && column.title !== \"Selected Project\" && column.title !==\"Selected Task\");\r\n    const headerFilter = columns.filter(column => column.title === \"Person\" || column.title === \"Status\")\r\n    // Specify the desired column order\r\n    const desiredColumnOrder = [\"Project\", \"Manager\", \"Name\", \"Start Date\", \"End Date\", \"Hours Spent\", \"All Day Task\", \"Start Time\", \"End Time\"];\r\n\r\n    // Create a map to efficiently look up column indices by title\r\n    const columnIndexMap = {};\r\n    columns.forEach((column, index) => {\r\n      columnIndexMap[column.title] = index;\r\n    });\r\n\r\n    // Sort filtered columns based on the desired order\r\n    const sortedColumns = [...filteredColumns].sort((a, b) => {\r\n      const indexA = columnIndexMap[a.title];\r\n      const indexB = columnIndexMap[b.title];\r\n      return desiredColumnOrder.indexOf(a.title) - desiredColumnOrder.indexOf(b.title);\r\n    });\r\n\r\n    // Inside the render method\r\n    return (\r\n      <div className=\"form-container\">\r\n        <h2>Time Entry Form (User view)</h2>\r\n        <h4>\r\n          {headerFilter.map((column, index) => (\r\n            <span key={column.id}>\r\n              {column.title === 'Person'\r\n                ? `Person: ${curUserName}`\r\n                : `${column.title}: ${column.type === 'color' ? 'In Approval' : this.state[column.id] || 'N/A'}`}\r\n              {index < headerFilter.length - 1 && ' | '} {/* Add a space if it's not the last column */}\r\n            </span>\r\n          ))}\r\n        </h4>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-row\">\r\n            {sortedColumns.map((column, index) => (\r\n              <div key={column.id} className=\"form-input\">\r\n                <label>{column.type === 'name' ? 'Task' : column.title}</label>\r\n                {column.type === \"name\" ? (\r\n                  <Select\r\n                  name={column.id}\r\n                  value={this.state[column.id] ? { value: this.state[column.id], label: this.state[column.id] } : null}\r\n                  onChange={(selectedOption) => this.handleInputChange(selectedOption, column)}\r\n                  options={[\r\n                    { value: '', label: 'Select a name' }, // Default option\r\n                    ...this.state.subitemsField.map((subitem) => ({ value: subitem.id, label: subitem.name }))\r\n                  ]}\r\n                  placeholder=\"Select a name\"\r\n                  isSearchable={false}\r\n                />\r\n                \r\n                ) : column.title === \"Manager\" ? (\r\n                  <input\r\n                    type={column.type === 'text'}\r\n                    name={column.id}  // Make sure the name attribute matches the column.id\r\n                    value={this.state.managerFieldId || ''}  // Use managerFieldId instead of managerFieldName\r\n                    readOnly\r\n                  />\r\n                ) : column.type === 'board-relation' ? (\r\n                  <Select\r\n                    name={column.title}\r\n                    value={this.state[column.id] ? { value: this.state[column.id].selectedItemId, label: this.state[column.id].selectedItem ? this.state[column.id].selectedItem.name : '' } : null}\r\n                    onChange={(selectedOption) => this.handleBoardRelationChange({ target: { value: selectedOption.value } }, column)}\r\n                    options={[\r\n                      { value: '', label: 'Select an option' }, // Default option\r\n                      ...(this.state[column.id] ? this.state[column.id].items.map((item) => ({ value: item.id, label: item.name })) : [])\r\n                    ]}\r\n                    placeholder=\"Select an option\"\r\n                    isSearchable={false}\r\n                  />\r\n                ) : column.type === 'hour' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"time\"\r\n                      name={column.title}\r\n                      value={this.state[column.id] || ''}  // Set the checked attribute based on the state\r\n                      onChange={(e) => this.handleHourChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : column.type === 'boolean' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"yourCheckboxId\"\r\n                      name={column.title}\r\n                      checked={this.state[column.id] || false}  // Set the checked attribute based on the state\r\n                      onChange={(e) => this.handleCheckboxChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : column.title === 'Hours Spent' ? (\r\n                  <div>\r\n                    <input\r\n                      type={column.type === 'hour' ? 'text' : column.type}\r\n                      name={column.title}\r\n                      value={this.state[column.id] || ''}\r\n                      onChange={(e) => this.handleTextInputChange(e, column)}\r\n                    />\r\n\r\n                  </div>\r\n                ) : (\r\n                  <input\r\n                    type={column.type === 'color' ? 'text' : column.type}\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleTextInputChange(e, column)}\r\n                  />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"form-submit\">\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n        </form>\r\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        {showPopup && (\r\n          <PopupMessage message={popupMessage} type={popupType} onClose={this.handlePopupClose} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mutation.js",["76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97"],[],"import mondaySdk from 'monday-sdk-js';\r\n\r\nconst monday = mondaySdk();\r\n\r\nexport async function createItem(boardId, groupId, columnData) {\r\n  // Filter out columns with null values\r\n  const filteredColumnData = columnData.filter(({ value }) => value !== null && value !== '' && value.selectedItemId !== '' && value.selectedItemId !== false);\r\n\r\n  // Construct the mutation query dynamically\r\n  const itemName = filteredColumnData.find(column => column.id === 'name').value;\r\n\r\n  const columnValues = filteredColumnData\r\n    .map(({ id, value, type }) => {\r\n      if (type === 'board-relation' && typeof value === 'object' && value !== null) {\r\n        return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"linkedPulseIds\\\\\\\":[{\\\\\\\"linkedPulseId\\\\\\\":${value.selectedItemId}}]}`;\r\n      } else if (type === 'hour') {\r\n        const [hourStr, minuteStr] = value.split(':');\r\n        const formattedHour = parseInt(hourStr, 10);\r\n        const formattedMinute = parseInt(minuteStr, 10);\r\n\r\n        if (!isNaN(formattedHour) && !isNaN(formattedMinute)) {\r\n          return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"hour\\\\\\\":${formattedHour},\\\\\\\"minute\\\\\\\":${formattedMinute}}`;\r\n        } else {\r\n          // Handle the case where the conversion fails\r\n          console.error(`Invalid hour type value: ${value}`);\r\n          return '';\r\n        }\r\n      } else if (type === 'boolean') {\r\n        const booleanValue = value ? 'true' : 'false';\r\n      return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"checked\\\\\\\":\\\\\\\"${booleanValue}\\\\\\\"}`;\r\n      } else {\r\n        return `\\\\\\\"${id}\\\\\\\": \\\\\\\"${value}\\\\\\\"`;\r\n      }\r\n    })\r\n    .join(', ');\r\n\r\n  const mutationQuery = `mutation {\r\n      create_item (\r\n        board_id: ${boardId},\r\n        group_id: \"${groupId}\",\r\n        item_name: \"${itemName.replace(/\"/g, '\\\\\"')}\",\r\n        column_values: \"{${columnValues}}\"\r\n      ) {\r\n        id\r\n      }\r\n    }`;\r\n\r\n  // Make the API request with the dynamic query\r\n  try {\r\n    const response = await monday.api(mutationQuery);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Failed to create item:', error);\r\n    throw new Error('Failed to create item');\r\n  }\r\n}\r\n","D:\\monday.com\\Monday.form\\quickstart-react\\src\\Features\\PopupMessage.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\API Call\\mondaysdk.js",["98","99"],[],"import mondaySdk from \"monday-sdk-js\";\r\nimport React, { Component } from 'react';\r\n\r\nconst monday = mondaySdk();\r\nlet board;\r\nlet columnsData = null;\r\nlet curUserID;\r\nlet curUserName;\r\nlet isViewonly;\r\n// fetch Board ID and Session Token\r\nasync function initializeMondaySdk() {\r\n  try {\r\n    const contextResponse = await monday.get(\"context\");\r\n\r\n    isViewonly = contextResponse.data.user.isViewOnly;\r\n    board = contextResponse.data.boardId;\r\n    await fetchColumns(board); // Pass board as an argument\r\n    await fetchBoardAndGroupId(board); // Pass board as an argument\r\n  } catch (error) {\r\n    console.error(\"Error initializing Monday SDK:\", error.message);\r\n  }\r\n}\r\n\r\ninitializeMondaySdk();\r\n\r\n// Update fetchColumns to accept board as an argument\r\n//Fetching Columns\r\nexport async function fetchColumns() {\r\n  // Fetching Board ID\r\n  if (columnsData === null) {\r\n    try {\r\n      const response = await monday.api(\r\n        `query { boards(ids: ${board}) { name workspace { id name } columns { id title type settings_str } } }`\r\n      );\r\n      if (response.data && response.data.boards.length > 0) {\r\n        const col = response;\r\n        columnsData = col.data.boards[0].columns;\r\n      }\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch data: ' + error.message);\r\n    }\r\n  }\r\n\r\n  return columnsData;\r\n}\r\n\r\n// Update fetchBoardAndGroupId to accept board as an argument\r\nexport async function fetchBoardAndGroupId() {\r\n  try {\r\n    // Make an API call to fetch the boardId and groupId from Monday.com\r\n    const response = await monday.api(\r\n      `query { boards(ids: ${board}) { id groups { id title } } }`\r\n    );\r\n\r\n    if (response.data && response.data.boards.length > 0) {\r\n      const bg = response;\r\n      const boardId = bg.data.boards[0].id;\r\n      const groupId = bg.data.boards[0].groups[0].id;\r\n      return { boardId, groupId };\r\n    } else {\r\n      throw new Error('Failed to fetch board and group data');\r\n    }\r\n  } catch (error) {\r\n    throw new Error('Error fetching board and group data: ' + error.message);\r\n  }\r\n}\r\n\r\n\r\n//Fetching Current User\r\nexport async function fetchCurrentUser() {\r\n  try {\r\n    const user = await monday.api(`query {\r\n      me{\r\n        id\r\n        name\r\n      }\r\n    }\r\n    `);\r\n    const res = user.data.me;\r\n    curUserID = res.id;\r\n    curUserName = res.name;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch current User');\r\n  }\r\n}\r\n\r\nexport { board, curUserID, curUserName, isViewonly };\r\nexport { initializeMondaySdk };","D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Form\\eventUpdateForm.js",[],[],"D:\\monday.com\\Monday.form\\quickstart-react\\src\\UI Components\\Calendar\\PopupForm.js",["100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122"],[],"import React, { useState, useEffect } from 'react';\r\nimport mondaySdk from 'monday-sdk-js';\r\nimport \"./PopupForm.css\";\r\nimport Select from 'react-select';\r\nimport { board } from '../../API Call/mondaysdk';\r\n\r\nconst monday = mondaySdk();\r\n\r\nconst PopupForm = ({ isOpen, onClose, eventData }) => {\r\n  const [formData, setFormData] = useState({});\r\n  const [boardRelationOptions, setBoardRelationOptions] = useState([]);\r\n  const [subitemOptions, setSubitemOptions] = useState([]);\r\n  const [initialBoardRelationValue, setInitialBoardRelationValue] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const initialData = {};\r\n      eventData.column_values.forEach((column) => {\r\n        const { id, text, value } = column;\r\n        initialData[id] = text || (value && JSON.parse(value).text) || '';\r\n        if (column.type === 'hour' && value) {\r\n          const { hour, minute } = JSON.parse(value);\r\n          const formattedHour = `${hour < 10 ? '0' : ''}${hour}`;\r\n          const formattedMinute = `${minute < 10 ? '0' : ''}${minute}`;\r\n          initialData[id] = `${formattedHour}:${formattedMinute}`;\r\n        }\r\n      });\r\n\r\n      // Include \"Name\" column inside the loop\r\n      const nameColumn = eventData.name;\r\n      initialData['name'] = nameColumn;\r\n\r\n      const linkedPulseIdColumn = eventData.column_values.find(col => col.id === 'connect_boards');\r\n      if (linkedPulseIdColumn) {\r\n        const linkedPulseId = linkedPulseIdColumn.value;\r\n\r\n        // Extract linked board ID from settings_str\r\n        const settings = JSON.parse(linkedPulseIdColumn.column.settings_str);\r\n        const linkedBoardIds = settings.boardIds;\r\n\r\n        // Assuming there is only one linked board ID\r\n        const linkedBoardId = linkedBoardIds[0];\r\n\r\n        // Make an API call to fetch items from the linked board\r\n        const linkedItemsResponse = await monday.api(`\r\n          query {\r\n            boards(ids: ${linkedBoardId}) {\r\n              items_page {\r\n                items {\r\n                  id\r\n                  name\r\n                  group {\r\n                    id\r\n                    title\r\n                  }\r\n                  column_values {\r\n                    id\r\n                    text\r\n                    type\r\n                    value\r\n                    column {\r\n                      id\r\n                      title\r\n                    }\r\n                  }\r\n                  subitems {\r\n                    id\r\n                    name\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          `, { apiVersion: '2023-10' });\r\n\r\n        // Check if the linked items were successfully fetched\r\n        if (linkedItemsResponse.data && linkedItemsResponse.data.boards) {\r\n          const linkedItems = linkedItemsResponse.data.boards[0].items_page.items;\r\n          console.log(linkedItems);\r\n          // Update the options for the \"board-relation\" column\r\n          const options = linkedItems.map(item => ({\r\n            value: item.id,\r\n            label: item.name,\r\n          }));\r\n\r\n          // Set the options for the state variable\r\n          setBoardRelationOptions(options);\r\n\r\n          const subitemOptions = linkedItems\r\n            .flatMap(item => item.subitems.map(subitem => subitem.name))\r\n            .map(subitemName => ({\r\n              value: subitemName,\r\n              label: subitemName,\r\n            }));\r\n\r\n          // Set the options for the state variable\r\n          setSubitemOptions(subitemOptions);\r\n\r\n          // Set the initial value of the \"board-relation\" column\r\n          const linkedPulseIdColumn = eventData.column_values.find(col => col.id === 'connect_boards');\r\n    if (linkedPulseIdColumn) {\r\n      const linkedPulseIdValue = linkedPulseIdColumn.value;\r\n      const linkedPulseIdObject = JSON.parse(linkedPulseIdValue);\r\n      const linkedPulseId = linkedPulseIdObject.linkedPulseIds[0]?.linkedPulseId || null;\r\n\r\n      const selectedOption = options.find(option => String(option.value) === String(linkedPulseId));\r\n      setInitialBoardRelationValue(selectedOption || null);\r\n    }\r\n        }\r\n      }\r\n\r\n\r\n      setFormData(initialData);\r\n    };\r\n\r\n    fetchData();\r\n  }, [eventData]);\r\n\r\n\r\n  const handleInputChange = (selectedOption, columnId) => {\r\n    // Handle the change in the selected option for the react-select component\r\n    const inputValue = selectedOption ? selectedOption.value : '';\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [columnId]: inputValue,\r\n    }));\r\n  };\r\n\r\n  const handleCheckboxChange = (e, columnId) => {\r\n    const { checked } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [columnId]: checked,\r\n    }));\r\n  };\r\n\r\n  const handleInputValueChange = (e, columnId) => {\r\n    const { value } = e.target;\r\n    setFormData((prevState) => ({\r\n      ...prevState,\r\n      [columnId]: value,\r\n    }));\r\n\r\n  };\r\n\r\n  const handleHourChange = (e, columnId) => {\r\n    const { value } = e.target;\r\n    setFormData((prevState) => ({\r\n      ...prevState,\r\n      [columnId]: value,\r\n    }));\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    try {\r\n      const columnUpdates = Object.entries(formData)\r\n        .filter(([columnId, value]) => {\r\n          // Exclude columns that haven't changed\r\n          const currentValue = eventData.column_values.find(col => col.id === columnId)?.text || '';\r\n          return value !== null && value !== undefined && value !== '' && value !== currentValue;\r\n        })\r\n        .map(([columnId, value]) => {\r\n          if (columnId === 'numbers') {\r\n            return `\\\\\\\"${columnId}\\\\\\\":${parseFloat(value) || 0}`;\r\n          } else if (columnId === 'connect_boards' || columnId === 'mirror6') {\r\n            return `\\\\\\\"${columnId}\\\\\\\":{\\\\\\\"linkedPulseIds\\\\\\\":[]}`;\r\n          } else if (columnId === 'hour5' || columnId === 'hour0') {\r\n            const [hourStr, minuteStr] = value.split(':');\r\n            const formattedHour = parseInt(hourStr, 10);\r\n            const formattedMinute = parseInt(minuteStr, 10);\r\n\r\n            if (!isNaN(formattedHour) && !isNaN(formattedMinute)) {\r\n              return `\\\\\\\"${columnId}\\\\\\\":{\\\\\\\"hour\\\\\\\":${formattedHour},\\\\\\\"minute\\\\\\\":${formattedMinute}}`;\r\n            } else {\r\n              // Handle the case where the conversion fails\r\n              console.error(`Invalid hour type value: ${value}`);\r\n              return '';\r\n            }\r\n          } else if (columnId === 'check') {\r\n            const booleanValue = value === 'v' ? 'true' : 'false';\r\n            return `\\\\\\\"${columnId}\\\\\\\":{\\\\\\\"checked\\\\\\\":\\\\\\\"${booleanValue}\\\\\\\"}`;\r\n          } else {\r\n            return `\\\\\\\"${columnId}\\\\\\\":\\\\\\\"${value}\\\\\\\"`;\r\n          }\r\n        })\r\n        .join(', ');\r\n\r\n      // Check if there are any valid column updates\r\n      if (columnUpdates.length === 0) {\r\n        console.warn('No valid column updates found.');\r\n        return;\r\n      }\r\n\r\n      // Construct the GraphQL mutation query with variables\r\n      const mutationQuery = `\r\n        mutation {\r\n          change_multiple_column_values (\r\n            board_id: ${board},\r\n            item_id: ${eventData.id},\r\n            column_values: \"{${columnUpdates}}\"\r\n          ) {\r\n            id\r\n          }\r\n        }\r\n      `;\r\n\r\n      // Execute the mutation with variables\r\n      const response = await monday.api(mutationQuery);\r\n\r\n      // Check the response to ensure the update was successful\r\n      if (response.data && response.data.change_multiple_column_values && response.data.change_multiple_column_values.id) {\r\n        monday.execute(\"notice\", {\r\n          message: \"Time entry updated successfully.\",\r\n          type: \"success\", // or \"error\" (red), or \"info\" (blue)\r\n          timeout: 5000,\r\n        });\r\n        onClose(); // Close the popup after a successful update\r\n      } else {\r\n        // Handle the case where the update was not successful\r\n        console.error('Error updating item:', response);\r\n        monday.execute(\"notice\", {\r\n          message: \"Error updating the time entry\",\r\n          type: \"error\", // or \"error\" (red), or \"info\" (blue)\r\n          timeout: 5000,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating item:', error);\r\n      monday.execute(\"notice\", {\r\n        message: \"Error updating the time entry\",\r\n        type: \"error\", // or \"error\" (red), or \"info\" (blue)\r\n        timeout: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  const excludedColumns = ['subitems', 'text6', 'text66'];\r\n\r\n  return (\r\n    <div className={`popup-form ${isOpen ? 'open' : ''}`}>\r\n      {isOpen && (\r\n        <div className=\"form-container\">\r\n          <h2>Edit Event</h2>\r\n          {/* Render the \"Name\" column separately */}\r\n          <div className=\"form-input\">\r\n            <label>Task</label>\r\n            <Select\r\n              value={subitemOptions.find(option => option.value === formData.name)}\r\n              options={subitemOptions}\r\n              onChange={(selectedOption) => setFormData(prevData => ({\r\n                ...prevData,\r\n                name: selectedOption.value,\r\n              }))}\r\n            />\r\n          </div>\r\n          <div className='form-row'>\r\n            {eventData.column_values && (\r\n              <>\r\n                {eventData.column_values\r\n                  .filter(column => !excludedColumns.includes(column.column.id))\r\n                  .map((column) => {\r\n                    const { id, title, type, settings_str } = column.column;\r\n                    const inputValue = formData[id] || '';\r\n\r\n                    if (type === 'status') {\r\n                      const labels = JSON.parse(settings_str).labels;\r\n                      const options = Object.entries(labels).map(([value, label]) => ({\r\n                        value,\r\n                        label,\r\n                      }));\r\n                      return (\r\n                        <div key={id} className=\"form-input\">\r\n                          <label>{title}</label>\r\n                          <Select\r\n                            value={options.find(option => option.value === inputValue)}\r\n                            options={options}\r\n                            onChange={(selectedOption) => handleInputChange(selectedOption, id)}\r\n                          />\r\n                        </div>\r\n                      );\r\n                    } else if (type === 'board_relation' && title === 'Project') { // New condition for \"board-relation\" columns\r\n                      return (\r\n                        <div key={id} className=\"form-input\">\r\n                          <label>{title}</label>\r\n                          <Select\r\n                            value={initialBoardRelationValue}  // Use formData[id] directly as it already contains the selected option\r\n                            options={boardRelationOptions}\r\n                            onChange={(selectedOption) => handleInputChange(selectedOption, id)}\r\n                          />\r\n                        </div>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <div key={id} className=\"form-input\">\r\n                          <label>{title}</label>\r\n                          {type === 'checkbox' ? (\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              checked={inputValue}\r\n                              onChange={(e) => handleCheckboxChange(e, id)}\r\n                            />\r\n                          ) : type === 'hour' ? (\r\n                            <input\r\n                              type=\"time\"\r\n                              value={inputValue}\r\n                              onChange={(e) => handleHourChange(e, id)}\r\n                            />\r\n                          ) : type === 'person' ? (\r\n                            <input\r\n                              type={type}\r\n                              value={inputValue}\r\n                              readOnly\r\n                            />\r\n                          ) : (\r\n                            <input\r\n                              type={type}\r\n                              value={inputValue}\r\n                              onChange={(e) => handleInputValueChange(e, id)}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      );\r\n                    }\r\n                  })}\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"form-submit\">\r\n            <button onClick={handleUpdate}>Update</button>\r\n            <button onClick={onClose}>Cancel</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopupForm;\r\n",{"ruleId":"123","severity":1,"message":"124","line":2,"column":8,"nodeType":"125","messageId":"126","endLine":2,"endColumn":13},{"ruleId":"123","severity":1,"message":"127","line":6,"column":8,"nodeType":"125","messageId":"126","endLine":6,"endColumn":12},{"ruleId":"123","severity":1,"message":"128","line":6,"column":31,"nodeType":"125","messageId":"126","endLine":6,"endColumn":40},{"ruleId":"123","severity":1,"message":"129","line":151,"column":15,"nodeType":"125","messageId":"126","endLine":151,"endColumn":24},{"ruleId":"123","severity":1,"message":"130","line":313,"column":13,"nodeType":"125","messageId":"126","endLine":313,"endColumn":19},{"ruleId":"123","severity":1,"message":"131","line":314,"column":13,"nodeType":"125","messageId":"126","endLine":314,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":15,"column":19,"nodeType":"134","messageId":"135","endLine":15,"endColumn":20,"suggestions":"136"},{"ruleId":"132","severity":1,"message":"133","line":15,"column":28,"nodeType":"134","messageId":"135","endLine":15,"endColumn":29,"suggestions":"137"},{"ruleId":"132","severity":1,"message":"133","line":15,"column":34,"nodeType":"134","messageId":"135","endLine":15,"endColumn":35,"suggestions":"138"},{"ruleId":"132","severity":1,"message":"133","line":15,"column":52,"nodeType":"134","messageId":"135","endLine":15,"endColumn":53,"suggestions":"139"},{"ruleId":"132","severity":1,"message":"133","line":15,"column":59,"nodeType":"134","messageId":"135","endLine":15,"endColumn":60,"suggestions":"140"},{"ruleId":"132","severity":1,"message":"133","line":15,"column":76,"nodeType":"134","messageId":"135","endLine":15,"endColumn":77,"suggestions":"141"},{"ruleId":"132","severity":1,"message":"133","line":22,"column":21,"nodeType":"134","messageId":"135","endLine":22,"endColumn":22,"suggestions":"142"},{"ruleId":"132","severity":1,"message":"133","line":22,"column":30,"nodeType":"134","messageId":"135","endLine":22,"endColumn":31,"suggestions":"143"},{"ruleId":"132","severity":1,"message":"133","line":22,"column":36,"nodeType":"134","messageId":"135","endLine":22,"endColumn":37,"suggestions":"144"},{"ruleId":"132","severity":1,"message":"133","line":22,"column":44,"nodeType":"134","messageId":"135","endLine":22,"endColumn":45,"suggestions":"145"},{"ruleId":"132","severity":1,"message":"133","line":22,"column":66,"nodeType":"134","messageId":"135","endLine":22,"endColumn":67,"suggestions":"146"},{"ruleId":"132","severity":1,"message":"133","line":22,"column":76,"nodeType":"134","messageId":"135","endLine":22,"endColumn":77,"suggestions":"147"},{"ruleId":"132","severity":1,"message":"133","line":30,"column":17,"nodeType":"134","messageId":"135","endLine":30,"endColumn":18,"suggestions":"148"},{"ruleId":"132","severity":1,"message":"133","line":30,"column":26,"nodeType":"134","messageId":"135","endLine":30,"endColumn":27,"suggestions":"149"},{"ruleId":"132","severity":1,"message":"133","line":30,"column":32,"nodeType":"134","messageId":"135","endLine":30,"endColumn":33,"suggestions":"150"},{"ruleId":"132","severity":1,"message":"133","line":30,"column":43,"nodeType":"134","messageId":"135","endLine":30,"endColumn":44,"suggestions":"151"},{"ruleId":"132","severity":1,"message":"133","line":30,"column":48,"nodeType":"134","messageId":"135","endLine":30,"endColumn":49,"suggestions":"152"},{"ruleId":"132","severity":1,"message":"133","line":30,"column":67,"nodeType":"134","messageId":"135","endLine":30,"endColumn":68,"suggestions":"153"},{"ruleId":"132","severity":1,"message":"133","line":32,"column":19,"nodeType":"134","messageId":"135","endLine":32,"endColumn":20,"suggestions":"154"},{"ruleId":"132","severity":1,"message":"133","line":32,"column":28,"nodeType":"134","messageId":"135","endLine":32,"endColumn":29,"suggestions":"155"},{"ruleId":"132","severity":1,"message":"133","line":32,"column":34,"nodeType":"134","messageId":"135","endLine":32,"endColumn":35,"suggestions":"156"},{"ruleId":"132","severity":1,"message":"133","line":32,"column":46,"nodeType":"134","messageId":"135","endLine":32,"endColumn":47,"suggestions":"157"},{"ruleId":"123","severity":1,"message":"124","line":2,"column":8,"nodeType":"125","messageId":"126","endLine":2,"endColumn":13},{"ruleId":"123","severity":1,"message":"158","line":2,"column":17,"nodeType":"125","messageId":"126","endLine":2,"endColumn":26},{"ruleId":"123","severity":1,"message":"159","line":35,"column":15,"nodeType":"125","messageId":"126","endLine":35,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":164,"column":23,"nodeType":"134","messageId":"135","endLine":164,"endColumn":24,"suggestions":"160"},{"ruleId":"132","severity":1,"message":"133","line":164,"column":38,"nodeType":"134","messageId":"135","endLine":164,"endColumn":39,"suggestions":"161"},{"ruleId":"132","severity":1,"message":"133","line":166,"column":23,"nodeType":"134","messageId":"135","endLine":166,"endColumn":24,"suggestions":"162"},{"ruleId":"132","severity":1,"message":"133","line":166,"column":38,"nodeType":"134","messageId":"135","endLine":166,"endColumn":39,"suggestions":"163"},{"ruleId":"132","severity":1,"message":"133","line":166,"column":44,"nodeType":"134","messageId":"135","endLine":166,"endColumn":45,"suggestions":"164"},{"ruleId":"132","severity":1,"message":"133","line":166,"column":62,"nodeType":"134","messageId":"135","endLine":166,"endColumn":63,"suggestions":"165"},{"ruleId":"132","severity":1,"message":"133","line":173,"column":25,"nodeType":"134","messageId":"135","endLine":173,"endColumn":26,"suggestions":"166"},{"ruleId":"132","severity":1,"message":"133","line":173,"column":40,"nodeType":"134","messageId":"135","endLine":173,"endColumn":41,"suggestions":"167"},{"ruleId":"132","severity":1,"message":"133","line":173,"column":46,"nodeType":"134","messageId":"135","endLine":173,"endColumn":47,"suggestions":"168"},{"ruleId":"132","severity":1,"message":"133","line":173,"column":54,"nodeType":"134","messageId":"135","endLine":173,"endColumn":55,"suggestions":"169"},{"ruleId":"132","severity":1,"message":"133","line":173,"column":76,"nodeType":"134","messageId":"135","endLine":173,"endColumn":77,"suggestions":"170"},{"ruleId":"132","severity":1,"message":"133","line":173,"column":86,"nodeType":"134","messageId":"135","endLine":173,"endColumn":87,"suggestions":"171"},{"ruleId":"132","severity":1,"message":"133","line":181,"column":23,"nodeType":"134","messageId":"135","endLine":181,"endColumn":24,"suggestions":"172"},{"ruleId":"132","severity":1,"message":"133","line":181,"column":38,"nodeType":"134","messageId":"135","endLine":181,"endColumn":39,"suggestions":"173"},{"ruleId":"132","severity":1,"message":"133","line":181,"column":44,"nodeType":"134","messageId":"135","endLine":181,"endColumn":45,"suggestions":"174"},{"ruleId":"132","severity":1,"message":"133","line":181,"column":55,"nodeType":"134","messageId":"135","endLine":181,"endColumn":56,"suggestions":"175"},{"ruleId":"132","severity":1,"message":"133","line":181,"column":60,"nodeType":"134","messageId":"135","endLine":181,"endColumn":61,"suggestions":"176"},{"ruleId":"132","severity":1,"message":"133","line":181,"column":79,"nodeType":"134","messageId":"135","endLine":181,"endColumn":80,"suggestions":"177"},{"ruleId":"132","severity":1,"message":"133","line":183,"column":23,"nodeType":"134","messageId":"135","endLine":183,"endColumn":24,"suggestions":"178"},{"ruleId":"132","severity":1,"message":"133","line":183,"column":38,"nodeType":"134","messageId":"135","endLine":183,"endColumn":39,"suggestions":"179"},{"ruleId":"132","severity":1,"message":"133","line":183,"column":43,"nodeType":"134","messageId":"135","endLine":183,"endColumn":44,"suggestions":"180"},{"ruleId":"132","severity":1,"message":"133","line":183,"column":55,"nodeType":"134","messageId":"135","endLine":183,"endColumn":56,"suggestions":"181"},"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'curUserID' is defined but never used.","'uservalue' is assigned a value but never used.","'indexA' is assigned a value but never used.","'indexB' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\\".","TemplateElement","unnecessaryEscape",["182","183"],["184","185"],["186","187"],["188","189"],["190","191"],["192","193"],["194","195"],["196","197"],["198","199"],["200","201"],["202","203"],["204","205"],["206","207"],["208","209"],["210","211"],["212","213"],["214","215"],["216","217"],["218","219"],["220","221"],["222","223"],["224","225"],"'Component' is defined but never used.","'linkedPulseId' is assigned a value but never used.",["226","227"],["228","229"],["230","231"],["232","233"],["234","235"],["236","237"],["238","239"],["240","241"],["242","243"],["244","245"],["246","247"],["248","249"],["250","251"],["252","253"],["254","255"],["256","257"],["258","259"],["260","261"],["262","263"],["264","265"],["266","267"],["268","269"],{"messageId":"270","fix":"271","desc":"272"},{"messageId":"273","fix":"274","desc":"275"},{"messageId":"270","fix":"276","desc":"272"},{"messageId":"273","fix":"277","desc":"275"},{"messageId":"270","fix":"278","desc":"272"},{"messageId":"273","fix":"279","desc":"275"},{"messageId":"270","fix":"280","desc":"272"},{"messageId":"273","fix":"281","desc":"275"},{"messageId":"270","fix":"282","desc":"272"},{"messageId":"273","fix":"283","desc":"275"},{"messageId":"270","fix":"284","desc":"272"},{"messageId":"273","fix":"285","desc":"275"},{"messageId":"270","fix":"286","desc":"272"},{"messageId":"273","fix":"287","desc":"275"},{"messageId":"270","fix":"288","desc":"272"},{"messageId":"273","fix":"289","desc":"275"},{"messageId":"270","fix":"290","desc":"272"},{"messageId":"273","fix":"291","desc":"275"},{"messageId":"270","fix":"292","desc":"272"},{"messageId":"273","fix":"293","desc":"275"},{"messageId":"270","fix":"294","desc":"272"},{"messageId":"273","fix":"295","desc":"275"},{"messageId":"270","fix":"296","desc":"272"},{"messageId":"273","fix":"297","desc":"275"},{"messageId":"270","fix":"298","desc":"272"},{"messageId":"273","fix":"299","desc":"275"},{"messageId":"270","fix":"300","desc":"272"},{"messageId":"273","fix":"301","desc":"275"},{"messageId":"270","fix":"302","desc":"272"},{"messageId":"273","fix":"303","desc":"275"},{"messageId":"270","fix":"304","desc":"272"},{"messageId":"273","fix":"305","desc":"275"},{"messageId":"270","fix":"306","desc":"272"},{"messageId":"273","fix":"307","desc":"275"},{"messageId":"270","fix":"308","desc":"272"},{"messageId":"273","fix":"309","desc":"275"},{"messageId":"270","fix":"310","desc":"272"},{"messageId":"273","fix":"311","desc":"275"},{"messageId":"270","fix":"312","desc":"272"},{"messageId":"273","fix":"313","desc":"275"},{"messageId":"270","fix":"314","desc":"272"},{"messageId":"273","fix":"315","desc":"275"},{"messageId":"270","fix":"316","desc":"272"},{"messageId":"273","fix":"317","desc":"275"},{"messageId":"270","fix":"318","desc":"272"},{"messageId":"273","fix":"319","desc":"275"},{"messageId":"270","fix":"320","desc":"272"},{"messageId":"273","fix":"321","desc":"275"},{"messageId":"270","fix":"322","desc":"272"},{"messageId":"273","fix":"323","desc":"275"},{"messageId":"270","fix":"324","desc":"272"},{"messageId":"273","fix":"325","desc":"275"},{"messageId":"270","fix":"326","desc":"272"},{"messageId":"273","fix":"327","desc":"275"},{"messageId":"270","fix":"328","desc":"272"},{"messageId":"273","fix":"329","desc":"275"},{"messageId":"270","fix":"330","desc":"272"},{"messageId":"273","fix":"331","desc":"275"},{"messageId":"270","fix":"332","desc":"272"},{"messageId":"273","fix":"333","desc":"275"},{"messageId":"270","fix":"334","desc":"272"},{"messageId":"273","fix":"335","desc":"275"},{"messageId":"270","fix":"336","desc":"272"},{"messageId":"273","fix":"337","desc":"275"},{"messageId":"270","fix":"338","desc":"272"},{"messageId":"273","fix":"339","desc":"275"},{"messageId":"270","fix":"340","desc":"272"},{"messageId":"273","fix":"341","desc":"275"},{"messageId":"270","fix":"342","desc":"272"},{"messageId":"273","fix":"343","desc":"275"},{"messageId":"270","fix":"344","desc":"272"},{"messageId":"273","fix":"345","desc":"275"},{"messageId":"270","fix":"346","desc":"272"},{"messageId":"273","fix":"347","desc":"275"},{"messageId":"270","fix":"348","desc":"272"},{"messageId":"273","fix":"349","desc":"275"},{"messageId":"270","fix":"350","desc":"272"},{"messageId":"273","fix":"351","desc":"275"},{"messageId":"270","fix":"352","desc":"272"},{"messageId":"273","fix":"353","desc":"275"},{"messageId":"270","fix":"354","desc":"272"},{"messageId":"273","fix":"355","desc":"275"},{"messageId":"270","fix":"356","desc":"272"},{"messageId":"273","fix":"357","desc":"275"},{"messageId":"270","fix":"358","desc":"272"},{"messageId":"273","fix":"359","desc":"275"},{"messageId":"270","fix":"360","desc":"272"},{"messageId":"273","fix":"361","desc":"275"},"removeEscape",{"range":"362","text":"363"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"364","text":"365"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"366","text":"363"},{"range":"367","text":"365"},{"range":"368","text":"363"},{"range":"369","text":"365"},{"range":"370","text":"363"},{"range":"371","text":"365"},{"range":"372","text":"363"},{"range":"373","text":"365"},{"range":"374","text":"363"},{"range":"375","text":"365"},{"range":"376","text":"363"},{"range":"377","text":"365"},{"range":"378","text":"363"},{"range":"379","text":"365"},{"range":"380","text":"363"},{"range":"381","text":"365"},{"range":"382","text":"363"},{"range":"383","text":"365"},{"range":"384","text":"363"},{"range":"385","text":"365"},{"range":"386","text":"363"},{"range":"387","text":"365"},{"range":"388","text":"363"},{"range":"389","text":"365"},{"range":"390","text":"363"},{"range":"391","text":"365"},{"range":"392","text":"363"},{"range":"393","text":"365"},{"range":"394","text":"363"},{"range":"395","text":"365"},{"range":"396","text":"363"},{"range":"397","text":"365"},{"range":"398","text":"363"},{"range":"399","text":"365"},{"range":"400","text":"363"},{"range":"401","text":"365"},{"range":"402","text":"363"},{"range":"403","text":"365"},{"range":"404","text":"363"},{"range":"405","text":"365"},{"range":"406","text":"363"},{"range":"407","text":"365"},{"range":"408","text":"363"},{"range":"409","text":"365"},{"range":"410","text":"363"},{"range":"411","text":"365"},{"range":"412","text":"363"},{"range":"413","text":"365"},{"range":"414","text":"363"},{"range":"415","text":"365"},{"range":"416","text":"363"},{"range":"417","text":"365"},{"range":"418","text":"363"},{"range":"419","text":"365"},{"range":"420","text":"363"},{"range":"421","text":"365"},{"range":"422","text":"363"},{"range":"423","text":"365"},{"range":"424","text":"363"},{"range":"425","text":"365"},{"range":"426","text":"363"},{"range":"427","text":"365"},{"range":"428","text":"363"},{"range":"429","text":"365"},{"range":"430","text":"363"},{"range":"431","text":"365"},{"range":"432","text":"363"},{"range":"433","text":"365"},{"range":"434","text":"363"},{"range":"435","text":"365"},{"range":"436","text":"363"},{"range":"437","text":"365"},{"range":"438","text":"363"},{"range":"439","text":"365"},{"range":"440","text":"363"},{"range":"441","text":"365"},{"range":"442","text":"363"},{"range":"443","text":"365"},{"range":"444","text":"363"},{"range":"445","text":"365"},{"range":"446","text":"363"},{"range":"447","text":"365"},{"range":"448","text":"363"},{"range":"449","text":"365"},{"range":"450","text":"363"},{"range":"451","text":"365"},[661,662],"",[661,661],"\\",[670,671],[670,670],[676,677],[676,676],[694,695],[694,694],[701,702],[701,701],[718,719],[718,718],[1043,1044],[1043,1043],[1052,1053],[1052,1052],[1058,1059],[1058,1058],[1066,1067],[1066,1066],[1088,1089],[1088,1088],[1098,1099],[1098,1098],[1407,1408],[1407,1407],[1416,1417],[1416,1416],[1422,1423],[1422,1422],[1433,1434],[1433,1433],[1438,1439],[1438,1438],[1457,1458],[1457,1457],[1498,1499],[1498,1498],[1507,1508],[1507,1507],[1513,1514],[1513,1513],[1525,1526],[1525,1525],[5632,5633],[5632,5632],[5647,5648],[5647,5647],[5782,5783],[5782,5782],[5797,5798],[5797,5797],[5803,5804],[5803,5803],[5821,5822],[5821,5821],[6176,6177],[6176,6176],[6191,6192],[6191,6191],[6197,6198],[6197,6197],[6205,6206],[6205,6205],[6227,6228],[6227,6227],[6237,6238],[6237,6237],[6590,6591],[6590,6590],[6605,6606],[6605,6605],[6611,6612],[6611,6611],[6622,6623],[6622,6622],[6627,6628],[6627,6627],[6646,6647],[6646,6646],[6695,6696],[6695,6695],[6710,6711],[6710,6710],[6715,6716],[6715,6715],[6727,6728],[6727,6727]]