{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\Form.js\";\nimport React, { Component } from 'react';\nimport './Form.css';\nimport { fetchColumns, fetchBoardAndGroupId } from './getids';\nimport { createItem } from './mutation';\nimport PopupMessage from './PopupMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePopupClose = () => {\n      this.setState({\n        showPopup: false,\n        popupMessage: ''\n      });\n    };\n\n    this.handleBoardRelationChange = (e, column) => {\n      const selectedItemId = e.target.value;\n      const selectedBoardItems = this.state[column.id].items;\n      const selectedItem = selectedBoardItems.find(item => item.id === selectedItemId); // Populate Manager field based on the selected board-relation option\n\n      const managerValue = selectedItem ? selectedItem.person : '';\n      this.setState(prevState => ({ ...prevState,\n        [column.id]: {\n          selectedItemId,\n          selectedItem,\n          items: prevState[column.id].items\n        },\n        // Populate Manager field\n        managerFieldId: managerValue,\n        managerFieldName: managerValue\n      }));\n    };\n\n    this.handleCheckboxChange = (e, column) => {\n      const {\n        checked\n      } = e.target;\n      this.setState({\n        [column.id]: checked\n      });\n    };\n\n    this.handleInputChange = (e, column) => {\n      const {\n        name,\n        value\n      } = e.target;\n\n      if (column.type === 'hour') {\n        const [hour, minute] = value.split(':');\n        this.setState(prevState => ({\n          hourFields: { ...prevState.hourFields,\n            [name]: {\n              hour,\n              minute\n            }\n          }\n        }));\n      } else {\n        this.setState({\n          [name]: value\n        });\n      }\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const {\n        boardId,\n        groupId,\n        columns,\n        hourFields,\n        ...values\n      } = this.state;\n      console.log('hourFields in handleSubmit:', this.state.hourFields);\n      const columnValues = {};\n      columns.forEach(column => {\n        const columnId = column.id;\n\n        if (values[columnId] !== undefined && values[columnId] !== null) {\n          if (column.type === 'board-relation') {\n            // Check if a value is selected for the board-relation column\n            if (values[columnId].selectedItemId) {\n              columnValues[columnId] = values[columnId].selectedItemId;\n            } // Do not include the field if no value is selected\n\n          } else if (column.type === 'hour') {\n            // Handle hour type column\n            if (columnValues[columnId]) {\n              columnValues[columnId] = JSON.stringify([columnId]);\n            }\n          } else if (column.type === 'boolean') {\n            // Handle checkbox type column\n            columnValues[columnId] = values[columnId] ? 'true' : 'false';\n          } else {\n            columnValues[columnId] = values[columnId];\n          }\n        }\n      });\n      const columnData = columns.map(column => ({\n        id: column.id,\n        value: this.state[column.id],\n        type: column.type\n      }));\n\n      try {\n        const newItem = await createItem(boardId, groupId, columnData);\n\n        if (newItem) {\n          this.setState({\n            successMessage: 'Item created successfully',\n            errorMessage: '',\n            showPopup: true,\n            popupMessage: 'Item created successfully',\n            popupType: 'success'\n          });\n          this.resetFormState();\n          setTimeout(() => {\n            this.setState({\n              successMessage: ''\n            });\n          }, 3000);\n        } else {\n          this.setState({\n            errorMessage: 'Error creating item',\n            successMessage: '',\n            showPopup: true,\n            popupMessage: 'Error creating item',\n            popupType: 'error'\n          });\n        }\n      } catch (error) {\n        console.error('Error creating item:', error);\n        this.setState({\n          errorMessage: 'Error creating item',\n          successMessage: '',\n          showPopup: true,\n          popupMessage: 'Error creating item',\n          popupType: 'error'\n        });\n      }\n    };\n\n    this.state = {\n      columns: [],\n      boardId: null,\n      groupId: null,\n      successMessage: '',\n      errorMessage: '',\n      showPopup: false,\n      popupMessage: '',\n      popupType: 'success',\n      edit: false,\n      // Set edit to true or false based on your requirement\n      hourFields: {},\n      ...props\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const columns = await fetchColumns();\n      const {\n        boardId,\n        groupId\n      } = await fetchBoardAndGroupId();\n      const initialValues = {};\n      const boardRelationColumns = columns.filter(column => column.type === 'board-relation'); // Fetch and populate data for board-relation columns\n\n      for (const boardRelationColumn of boardRelationColumns) {\n        const {\n          boardIds\n        } = JSON.parse(boardRelationColumn.settings_str);\n        const boardItems = await this.fetchBoardItems(boardIds[0]);\n        initialValues[boardRelationColumn.id] = {\n          selectedItemId: '',\n          // Initialize selectedItemId\n          selectedItem: null,\n          // Initialize selectedItem\n          items: boardItems\n        };\n      } // Initialize other columns\n\n\n      columns.forEach(column => {\n        if (column.type !== 'board-relation') {\n          initialValues[column.id] = null;\n        }\n      });\n      this.setState({\n        columns,\n        boardId,\n        groupId,\n        ...initialValues\n      });\n    } catch (error) {\n      console.error('Error Fetching data.', error);\n    }\n  }\n\n  async fetchBoardItems(boardId) {\n    try {\n      const response = await fetch(`https://api.monday.com/v2`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk' // Replace with your Monday.com API key\n\n        },\n        body: JSON.stringify({\n          query: `\n            query {\n              boards(ids: ${boardId}) {\n                items {\n                  id\n                  name\n                  group {\n                    id\n                    title\n                  }\n                  column_values {\n                    id\n                    title\n                    text\n                  }\n                }\n              }\n            }\n          `\n        })\n      });\n      const data = await response.json();\n\n      if (data.data && data.data.boards && data.data.boards.length > 0) {\n        return data.data.boards[0].items.map(item => {\n          const managerColumn = item.column_values.find(column => column.title === 'Person');\n          return {\n            id: item.id,\n            name: item.name,\n            group: item.group,\n            manager: managerColumn ? managerColumn.text : ''\n          };\n        }).filter(item => item.group.title === 'On Going Projects');\n      }\n\n      return [];\n    } catch (error) {\n      console.error('Error fetching board items:', error);\n      return [];\n    }\n  }\n\n  resetFormState() {\n    const {\n      columns\n    } = this.state;\n    const initialValues = {};\n    columns.forEach(column => {\n      initialValues[column.id] = null;\n    });\n    this.setState({\n      successMessage: '',\n      errorMessage: '',\n      ...initialValues\n    });\n  }\n\n  render() {\n    const {\n      columns,\n      successMessage,\n      errorMessage,\n      showPopup,\n      popupMessage,\n      popupType,\n      edit\n    } = this.state; // Filter out columns \n\n    const filteredColumns = columns.filter(column => column.title !== \"Subitems\" && column.title !== \"Person\"); // Inside the render method\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Time Entry Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-row\",\n          children: filteredColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }, this), column.title === \"Manager\" && !edit ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: column.type === 'color' ? 'text' : column.type,\n              name: column.title,\n              value: this.state[column.id] || '',\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 19\n            }, this) : column.type === 'board-relation' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              name: column.title,\n              value: this.state[column.id] ? this.state[column.id].selectedItemId : '',\n              onChange: e => this.handleBoardRelationChange(e, column),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select an option\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 21\n              }, this), this.state[column.id] && this.state[column.id].items.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: item.id,\n                children: item.name\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 19\n            }, this) : column.type === 'color' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              name: column.title,\n              value: this.state[column.id] || '',\n              onChange: e => this.handleInputChange(e, column),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select an option\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 21\n              }, this), column.settings_str ? Object.keys(JSON.parse(column.settings_str).labels).map(labelKey => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: labelKey,\n                children: JSON.parse(column.settings_str).labels[labelKey]\n              }, labelKey, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 25\n              }, this)) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, this) : column.type === 'hour' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                name: column.id // Use column.id as the name attribute\n                ,\n                value: this.state.hourFields[column.id] ? `${this.state.hourFields[column.id].hour}:${this.state.hourFields[column.id].minute}` : '',\n                onChange: e => this.handleInputChange(e, column)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 19\n            }, this) : column.type === 'boolean' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: column.title,\n                checked: this.state[column.id] || false // Set the checked attribute based on the state\n                ,\n                onChange: e => this.handleCheckboxChange(e, column)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n              type: column.type === 'color' ? 'text' : column.type,\n              name: column.title,\n              value: this.state[column.id] || '',\n              onChange: e => this.handleInputChange(e, column)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 19\n            }, this)]\n          }, column.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-submit\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 28\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 26\n      }, this), showPopup && /*#__PURE__*/_jsxDEV(PopupMessage, {\n        message: popupMessage,\n        type: popupType,\n        onClose: this.handlePopupClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"names":["React","Component","fetchColumns","fetchBoardAndGroupId","createItem","PopupMessage","Form","constructor","props","handlePopupClose","setState","showPopup","popupMessage","handleBoardRelationChange","e","column","selectedItemId","target","value","selectedBoardItems","state","id","items","selectedItem","find","item","managerValue","person","prevState","managerFieldId","managerFieldName","handleCheckboxChange","checked","handleInputChange","name","type","hour","minute","split","hourFields","handleSubmit","preventDefault","boardId","groupId","columns","values","console","log","columnValues","forEach","columnId","undefined","JSON","stringify","columnData","map","newItem","successMessage","errorMessage","popupType","resetFormState","setTimeout","error","edit","componentDidMount","initialValues","boardRelationColumns","filter","boardRelationColumn","boardIds","parse","settings_str","boardItems","fetchBoardItems","response","fetch","method","headers","body","query","data","json","boards","length","managerColumn","column_values","title","group","manager","text","render","filteredColumns","index","Object","keys","labels","labelKey"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/Form.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { fetchColumns, fetchBoardAndGroupId } from './getids';\r\nimport { createItem } from './mutation';\r\nimport PopupMessage from './PopupMessage';\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [],\r\n      boardId: null,\r\n      groupId: null,\r\n      successMessage: '',\r\n      errorMessage: '',\r\n      showPopup: false,\r\n      popupMessage: '',\r\n      popupType: 'success',\r\n      edit: false, // Set edit to true or false based on your requirement\r\n      hourFields: {},\r\n      ...props,\r\n    };\r\n  }\r\n\r\n  handlePopupClose = () => {\r\n    this.setState({\r\n      showPopup: false,\r\n      popupMessage: '',\r\n    });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const columns = await fetchColumns();\r\n      const { boardId, groupId } = await fetchBoardAndGroupId();\r\n      const initialValues = {};\r\n      const boardRelationColumns = columns.filter((column) => column.type === 'board-relation');\r\n\r\n      // Fetch and populate data for board-relation columns\r\n      for (const boardRelationColumn of boardRelationColumns) {\r\n        const { boardIds } = JSON.parse(boardRelationColumn.settings_str);\r\n        const boardItems = await this.fetchBoardItems(boardIds[0]);\r\n        initialValues[boardRelationColumn.id] = {\r\n          selectedItemId: '', // Initialize selectedItemId\r\n          selectedItem: null, // Initialize selectedItem\r\n          items: boardItems,\r\n        };\r\n      }\r\n\r\n      // Initialize other columns\r\n      columns.forEach((column) => {\r\n        if (column.type !== 'board-relation') {\r\n          initialValues[column.id] = null;\r\n        }\r\n      });\r\n\r\n      this.setState({ columns, boardId, groupId, ...initialValues });\r\n    } catch (error) {\r\n      console.error('Error Fetching data.', error);\r\n    }\r\n  }\r\n\r\n  handleBoardRelationChange = (e, column) => {\r\n    const selectedItemId = e.target.value;\r\n    const selectedBoardItems = this.state[column.id].items;\r\n    const selectedItem = selectedBoardItems.find(item => item.id === selectedItemId);\r\n\r\n    // Populate Manager field based on the selected board-relation option\r\n    const managerValue = selectedItem ? selectedItem.person : '';\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: {\r\n        selectedItemId,\r\n        selectedItem,\r\n        items: prevState[column.id].items,\r\n      },\r\n      // Populate Manager field\r\n      managerFieldId: managerValue,\r\n      managerFieldName: managerValue,\r\n    }));\r\n  };\r\n\r\n  async fetchBoardItems(boardId) {\r\n    try {\r\n      const response = await fetch(`https://api.monday.com/v2`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk', // Replace with your Monday.com API key\r\n        },\r\n        body: JSON.stringify({\r\n          query: `\r\n            query {\r\n              boards(ids: ${boardId}) {\r\n                items {\r\n                  id\r\n                  name\r\n                  group {\r\n                    id\r\n                    title\r\n                  }\r\n                  column_values {\r\n                    id\r\n                    title\r\n                    text\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.data && data.data.boards && data.data.boards.length > 0) {\r\n        return data.data.boards[0].items.map(item => {\r\n          const managerColumn = item.column_values.find(column => column.title === 'Person');\r\n          return {\r\n            id: item.id,\r\n            name: item.name,\r\n            group: item.group,\r\n            manager: managerColumn ? managerColumn.text : '',\r\n          };\r\n        }).filter(item => item.group.title === 'On Going Projects');\r\n      }\r\n\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching board items:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  handleCheckboxChange = (e, column) => {\r\n    const { checked } = e.target;\r\n    this.setState({\r\n      [column.id]: checked,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (e, column) => {\r\n    const { name, value } = e.target;\r\n  \r\n    if (column.type === 'hour') {\r\n      const [hour, minute] = value.split(':');\r\n      this.setState((prevState) => ({\r\n        hourFields: {\r\n          ...prevState.hourFields,\r\n          [name]: {\r\n            hour,\r\n            minute,\r\n          },\r\n        },\r\n      }));\r\n    } else {\r\n      this.setState({\r\n        [name]: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  resetFormState() {\r\n    const { columns } = this.state;\r\n    const initialValues = {};\r\n    columns.forEach((column) => {\r\n      initialValues[column.id] = null;\r\n    });\r\n\r\n    this.setState({ successMessage: '', errorMessage: '', ...initialValues });\r\n  }\r\n\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { boardId, groupId, columns, hourFields, ...values } = this.state;\r\n    console.log('hourFields in handleSubmit:', this.state.hourFields);\r\n    const columnValues = {};\r\n    columns.forEach((column) => {\r\n      const columnId = column.id;\r\n      if (values[columnId] !== undefined && values[columnId] !== null) {\r\n        if (column.type === 'board-relation') {\r\n          // Check if a value is selected for the board-relation column\r\n          if (values[columnId].selectedItemId) {\r\n            columnValues[columnId] = values[columnId].selectedItemId;\r\n          } // Do not include the field if no value is selected\r\n        } else if (column.type === 'hour') {\r\n          // Handle hour type column\r\n          if (columnValues[columnId]) {\r\n            columnValues[columnId] = JSON.stringify([columnId]);\r\n          }\r\n        } else if (column.type === 'boolean') {\r\n          // Handle checkbox type column\r\n          columnValues[columnId] = values[columnId] ? 'true' : 'false';\r\n        } else {\r\n          columnValues[columnId] = values[columnId];\r\n        }\r\n      }\r\n    });\r\n\r\n    const columnData = columns.map((column) => ({\r\n      id: column.id,\r\n      value: this.state[column.id],\r\n      type: column.type,\r\n    }));\r\n\r\n    try {\r\n      const newItem = await createItem(boardId, groupId, columnData);\r\n\r\n      if (newItem) {\r\n        this.setState({\r\n          successMessage: 'Item created successfully',\r\n          errorMessage: '',\r\n          showPopup: true,\r\n          popupMessage: 'Item created successfully',\r\n          popupType: 'success',\r\n        });\r\n        this.resetFormState();\r\n        setTimeout(() => {\r\n          this.setState({ successMessage: '' });\r\n        }, 3000);\r\n      } else {\r\n        this.setState({\r\n          errorMessage: 'Error creating item',\r\n          successMessage: '',\r\n          showPopup: true,\r\n          popupMessage: 'Error creating item',\r\n          popupType: 'error',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating item:', error);\r\n      this.setState({\r\n        errorMessage: 'Error creating item',\r\n        successMessage: '',\r\n        showPopup: true,\r\n        popupMessage: 'Error creating item',\r\n        popupType: 'error',\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { columns, successMessage, errorMessage, showPopup, popupMessage, popupType, edit } = this.state;\r\n\r\n    // Filter out columns \r\n    const filteredColumns = columns.filter(column => column.title !== \"Subitems\" && column.title !== \"Person\");\r\n    // Inside the render method\r\n    return (\r\n      <div className=\"form-container\">\r\n        <h1>Time Entry Form</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-row\">\r\n            {filteredColumns.map((column, index) => (\r\n              <div key={column.id} className=\"form-input\">\r\n                <label>{column.title}</label>\r\n                {column.title === \"Manager\" && !edit ? (\r\n                  <input\r\n                    type={column.type === 'color' ? 'text' : column.type}\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    disabled\r\n                  />\r\n                ) : column.type === 'board-relation' ? (\r\n                  <select\r\n                    name={column.title}\r\n                    value={this.state[column.id] ? this.state[column.id].selectedItemId : ''}\r\n                    onChange={(e) => this.handleBoardRelationChange(e, column)}\r\n                  >\r\n                    <option value=\"\">Select an option</option>\r\n                    {this.state[column.id] && this.state[column.id].items.map((item) => (\r\n                      <option\r\n                        key={item.id}\r\n                        value={item.id}\r\n                      >\r\n                        {item.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ) : column.type === 'color' ? (\r\n                  <select\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  >\r\n                    <option value=\"\">Select an option</option>\r\n                    {column.settings_str ? (\r\n                      Object.keys(JSON.parse(column.settings_str).labels).map((labelKey) => (\r\n                        <option\r\n                          key={labelKey}\r\n                          value={labelKey}\r\n                        >\r\n                          {JSON.parse(column.settings_str).labels[labelKey]}\r\n                        </option>\r\n                      ))\r\n                    ) : null}\r\n                  </select>\r\n                ) : column.type === 'hour' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"time\"\r\n                      name={column.id} // Use column.id as the name attribute\r\n                      value={\r\n                        this.state.hourFields[column.id]\r\n                          ? `${this.state.hourFields[column.id].hour}:${this.state.hourFields[column.id].minute}`\r\n                          : ''\r\n                      }\r\n                      onChange={(e) => this.handleInputChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ): column.type === 'boolean' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name={column.title}\r\n                      checked={this.state[column.id] || false}  // Set the checked attribute based on the state\r\n                      onChange={(e) => this.handleCheckboxChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <input\r\n                    type={column.type === 'color' ? 'text' : column.type}\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"form-submit\">\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n        </form>\r\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        {showPopup && (\r\n          <PopupMessage message={popupMessage} type={popupType} onClose={this.handlePopupClose} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}