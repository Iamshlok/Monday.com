{"ast":null,"code":"import moment from 'moment';\n\nconst extractCalendarEvents = groupedItems => {\n  const events = [];\n\n  for (const groupId in groupedItems) {\n    const group = groupedItems[groupId];\n    group.items.forEach(item => {\n      const dateValue = item.column_values.find(col => col.title === 'Date').text;\n      const hoursSpentValue = item.column_values.find(col => col.title === 'Hours Spent').text;\n      const startTime = item.column_values.find(col => col.title === 'Start Time').text;\n      const endTime = item.column_values.find(col => col.title === 'End Time').text;\n      const status = item.column_values.find(col => col.title === 'Status').text.toLowerCase();\n      const isAllDay = item.column_values.find(col => col.title === 'IsAllDay').text.toLowerCase() === 'v'; // if (dateValue && hoursSpentValue && startTime && endTime) {\n      //   let eventColor;\n      //   switch (status) {\n      //     case 'approved':\n      //       eventColor = 'green';\n      //       break;\n      //     case 'rejected':\n      //       eventColor = 'red';\n      //       break;\n      //     case 'in approval':\n      //       eventColor = 'yellow';\n      //       break;\n      //     default:\n      //       eventColor = 'blue'; // Set a default color or choose another color\n      //       break;\n      //   }\n\n      const event = {\n        start: moment(`${dateValue} ${startTime}`, 'YYYY-MM-DD hh:mm A').toDate(),\n        end: moment(`${dateValue} ${endTime}`, 'YYYY-MM-DD hh:mm A').toDate(),\n        title: `${hoursSpentValue} hours`,\n        color: 'purple',\n        // Set the color based on the status\n        allDay: isAllDay // Set the allDay property based on the checkbox\n        // ... other event properties\n\n      };\n      events.push(event);\n    });\n  }\n\n  return events;\n};\n\nexport default extractCalendarEvents;","map":{"version":3,"names":["moment","extractCalendarEvents","groupedItems","events","groupId","group","items","forEach","item","dateValue","column_values","find","col","title","text","hoursSpentValue","startTime","endTime","status","toLowerCase","isAllDay","event","start","toDate","end","color","allDay","push"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/CalendarEvents.js"],"sourcesContent":["import moment from 'moment';\r\n\r\nconst extractCalendarEvents = (groupedItems) => {\r\n  const events = [];\r\n\r\n  for (const groupId in groupedItems) {\r\n    const group = groupedItems[groupId];\r\n    group.items.forEach((item) => {\r\n      const dateValue = item.column_values.find((col) => col.title === 'Date').text;\r\n      const hoursSpentValue = item.column_values.find((col) => col.title === 'Hours Spent').text;\r\n      const startTime = item.column_values.find((col) => col.title === 'Start Time').text;\r\n      const endTime = item.column_values.find((col) => col.title === 'End Time').text;\r\n      const status = item.column_values.find((col) => col.title === 'Status').text.toLowerCase();\r\n      const isAllDay = item.column_values.find((col) => col.title === 'IsAllDay').text.toLowerCase() === 'v';\r\n\r\n      // if (dateValue && hoursSpentValue && startTime && endTime) {\r\n      //   let eventColor;\r\n\r\n      //   switch (status) {\r\n      //     case 'approved':\r\n      //       eventColor = 'green';\r\n      //       break;\r\n      //     case 'rejected':\r\n      //       eventColor = 'red';\r\n      //       break;\r\n      //     case 'in approval':\r\n      //       eventColor = 'yellow';\r\n      //       break;\r\n      //     default:\r\n      //       eventColor = 'blue'; // Set a default color or choose another color\r\n      //       break;\r\n      //   }\r\n\r\n        const event = {\r\n          start: moment(`${dateValue} ${startTime}`, 'YYYY-MM-DD hh:mm A').toDate(),\r\n          end: moment(`${dateValue} ${endTime}`, 'YYYY-MM-DD hh:mm A').toDate(),\r\n          title: `${hoursSpentValue} hours`,\r\n          color: 'purple', // Set the color based on the status\r\n          allDay: isAllDay, // Set the allDay property based on the checkbox\r\n          // ... other event properties\r\n        };\r\n\r\n        events.push(event);\r\n      \r\n    });\r\n  }\r\n\r\n  return events;\r\n};\r\n\r\nexport default extractCalendarEvents;\r\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,qBAAqB,GAAIC,YAAD,IAAkB;EAC9C,MAAMC,MAAM,GAAG,EAAf;;EAEA,KAAK,MAAMC,OAAX,IAAsBF,YAAtB,EAAoC;IAClC,MAAMG,KAAK,GAAGH,YAAY,CAACE,OAAD,CAA1B;IACAC,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAqBC,IAAD,IAAU;MAC5B,MAAMC,SAAS,GAAGD,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAyBC,GAAD,IAASA,GAAG,CAACC,KAAJ,KAAc,MAA/C,EAAuDC,IAAzE;MACA,MAAMC,eAAe,GAAGP,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAyBC,GAAD,IAASA,GAAG,CAACC,KAAJ,KAAc,aAA/C,EAA8DC,IAAtF;MACA,MAAME,SAAS,GAAGR,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAyBC,GAAD,IAASA,GAAG,CAACC,KAAJ,KAAc,YAA/C,EAA6DC,IAA/E;MACA,MAAMG,OAAO,GAAGT,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAyBC,GAAD,IAASA,GAAG,CAACC,KAAJ,KAAc,UAA/C,EAA2DC,IAA3E;MACA,MAAMI,MAAM,GAAGV,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAyBC,GAAD,IAASA,GAAG,CAACC,KAAJ,KAAc,QAA/C,EAAyDC,IAAzD,CAA8DK,WAA9D,EAAf;MACA,MAAMC,QAAQ,GAAGZ,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAyBC,GAAD,IAASA,GAAG,CAACC,KAAJ,KAAc,UAA/C,EAA2DC,IAA3D,CAAgEK,WAAhE,OAAkF,GAAnG,CAN4B,CAQ5B;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEE,MAAME,KAAK,GAAG;QACZC,KAAK,EAAEtB,MAAM,CAAE,GAAES,SAAU,IAAGO,SAAU,EAA3B,EAA8B,oBAA9B,CAAN,CAA0DO,MAA1D,EADK;QAEZC,GAAG,EAAExB,MAAM,CAAE,GAAES,SAAU,IAAGQ,OAAQ,EAAzB,EAA4B,oBAA5B,CAAN,CAAwDM,MAAxD,EAFO;QAGZV,KAAK,EAAG,GAAEE,eAAgB,QAHd;QAIZU,KAAK,EAAE,QAJK;QAIK;QACjBC,MAAM,EAAEN,QALI,CAKM;QAClB;;MANY,CAAd;MASAjB,MAAM,CAACwB,IAAP,CAAYN,KAAZ;IAEH,CArCD;EAsCD;;EAED,OAAOlB,MAAP;AACD,CA9CD;;AAgDA,eAAeF,qBAAf"},"metadata":{},"sourceType":"module"}