{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\Form.js\";\nimport React, { Component } from 'react';\nimport './Form.css';\nimport { fetchColumns, fetchBoardAndGroupId } from './getids';\nimport { createItem } from './mutation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = (e, column) => {\n      const {\n        value\n      } = e.target;\n      this.setState(prevState => ({ ...prevState,\n        [column.id]: value\n      }));\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const {\n        boardId,\n        groupId,\n        columns,\n        ...values\n      } = this.state; // Filter out columns with values\n\n      const columnValues = {};\n      columns.forEach(column => {\n        const columnId = column.id;\n\n        if (values[columnId]) {\n          columnValues[columnId] = values[columnId];\n        }\n      });\n\n      try {\n        const newItem = await createItem(boardId, groupId, columnValues);\n\n        if (newItem) {\n          this.setState({\n            successMessage: 'Item created successfully',\n            errorMessage: ''\n          });\n          this.resetFormState();\n          setTimeout(() => {\n            this.setState({\n              successMessage: ''\n            });\n          }, 3000);\n        } else {\n          this.setState({\n            errorMessage: 'Error creating item',\n            successMessage: ''\n          });\n        }\n      } catch (error) {\n        console.error('Error creating item:', error);\n        this.setState({\n          errorMessage: 'Error creating item',\n          successMessage: ''\n        });\n      }\n    };\n\n    this.state = {\n      columns: [],\n      boardId: null,\n      // Initialize boardId as null\n      groupId: null,\n      // Initialize groupId as null\n      successMessage: '',\n      // Add this\n      errorMessage: '',\n      // Add this\n      ...props\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const columns = await fetchColumns();\n      const {\n        boardId,\n        groupId\n      } = await fetchBoardAndGroupId(); // Fetch boardId and groupId\n\n      console.log(columns);\n      const initialValues = {};\n      columns.forEach(column => {\n        initialValues[column.title] = null;\n      });\n      this.setState({\n        columns,\n        boardId,\n        groupId,\n        ...initialValues\n      });\n    } catch (error) {\n      console.error('Error Fetching data.', error);\n    }\n  }\n\n  resetFormState() {\n    const {\n      columns\n    } = this.state;\n    const initialValues = {};\n    columns.forEach(column => {\n      initialValues[column.id] = null;\n    });\n    this.setState({\n      successMessage: '',\n      errorMessage: '',\n      ...initialValues\n    });\n  }\n\n  render() {\n    const {\n      columns,\n      successMessage,\n      errorMessage\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-row\",\n          children: columns.map((column, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this), column.type === 'color' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              name: column.title,\n              value: this.state[column.id] || '',\n              onChange: e => this.handleInputChange(e, column),\n              children: column.settings_str ? Object.keys(JSON.parse(column.settings_str).labels).map(labelKey => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: labelKey,\n                children: JSON.parse(column.settings_str).labels[labelKey]\n              }, labelKey, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 23\n              }, this)) : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n              type: column.type === 'color' ? 'text' : column.type,\n              name: column.title,\n              value: this.state[column.id] || '',\n              onChange: e => this.handleInputChange(e, column)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this)]\n          }, column.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-submit\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 28\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"names":["React","Component","fetchColumns","fetchBoardAndGroupId","createItem","Form","constructor","props","handleInputChange","e","column","value","target","setState","prevState","id","handleSubmit","preventDefault","boardId","groupId","columns","values","state","columnValues","forEach","columnId","newItem","successMessage","errorMessage","resetFormState","setTimeout","error","console","componentDidMount","log","initialValues","title","render","map","index","type","settings_str","Object","keys","JSON","parse","labels","labelKey"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/Form.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { fetchColumns, fetchBoardAndGroupId } from './getids';\r\nimport { createItem } from './mutation';\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [],\r\n      boardId: null, // Initialize boardId as null\r\n      groupId: null, // Initialize groupId as null\r\n      successMessage: '', // Add this\r\n      errorMessage: '', // Add this\r\n      ...props,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const columns = await fetchColumns();\r\n      const { boardId, groupId } = await fetchBoardAndGroupId(); // Fetch boardId and groupId\r\n      console.log(columns);\r\n      const initialValues = {};\r\n      columns.forEach((column) => {\r\n        initialValues[column.title] = null;\r\n      });\r\n\r\n      this.setState({ columns, boardId, groupId, ...initialValues });\r\n    } catch (error) {\r\n      console.error('Error Fetching data.', error);\r\n    }\r\n  }\r\n  handleInputChange = (e, column) => {\r\n    const { value } = e.target;\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: value,\r\n    }));\r\n  }\r\n\r\n  resetFormState() {\r\n    const { columns } = this.state;\r\n    const initialValues = {};\r\n    columns.forEach((column) => {\r\n      initialValues[column.id] = null;\r\n    });\r\n\r\n    this.setState({ successMessage: '', errorMessage: '', ...initialValues });\r\n  }\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { boardId, groupId, columns, ...values } = this.state;\r\n  \r\n    // Filter out columns with values\r\n    const columnValues = {};\r\n    columns.forEach((column) => {\r\n      const columnId = column.id;\r\n      if (values[columnId]) {\r\n        columnValues[columnId] = values[columnId];\r\n      }\r\n    });\r\n  \r\n    try {\r\n      const newItem = await createItem(boardId, groupId, columnValues);\r\n  \r\n      if (newItem) {\r\n        this.setState({\r\n          successMessage: 'Item created successfully',\r\n          errorMessage: '',\r\n        });\r\n        this.resetFormState();\r\n        setTimeout(() => {\r\n          this.setState({ successMessage: '' });\r\n        }, 3000);\r\n      } else {\r\n        this.setState({ errorMessage: 'Error creating item', successMessage: '' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating item:', error);\r\n      this.setState({ errorMessage: 'Error creating item', successMessage: '' });\r\n    }\r\n  }\r\n  \r\n\r\n  render() {\r\n    const { columns, successMessage, errorMessage } = this.state;\r\n\r\n    return (\r\n      <div className=\"form-container\">\r\n        <h1>{}</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-row\">\r\n            {columns.map((column, index) => (\r\n              <div key={column.id} className=\"form-input\">\r\n                <label>{column.title}</label>\r\n                {column.type === 'color' ? (\r\n                  <select\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  >\r\n                    {column.settings_str ? (\r\n                    Object.keys(JSON.parse(column.settings_str).labels).map((labelKey) => (\r\n                      <option\r\n                        key={labelKey}\r\n                        value={labelKey}\r\n                      >\r\n                        {JSON.parse(column.settings_str).labels[labelKey]}\r\n                      </option>\r\n                    ))\r\n                  ) : null}\r\n                  </select>\r\n                ) : (\r\n                  <input\r\n                    type={column.type === 'color' ? 'text' : column.type}\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"form-submit\">\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n        </form>\r\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}