{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\TableCreation.js\";\nimport React, { Component } from 'react';\nimport './TableCreation.css';\nimport { fetchUserName } from './api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TableCreation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.extractValue = col => {\n      if (!col.value) return '';\n\n      try {\n        const parsedValue = JSON.parse(col.value);\n\n        if (parsedValue) {\n          if (col.type === 'duration') {\n            return parsedValue.ended_at || '';\n          } else if (col.type === 'date') {\n            return parsedValue.date || '';\n          } else if (col.type === 'numeric') {\n            return parsedValue || '';\n          } else if (col.type === 'color') {\n            return parsedValue.index !== undefined ? parsedValue.index : '';\n          }\n\n          if (col.type === 'multiple-person') {\n            if (Array.isArray(parsedValue.personsAndTeams)) {\n              return parsedValue.personsAndTeams.filter(item => item.kind === 'person').map(item => {\n                const userId = item.id; // Fetch user names and return an array of Promises\n\n                return fetchUserName(userId);\n              });\n            } else {\n              return '';\n            }\n          } else if (col.type === 'board-relation' || col.type === 'lookup' || col.type === 'subtasks') {\n            const linkedPulseIds = parsedValue.linkedPulseIds;\n\n            if (Array.isArray(linkedPulseIds) && linkedPulseIds.length > 0) {\n              const linkedIds = linkedPulseIds.map(link => link.linkedPulseId).join(', ');\n              return linkedIds;\n            } else {\n              return '';\n            }\n          } else if (col.type === 'timerange') {\n            const parsedValue = JSON.parse(col.value);\n\n            if (parsedValue && parsedValue.to && parsedValue.from) {\n              const fromDate = parsedValue.from;\n              const toDate = parsedValue.to;\n              return `From: ${fromDate} To: ${toDate}` || '';\n            }\n          }\n        }\n      } catch (error) {\n        console.error('JSON parsing error:', error);\n        return col.value;\n      }\n\n      return col.value;\n    };\n\n    this.populateForm = selectedData => {\n      this.formRef.current.populateForm(selectedData);\n    };\n\n    this.state = {\n      selectedItems: new Set(),\n      selectedData: null\n    };\n  }\n\n  async handleCheckboxChange(itemId) {\n    const {\n      selectedItems\n    } = this.state;\n\n    if (selectedItems.has(itemId)) {\n      selectedItems.delete(itemId);\n      this.setState({\n        selectedItems,\n        selectedData: null\n      });\n      this.props.populateForm(null); // Pass null to clear the form\n    } else {\n      selectedItems.add(itemId);\n      const selectedData = this.getSelectedData(itemId); // Wait for all Promises to resolve before updating the state\n\n      const values = await Promise.all(selectedData.column_values.map(col => this.extractValue(col)));\n      selectedData.column_values = values;\n      this.setState({\n        selectedItems,\n        selectedData\n      });\n      this.props.populateForm(selectedData); // Pass the selected data to the form\n    }\n  }\n\n  getSelectedData(itemId) {\n    const selectedData = this.props.groupedItems[itemId];\n    return selectedData;\n  }\n\n  render() {\n    const {\n      groupedItems,\n      boardName\n    } = this.props;\n    const {\n      selectedItems\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Board Name: \", boardName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), Object.keys(groupedItems).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: Object.keys(groupedItems).map(groupId => {\n          const group = groupedItems[groupId];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Group: \", group.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"custom-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Select\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Item Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 25\n                  }, this), group.items[0].column_values.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: col.title\n                  }, col.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 27\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: group.items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      onChange: () => this.handleCheckboxChange(item.id),\n                      checked: selectedItems.has(item.id)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 126,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: item.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 27\n                  }, this), item.column_values.map(col => /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: this.extractValue(col)\n                  }, col.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 29\n                  }, this))]\n                }, item.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this)]\n          }, groupId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TableCreation;","map":{"version":3,"names":["React","Component","fetchUserName","TableCreation","constructor","props","extractValue","col","value","parsedValue","JSON","parse","type","ended_at","date","index","undefined","Array","isArray","personsAndTeams","filter","item","kind","map","userId","id","linkedPulseIds","length","linkedIds","link","linkedPulseId","join","to","from","fromDate","toDate","error","console","populateForm","selectedData","formRef","current","state","selectedItems","Set","handleCheckboxChange","itemId","has","delete","setState","add","getSelectedData","values","Promise","all","column_values","groupedItems","render","boardName","Object","keys","groupId","group","title","items","name"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/TableCreation.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './TableCreation.css';\r\nimport { fetchUserName } from './api.js';\r\n\r\nclass TableCreation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedItems: new Set(),\r\n      selectedData: null,\r\n    };\r\n  }\r\n\r\n  extractValue = (col) => {\r\n    if (!col.value) return '';\r\n\r\n    try {\r\n      const parsedValue = JSON.parse(col.value);\r\n      if (parsedValue) {\r\n        if (col.type === 'duration') {\r\n          return parsedValue.ended_at || '';\r\n        } else if (col.type === 'date') {\r\n          return parsedValue.date || '';\r\n        } else if (col.type === 'numeric') {\r\n          return parsedValue || '';\r\n        } else if (col.type === 'color') {\r\n          return parsedValue.index !== undefined ? parsedValue.index : '';\r\n        } if (col.type === 'multiple-person') {\r\n          if (Array.isArray(parsedValue.personsAndTeams)) {\r\n            return parsedValue.personsAndTeams\r\n              .filter((item) => item.kind === 'person')\r\n              .map((item) => {\r\n                const userId = item.id;\r\n                // Fetch user names and return an array of Promises\r\n                return fetchUserName(userId);\r\n              });\r\n          } else {\r\n            return '';\r\n          }\r\n          \r\n        } else if (col.type === 'board-relation' || col.type === 'lookup' || col.type === 'subtasks') {\r\n          const linkedPulseIds = parsedValue.linkedPulseIds;\r\n          if (Array.isArray(linkedPulseIds) && linkedPulseIds.length > 0) {\r\n            const linkedIds = linkedPulseIds.map((link) => link.linkedPulseId).join(', ');\r\n            return linkedIds;\r\n          } else {\r\n            return '';\r\n          }\r\n        } else if (col.type === 'timerange') {\r\n          const parsedValue = JSON.parse(col.value);\r\n          if (parsedValue && parsedValue.to && parsedValue.from) {\r\n            const fromDate = parsedValue.from;\r\n            const toDate = parsedValue.to;\r\n            return `From: ${fromDate} To: ${toDate}` || '';\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('JSON parsing error:', error);\r\n      return col.value;\r\n    }\r\n\r\n    return col.value;\r\n  };\r\n\r\n  async handleCheckboxChange(itemId) {\r\n    const { selectedItems } = this.state;\r\n    if (selectedItems.has(itemId)) {\r\n      selectedItems.delete(itemId);\r\n      this.setState({ selectedItems, selectedData: null });\r\n      this.props.populateForm(null); // Pass null to clear the form\r\n    } else {\r\n      selectedItems.add(itemId);\r\n      const selectedData = this.getSelectedData(itemId);\r\n\r\n      // Wait for all Promises to resolve before updating the state\r\n      const values = await Promise.all(\r\n        selectedData.column_values.map(col => this.extractValue(col))\r\n      );\r\n\r\n      selectedData.column_values = values;\r\n      this.setState({ selectedItems, selectedData });\r\n      this.props.populateForm(selectedData); // Pass the selected data to the form\r\n    }\r\n  };\r\n\r\n  getSelectedData(itemId) {\r\n    const selectedData = this.props.groupedItems[itemId];\r\n    return selectedData;\r\n  }\r\n\r\n  populateForm = (selectedData) => {\r\n    this.formRef.current.populateForm(selectedData);\r\n  }\r\n\r\n  render() {\r\n    const { groupedItems, boardName } = this.props;\r\n    const { selectedItems } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h1>Board Name: {boardName}</h1>\r\n        {Object.keys(groupedItems).length === 0 ? (\r\n          <p>Loading data...</p>\r\n        ) : (\r\n          <div>\r\n            {Object.keys(groupedItems).map((groupId) => {\r\n              const group = groupedItems[groupId];\r\n              return (\r\n                <div key={groupId}>\r\n                  <h2>Group: {group.title}</h2>\r\n                  <table className=\"custom-table\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Select</th>\r\n                        <th>Item Name</th>\r\n                        {group.items[0].column_values.map((col) => (\r\n                          <th key={col.id}>{col.title}</th>\r\n                        ))}\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {group.items.map((item) => (\r\n                        <tr key={item.id}>\r\n                          <td>\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              onChange={() => this.handleCheckboxChange(item.id)}\r\n                              checked={selectedItems.has(item.id)}\r\n                            />\r\n                          </td>\r\n                          <td>{item.name}</td>\r\n                          {item.column_values.map((col) => (\r\n                            <td key={col.id}>{this.extractValue(col)}</td>\r\n                          ))}\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableCreation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}