{"ast":null,"code":"import { apiKey } from '../ManageAuthAndBoard/keyandboardid';\nexport async function createItem(boardId, groupId, columnData) {\n  // Filter out columns with null values\n  const filteredColumnData = columnData.filter(_ref => {\n    let {\n      value\n    } = _ref;\n    return value !== null && value !== '' && value.selectedItemId !== '' && value.selectedItemId !== false && value.selectedItem !== '' && value.selectedItem === '';\n  }); // Construct the mutation query dynamically\n\n  const itemName = filteredColumnData.find(column => column.id === 'name').value;\n  const columnValues = filteredColumnData.map(_ref2 => {\n    let {\n      id,\n      value,\n      type\n    } = _ref2;\n\n    if (type === 'board-relation' && typeof value === 'object' && value !== null) {\n      return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"linkedPulseIds\\\\\\\":[{\\\\\\\"linkedPulseId\\\\\\\":${value.selectedItemId}}]}`;\n    } else if (type === 'hour') {\n      const [hourStr, minuteStr] = value.split(':');\n      const formattedHour = parseInt(hourStr, 10);\n      const formattedMinute = parseInt(minuteStr, 10);\n\n      if (!isNaN(formattedHour) && !isNaN(formattedMinute)) {\n        return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"hour\\\\\\\":${formattedHour},\\\\\\\"minute\\\\\\\":${formattedMinute}}`;\n      } else {\n        // Handle the case where the conversion fails\n        console.error(`Invalid hour type value: ${value}`);\n        return '';\n      }\n    } else if (type === 'boolean') {\n      const booleanValue = value ? 'true' : 'false';\n      return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"checked\\\\\\\":\\\\\\\"${booleanValue}\\\\\\\"}`;\n    } else {\n      return `\\\\\\\"${id}\\\\\\\": \\\\\\\"${value}\\\\\\\"`;\n    }\n  }).join(', ');\n  const query = `mutation {\n      create_item (\n        board_id: ${boardId},\n        group_id: \"${groupId}\",\n        item_name: \"${itemName.replace(/\"/g, '\\\\\"')}\",\n        column_values: \"{${columnValues}}\"\n      ) {\n        id\n      }\n    }`; // Make the API request with the dynamic query\n\n  const response = await fetch(\"https://api.monday.com/v2\", {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': apiKey // Replace with your API key\n\n    },\n    body: JSON.stringify({\n      'query': query\n    })\n  });\n\n  if (!response.ok) {\n    const responseData = await response.json();\n    console.log(responseData);\n    throw new Error('Failed to create item');\n  }\n\n  const data = await response.json();\n  return data.data;\n}","map":{"version":3,"names":["apiKey","createItem","boardId","groupId","columnData","filteredColumnData","filter","value","selectedItemId","selectedItem","itemName","find","column","id","columnValues","map","type","hourStr","minuteStr","split","formattedHour","parseInt","formattedMinute","isNaN","console","error","booleanValue","join","query","replace","response","fetch","method","headers","body","JSON","stringify","ok","responseData","json","log","Error","data"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/API Call/mutation.js"],"sourcesContent":["import { apiKey } from '../ManageAuthAndBoard/keyandboardid';\r\n\r\nexport async function createItem(boardId, groupId, columnData) {\r\n  // Filter out columns with null values\r\n  const filteredColumnData = columnData.filter(({ value }) => value !== null && value !== '' && value.selectedItemId !== '' && value.selectedItemId !== false && value.selectedItem !== '' && value.selectedItem === '');\r\n\r\n  // Construct the mutation query dynamically\r\n  const itemName = filteredColumnData.find(column => column.id === 'name').value;\r\n\r\n  const columnValues = filteredColumnData\r\n    .map(({ id, value, type }) => {\r\n      if (type === 'board-relation' && typeof value === 'object' && value !== null) {\r\n        return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"linkedPulseIds\\\\\\\":[{\\\\\\\"linkedPulseId\\\\\\\":${value.selectedItemId}}]}`;\r\n      } else if (type === 'hour') {\r\n        const [hourStr, minuteStr] = value.split(':');\r\n        const formattedHour = parseInt(hourStr, 10);\r\n        const formattedMinute = parseInt(minuteStr, 10);\r\n\r\n        if (!isNaN(formattedHour) && !isNaN(formattedMinute)) {\r\n          return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"hour\\\\\\\":${formattedHour},\\\\\\\"minute\\\\\\\":${formattedMinute}}`;\r\n        } else {\r\n          // Handle the case where the conversion fails\r\n          console.error(`Invalid hour type value: ${value}`);\r\n          return '';\r\n        }\r\n      } else if (type === 'boolean') {\r\n        const booleanValue = value ? 'true' : 'false';\r\n      return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"checked\\\\\\\":\\\\\\\"${booleanValue}\\\\\\\"}`;\r\n      } else {\r\n        return `\\\\\\\"${id}\\\\\\\": \\\\\\\"${value}\\\\\\\"`;\r\n      }\r\n    })\r\n    .join(', ');\r\n\r\n  const query = `mutation {\r\n      create_item (\r\n        board_id: ${boardId},\r\n        group_id: \"${groupId}\",\r\n        item_name: \"${itemName.replace(/\"/g, '\\\\\"')}\",\r\n        column_values: \"{${columnValues}}\"\r\n      ) {\r\n        id\r\n      }\r\n    }`;\r\n\r\n  // Make the API request with the dynamic query\r\n  const response = await fetch(\"https://api.monday.com/v2\", {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': apiKey, // Replace with your API key\r\n    },\r\n    body: JSON.stringify({\r\n      'query': query,\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const responseData = await response.json();\r\n    console.log(responseData);\r\n    throw new Error('Failed to create item');\r\n  }\r\n\r\n  const data = await response.json();\r\n  return data.data;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}