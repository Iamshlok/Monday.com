{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\UI Components\\\\Form\\\\Form.js\";\nimport React, { Component } from 'react';\nimport './Form.css';\nimport { fetchColumns, fetchBoardAndGroupId } from '../../API Call/getids';\nimport { createItem } from '../../API Call/mutation';\nimport PopupMessage from '../../Features/PopupMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePopupClose = () => {\n      this.setState({\n        showPopup: false,\n        popupMessage: ''\n      });\n    };\n\n    this.handleBoardRelationChange = (e, column) => {\n      const selectedItemId = e.target.value;\n      const selectedBoardItems = this.state[column.id].items;\n      const selectedItem = selectedBoardItems.find(item => item.id === selectedItemId); // Log the selectedItem to verify its structure\n      // Populate Manager field based on the selected board-relation option\n\n      const managerValue = selectedItem ? selectedItem.manager : ''; // Update to 'text' from 'person'\n\n      console.log('Selected Item:', managerValue);\n      this.setState(prevState => ({ ...prevState,\n        [column.id]: {\n          selectedItemId,\n          selectedItem,\n          items: prevState[column.id].items\n        },\n        // Use a separate update for Manager field\n        managerFieldId: managerValue\n      }));\n    };\n\n    this.handleCheckboxChange = (e, column) => {\n      const {\n        checked\n      } = e.target;\n      this.setState({\n        [column.id]: checked\n      });\n    };\n\n    this.handleInputChange = (e, column) => {\n      const {\n        value\n      } = e.target;\n      this.setState(prevState => ({ ...prevState,\n        [column.id]: value\n      }));\n    };\n\n    this.handleHourChange = (e, column) => {\n      const {\n        value\n      } = e.target;\n      this.setState(prevState => ({ ...prevState,\n        [column.id]: value\n      }));\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault(); // Define the list of mandatory fields\n\n      const mandatoryFields = [\"Name\", \"Date\", \"Hours Spent\", \"Project\"];\n      const {\n        boardId,\n        groupId,\n        columns,\n        ...values\n      } = this.state; // Check if all mandatory fields are filled\n\n      const missingFields = mandatoryFields.filter(field => !values[field]);\n\n      if (missingFields.length > 0) {\n        // Display error message if any mandatory field is missing\n        this.setState({\n          errorMessage: `Please fill in the following mandatory fields: ${missingFields.join(\", \")}`,\n          successMessage: '',\n          showPopup: true,\n          popupMessage: `Please fill in the following mandatory fields: ${missingFields.join(\", \")}`,\n          popupType: 'error'\n        });\n        return;\n      } // Exclude \"Manager\" column from the submission\n\n\n      const columnValues = columns.filter(column => column.title !== \"Manager\").map(column => ({\n        id: column.id,\n        value: values[column.id],\n        type: column.type\n      }));\n\n      try {\n        const newItem = await createItem(boardId, groupId, columnValues);\n\n        if (newItem) {\n          this.setState({\n            successMessage: 'Item created successfully',\n            errorMessage: '',\n            showPopup: true,\n            popupMessage: 'Item created successfully',\n            popupType: 'success'\n          });\n          this.resetFormState();\n          setTimeout(() => {\n            this.setState({\n              successMessage: ''\n            });\n          }, 3000);\n        } else {\n          this.setState({\n            errorMessage: 'Error creating item',\n            successMessage: '',\n            showPopup: true,\n            popupMessage: 'Error creating item',\n            popupType: 'error'\n          });\n        }\n      } catch (error) {\n        console.error('Error creating item:', error);\n        this.setState({\n          errorMessage: 'Error creating item',\n          successMessage: '',\n          showPopup: true,\n          popupMessage: 'Error creating item',\n          popupType: 'error'\n        });\n      }\n    };\n\n    this.state = {\n      columns: [],\n      boardId: null,\n      groupId: null,\n      successMessage: '',\n      errorMessage: '',\n      showPopup: false,\n      popupMessage: '',\n      popupType: 'success',\n      edit: false,\n      // Set edit to true or false based on your requirement\n      ...props\n    };\n  } ///////////////////////////////////////////App Handlers///////////////////////////////////////\n\n\n  resetFormState() {\n    const {\n      columns\n    } = this.state;\n    const initialValues = {};\n    columns.forEach(column => {\n      initialValues[column.id] = null;\n    });\n    this.setState({\n      successMessage: '',\n      errorMessage: '',\n      ...initialValues\n    });\n  }\n\n  async componentDidMount() {\n    try {\n      const columns = await fetchColumns();\n      const {\n        boardId,\n        groupId\n      } = await fetchBoardAndGroupId();\n      const initialValues = {};\n      const boardRelationColumns = columns.filter(column => column.type === 'board-relation'); // Fetch and populate data for board-relation columns\n\n      for (const boardRelationColumn of boardRelationColumns) {\n        const {\n          boardIds\n        } = JSON.parse(boardRelationColumn.settings_str);\n        const boardItems = await this.fetchBoardItems(boardIds[0]);\n        initialValues[boardRelationColumn.id] = {\n          selectedItemId: '',\n          // Initialize selectedItemId\n          selectedItem: null,\n          // Initialize selectedItem\n          items: boardItems\n        };\n      } // Initialize other columns\n\n\n      columns.forEach(column => {\n        if (column.type !== 'board-relation') {\n          initialValues[column.id] = null;\n        }\n      });\n      this.setState({\n        columns,\n        boardId,\n        groupId,\n        ...initialValues\n      });\n    } catch (error) {\n      console.error('Error Fetching data.', error);\n    }\n  } /////////////////////////////////////Fetching Projects/////////////////////////////////////\n\n\n  async fetchBoardItems(boardId) {\n    try {\n      const response = await fetch(`https://api.monday.com/v2`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk' // Replace with your Monday.com API key\n\n        },\n        body: JSON.stringify({\n          query: `\n            query {\n              boards(ids: ${boardId}) {\n                items {\n                  id\n                  name\n                  group {\n                    id\n                    title\n                  }\n                  column_values {\n                    id\n                    title\n                    text\n                  }\n                }\n              }\n            }\n          `\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n\n      if (data.data && data.data.boards && data.data.boards.length > 0) {\n        return data.data.boards[0].items.map(item => {\n          const managerColumn = item.column_values.find(column => column.title === 'Manager');\n          return {\n            id: item.id,\n            name: item.name,\n            group: item.group,\n            manager: managerColumn ? managerColumn.text : ''\n          };\n        }).filter(item => item.group.title === 'On Going Projects');\n      }\n\n      return [];\n    } catch (error) {\n      console.error('Error fetching board items:', error);\n      return [];\n    }\n  } ////////////////////////////////////////////////////Submit Handler////////////////////////////////////////////////////\n\n\n  /////////////////////////////////////////App Render/////////////////////////////////////////////\n  render() {\n    const {\n      columns,\n      successMessage,\n      errorMessage,\n      showPopup,\n      popupMessage,\n      popupType,\n      edit\n    } = this.state; // Filter out columns \n\n    const filteredColumns = columns.filter(column => column.title !== \"Subitems\" && column.title !== \"Person\"); // Inside the render method\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Time Entry Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-row\",\n          children: filteredColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this), column.title === \"Manager\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: column.type === 'text',\n              name: column.id // Make sure the name attribute matches the column.id\n              ,\n              value: this.state.managerFieldId || '' // Use managerFieldId instead of managerFieldName\n              ,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 19\n            }, this) : column.type === 'board-relation' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              name: column.title,\n              value: this.state[column.id] ? this.state[column.id].selectedItemId : '',\n              onChange: e => this.handleBoardRelationChange(e, column),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select an option\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 21\n              }, this), this.state[column.id] && this.state[column.id].items.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: item.id,\n                children: item.name\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 19\n            }, this) : column.type === 'color' ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"In Approval\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, this) // <select\n            //   name={column.title}\n            //   value={this.state[column.id] || ''}\n            //   onChange={(e) => this.handleInputChange(e, column)}\n            // >\n            //   {column.settings_str ? (\n            //     Object.keys(JSON.parse(column.settings_str).labels).map((labelKey) => (\n            //       <option\n            //         key={labelKey}\n            //         value={labelKey}  \n            //       >\n            //         {JSON.parse(column.settings_str).labels[labelKey]}\n            //       </option>\n            //     ))\n            //   ) : null}\n            // </select>\n            : column.type === 'hour' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                name: column.title,\n                value: this.state[column.id] || '' // Set the checked attribute based on the state\n                ,\n                onChange: e => this.handleHourChange(e, column)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 19\n            }, this) : column.type === 'boolean' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: column.title,\n                checked: this.state[column.id] || false // Set the checked attribute based on the state\n                ,\n                onChange: e => this.handleCheckboxChange(e, column)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n              type: column.type === 'color' ? 'text' : column.type,\n              name: column.title,\n              value: this.state[column.id] || '',\n              onChange: e => this.handleInputChange(e, column)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 19\n            }, this)]\n          }, column.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-submit\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 28\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 26\n      }, this), showPopup && /*#__PURE__*/_jsxDEV(PopupMessage, {\n        message: popupMessage,\n        type: popupType,\n        onClose: this.handlePopupClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"names":["React","Component","fetchColumns","fetchBoardAndGroupId","createItem","PopupMessage","Form","constructor","props","handlePopupClose","setState","showPopup","popupMessage","handleBoardRelationChange","e","column","selectedItemId","target","value","selectedBoardItems","state","id","items","selectedItem","find","item","managerValue","manager","console","log","prevState","managerFieldId","handleCheckboxChange","checked","handleInputChange","handleHourChange","handleSubmit","preventDefault","mandatoryFields","boardId","groupId","columns","values","missingFields","filter","field","length","errorMessage","join","successMessage","popupType","columnValues","title","map","type","newItem","resetFormState","setTimeout","error","edit","initialValues","forEach","componentDidMount","boardRelationColumns","boardRelationColumn","boardIds","JSON","parse","settings_str","boardItems","fetchBoardItems","response","fetch","method","headers","body","stringify","query","data","json","boards","managerColumn","column_values","name","group","text","render","filteredColumns","index"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/UI Components/Form/Form.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { fetchColumns, fetchBoardAndGroupId } from '../../API Call/getids';\r\nimport { createItem } from '../../API Call/mutation';\r\nimport PopupMessage from '../../Features/PopupMessage';\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [],\r\n      boardId: null,\r\n      groupId: null,\r\n      successMessage: '',\r\n      errorMessage: '',\r\n      showPopup: false,\r\n      popupMessage: '',\r\n      popupType: 'success',\r\n      edit: false, // Set edit to true or false based on your requirement\r\n      ...props,\r\n    };\r\n  }\r\n\r\n  ///////////////////////////////////////////App Handlers///////////////////////////////////////\r\n\r\n  handlePopupClose = () => {\r\n    this.setState({\r\n      showPopup: false,\r\n      popupMessage: '',\r\n    });\r\n  };\r\n\r\n  handleBoardRelationChange = (e, column) => {\r\n    const selectedItemId = e.target.value;\r\n    const selectedBoardItems = this.state[column.id].items;\r\n    const selectedItem = selectedBoardItems.find(item => item.id === selectedItemId);\r\n  \r\n    // Log the selectedItem to verify its structure\r\n    \r\n  \r\n    // Populate Manager field based on the selected board-relation option\r\n    const managerValue = selectedItem ? selectedItem.manager : ''; // Update to 'text' from 'person'\r\n    console.log('Selected Item:', managerValue);\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: {\r\n        selectedItemId,\r\n        selectedItem,\r\n        items: prevState[column.id].items,\r\n      },\r\n      // Use a separate update for Manager field\r\n      managerFieldId: managerValue,\r\n    }));\r\n  };\r\n  \r\n\r\n  handleCheckboxChange = (e, column) => {\r\n    const { checked } = e.target;\r\n    this.setState({\r\n      [column.id]: checked,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (e, column) => {\r\n    const { value } = e.target;\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: value,\r\n    }));\r\n  }\r\n\r\n  resetFormState() {\r\n    const { columns } = this.state;\r\n    const initialValues = {};\r\n    columns.forEach((column) => {\r\n      initialValues[column.id] = null;\r\n    });\r\n\r\n    this.setState({ successMessage: '', errorMessage: '', ...initialValues });\r\n  }\r\n  \r\n  handleHourChange = (e, column) => {\r\n    const { value } = e.target;\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: value,\r\n    }));\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const columns = await fetchColumns();\r\n      const { boardId, groupId } = await fetchBoardAndGroupId();\r\n      const initialValues = {};\r\n      const boardRelationColumns = columns.filter((column) => column.type === 'board-relation');\r\n\r\n      // Fetch and populate data for board-relation columns\r\n      for (const boardRelationColumn of boardRelationColumns) {\r\n        const { boardIds } = JSON.parse(boardRelationColumn.settings_str);\r\n        const boardItems = await this.fetchBoardItems(boardIds[0]);\r\n        initialValues[boardRelationColumn.id] = {\r\n          selectedItemId: '', // Initialize selectedItemId\r\n          selectedItem: null, // Initialize selectedItem\r\n          items: boardItems,\r\n        };\r\n      }\r\n\r\n      // Initialize other columns\r\n      columns.forEach((column) => {\r\n        if (column.type !== 'board-relation') {\r\n          initialValues[column.id] = null;\r\n        }\r\n      });\r\n\r\n      this.setState({ columns, boardId, groupId, ...initialValues });\r\n    } catch (error) {\r\n      console.error('Error Fetching data.', error);\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////Fetching Projects/////////////////////////////////////\r\n  async fetchBoardItems(boardId) {\r\n    try {\r\n      const response = await fetch(`https://api.monday.com/v2`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk', // Replace with your Monday.com API key\r\n        },\r\n        body: JSON.stringify({\r\n          query: `\r\n            query {\r\n              boards(ids: ${boardId}) {\r\n                items {\r\n                  id\r\n                  name\r\n                  group {\r\n                    id\r\n                    title\r\n                  }\r\n                  column_values {\r\n                    id\r\n                    title\r\n                    text\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n      if (data.data && data.data.boards && data.data.boards.length > 0) {\r\n        return data.data.boards[0].items.map(item => {\r\n          const managerColumn = item.column_values.find(column => column.title === 'Manager');\r\n          return {\r\n            id: item.id,\r\n            name: item.name,\r\n            group: item.group,\r\n            manager: managerColumn ? managerColumn.text : '',\r\n          };\r\n        }).filter(item => item.group.title === 'On Going Projects');\r\n      }\r\n\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching board items:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  ////////////////////////////////////////////////////Submit Handler////////////////////////////////////////////////////\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Define the list of mandatory fields\r\n    const mandatoryFields = [\"Name\", \"Date\", \"Hours Spent\", \"Project\"];\r\n  \r\n    const { boardId, groupId, columns, ...values } = this.state;\r\n  \r\n    // Check if all mandatory fields are filled\r\n    const missingFields = mandatoryFields.filter(field => !values[field]);\r\n  \r\n    if (missingFields.length > 0) {\r\n      // Display error message if any mandatory field is missing\r\n      this.setState({\r\n        errorMessage: `Please fill in the following mandatory fields: ${missingFields.join(\", \")}`,\r\n        successMessage: '',\r\n        showPopup: true,\r\n        popupMessage: `Please fill in the following mandatory fields: ${missingFields.join(\", \")}`,\r\n        popupType: 'error',\r\n      });\r\n      return;\r\n    }\r\n  \r\n    // Exclude \"Manager\" column from the submission\r\n    const columnValues = columns\r\n      .filter(column => column.title !== \"Manager\")\r\n      .map(column => ({\r\n        id: column.id,\r\n        value: values[column.id],\r\n        type: column.type,\r\n      }));\r\n  \r\n    try {\r\n      const newItem = await createItem(boardId, groupId, columnValues);\r\n  \r\n      if (newItem) {\r\n        this.setState({\r\n          successMessage: 'Item created successfully',\r\n          errorMessage: '',\r\n          showPopup: true,\r\n          popupMessage: 'Item created successfully',\r\n          popupType: 'success',\r\n        });\r\n        this.resetFormState();\r\n        setTimeout(() => {\r\n          this.setState({ successMessage: '' });\r\n        }, 3000);\r\n      } else {\r\n        this.setState({\r\n          errorMessage: 'Error creating item',\r\n          successMessage: '',\r\n          showPopup: true,\r\n          popupMessage: 'Error creating item',\r\n          popupType: 'error',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating item:', error);\r\n      this.setState({\r\n        errorMessage: 'Error creating item',\r\n        successMessage: '',\r\n        showPopup: true,\r\n        popupMessage: 'Error creating item',\r\n        popupType: 'error',\r\n      });\r\n    }\r\n  };\r\n  \r\n\r\n  /////////////////////////////////////////App Render/////////////////////////////////////////////\r\n  render() {\r\n    const { columns, successMessage, errorMessage, showPopup, popupMessage, popupType, edit } = this.state;\r\n\r\n    // Filter out columns \r\n    const filteredColumns = columns.filter(column => column.title !== \"Subitems\" && column.title !== \"Person\");\r\n    // Inside the render method\r\n    return (\r\n      <div className=\"form-container\">\r\n        <h1>Time Entry Form</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-row\">\r\n            {filteredColumns.map((column, index) => (\r\n              <div key={column.id} className=\"form-input\">\r\n                <label>{column.title}</label>\r\n                {column.title === \"Manager\" ? (\r\n                  <input\r\n                  type={column.type === 'text'}\r\n                  name={column.id}  // Make sure the name attribute matches the column.id\r\n                  value={this.state.managerFieldId || ''}  // Use managerFieldId instead of managerFieldName\r\n                  readOnly\r\n                />\r\n                ) : column.type === 'board-relation' ? (\r\n                  <select\r\n                    name={column.title}\r\n                    value={this.state[column.id] ? this.state[column.id].selectedItemId : ''}\r\n                    onChange={(e) => this.handleBoardRelationChange(e, column)}\r\n                  >\r\n                    <option value=\"\">Select an option</option>\r\n                    {this.state[column.id] && this.state[column.id].items.map((item) => (\r\n                      <option\r\n                        key={item.id}\r\n                        value={item.id}\r\n                      >\r\n                        {item.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ) : column.type === 'color' ? (\r\n                  <span>In Approval</span>\r\n                  // <select\r\n                  //   name={column.title}\r\n                  //   value={this.state[column.id] || ''}\r\n                  //   onChange={(e) => this.handleInputChange(e, column)}\r\n                  // >\r\n                  //   {column.settings_str ? (\r\n                  //     Object.keys(JSON.parse(column.settings_str).labels).map((labelKey) => (\r\n                  //       <option\r\n                  //         key={labelKey}\r\n                  //         value={labelKey}  \r\n                  //       >\r\n                  //         {JSON.parse(column.settings_str).labels[labelKey]}\r\n                  //       </option>\r\n                  //     ))\r\n                  //   ) : null}\r\n                  // </select>\r\n                ) : column.type === 'hour' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"time\"\r\n                      name={column.title}\r\n                      value={this.state[column.id] || ''}  // Set the checked attribute based on the state\r\n                      onChange={(e) => this.handleHourChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : column.type === 'boolean' ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name={column.title}\r\n                      checked={this.state[column.id] || false}  // Set the checked attribute based on the state\r\n                      onChange={(e) => this.handleCheckboxChange(e, column)}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <input\r\n                    type={column.type === 'color' ? 'text' : column.type}\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"form-submit\">\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n        </form>\r\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        {showPopup && (\r\n          <PopupMessage message={popupMessage} type={popupType} onClose={this.handlePopupClose} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}