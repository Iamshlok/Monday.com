{"ast":null,"code":"import moment from'moment';var extractCalendarEvents=function extractCalendarEvents(groupedItems){var events=[];for(var groupId in groupedItems){var group=groupedItems[groupId];group.items.forEach(function(item){var dateValue=item.column_values.find(function(col){return col.title==='Date';}).text;var hoursSpentValue=item.column_values.find(function(col){return col.title==='Hours Spent';}).text;var startTime=item.column_values.find(function(col){return col.title==='Start Time';}).text;var endTime=item.column_values.find(function(col){return col.title==='End Time';}).text;// const status = item.column_values.find((col) => col.title === 'Status').text.toLowerCase();\nvar isAllDay=item.column_values.find(function(col){return col.title==='IsAllDay';}).text.toLowerCase()==='v';if(dateValue&&hoursSpentValue){var eventStart,eventEnd;if(isAllDay){// Set start and end times for the entire day\neventStart=moment(dateValue).startOf('day').toDate();eventEnd=moment(dateValue).endOf('day').toDate();}else{// Set start and end times using provided values\neventStart=moment(\"\".concat(dateValue,\" \").concat(startTime),'YYYY-MM-DD hh:mm A').toDate();eventEnd=moment(\"\".concat(dateValue,\" \").concat(endTime),'YYYY-MM-DD hh:mm A').toDate();}var event={start:eventStart,end:eventEnd,title:\"\".concat(hoursSpentValue,\" hours\"),allDay:isAllDay// ... other event properties\n};events.push(event);}});}return events;};export default extractCalendarEvents;","map":{"version":3,"names":["moment","extractCalendarEvents","groupedItems","events","groupId","group","items","forEach","item","dateValue","column_values","find","col","title","text","hoursSpentValue","startTime","endTime","isAllDay","toLowerCase","eventStart","eventEnd","startOf","toDate","endOf","event","start","end","allDay","push"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/UI Components/Calendar/CalendarEvents.js"],"sourcesContent":["import moment from 'moment';\r\n\r\nconst extractCalendarEvents = (groupedItems) => {\r\n  const events = [];\r\n\r\n  for (const groupId in groupedItems) {\r\n    const group = groupedItems[groupId];\r\n    group.items.forEach((item) => {\r\n      const dateValue = item.column_values.find((col) => col.title === 'Date').text;\r\n      const hoursSpentValue = item.column_values.find((col) => col.title === 'Hours Spent').text;\r\n      const startTime = item.column_values.find((col) => col.title === 'Start Time').text;\r\n      const endTime = item.column_values.find((col) => col.title === 'End Time').text;\r\n      // const status = item.column_values.find((col) => col.title === 'Status').text.toLowerCase();\r\n      const isAllDay = item.column_values.find((col) => col.title === 'IsAllDay').text.toLowerCase() === 'v';\r\n\r\n      if (dateValue && hoursSpentValue) {\r\n        let eventStart, eventEnd;\r\n\r\n        if (isAllDay) {\r\n          // Set start and end times for the entire day\r\n          eventStart = moment(dateValue).startOf('day').toDate();\r\n          eventEnd = moment(dateValue).endOf('day').toDate();\r\n        } else {\r\n          // Set start and end times using provided values\r\n          eventStart = moment(`${dateValue} ${startTime}`, 'YYYY-MM-DD hh:mm A').toDate();\r\n          eventEnd = moment(`${dateValue} ${endTime}`, 'YYYY-MM-DD hh:mm A').toDate();\r\n        }\r\n\r\n        const event = {\r\n          start: eventStart,\r\n          end: eventEnd,\r\n          title: `${hoursSpentValue} hours`,\r\n          allDay: isAllDay,\r\n          // ... other event properties\r\n        };\r\n\r\n        events.push(event);\r\n      }\r\n    });\r\n  }\r\n\r\n  return events;\r\n};\r\n\r\nexport default extractCalendarEvents;\r\n"],"mappings":"AAAA,MAAOA,OAAP,KAAmB,QAAnB,CAEA,GAAMC,sBAAqB,CAAG,QAAxBA,sBAAwB,CAACC,YAAD,CAAkB,CAC9C,GAAMC,OAAM,CAAG,EAAf,CAEA,IAAK,GAAMC,QAAX,GAAsBF,aAAtB,CAAoC,CAClC,GAAMG,MAAK,CAAGH,YAAY,CAACE,OAAD,CAA1B,CACAC,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoB,SAACC,IAAD,CAAU,CAC5B,GAAMC,UAAS,CAAGD,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAwB,SAACC,GAAD,QAASA,IAAG,CAACC,KAAJ,GAAc,MAAvB,EAAxB,EAAuDC,IAAzE,CACA,GAAMC,gBAAe,CAAGP,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAwB,SAACC,GAAD,QAASA,IAAG,CAACC,KAAJ,GAAc,aAAvB,EAAxB,EAA8DC,IAAtF,CACA,GAAME,UAAS,CAAGR,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAwB,SAACC,GAAD,QAASA,IAAG,CAACC,KAAJ,GAAc,YAAvB,EAAxB,EAA6DC,IAA/E,CACA,GAAMG,QAAO,CAAGT,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAwB,SAACC,GAAD,QAASA,IAAG,CAACC,KAAJ,GAAc,UAAvB,EAAxB,EAA2DC,IAA3E,CACA;AACA,GAAMI,SAAQ,CAAGV,IAAI,CAACE,aAAL,CAAmBC,IAAnB,CAAwB,SAACC,GAAD,QAASA,IAAG,CAACC,KAAJ,GAAc,UAAvB,EAAxB,EAA2DC,IAA3D,CAAgEK,WAAhE,KAAkF,GAAnG,CAEA,GAAIV,SAAS,EAAIM,eAAjB,CAAkC,CAChC,GAAIK,WAAJ,CAAgBC,QAAhB,CAEA,GAAIH,QAAJ,CAAc,CACZ;AACAE,UAAU,CAAGpB,MAAM,CAACS,SAAD,CAAN,CAAkBa,OAAlB,CAA0B,KAA1B,EAAiCC,MAAjC,EAAb,CACAF,QAAQ,CAAGrB,MAAM,CAACS,SAAD,CAAN,CAAkBe,KAAlB,CAAwB,KAAxB,EAA+BD,MAA/B,EAAX,CACD,CAJD,IAIO,CACL;AACAH,UAAU,CAAGpB,MAAM,WAAIS,SAAJ,aAAiBO,SAAjB,EAA8B,oBAA9B,CAAN,CAA0DO,MAA1D,EAAb,CACAF,QAAQ,CAAGrB,MAAM,WAAIS,SAAJ,aAAiBQ,OAAjB,EAA4B,oBAA5B,CAAN,CAAwDM,MAAxD,EAAX,CACD,CAED,GAAME,MAAK,CAAG,CACZC,KAAK,CAAEN,UADK,CAEZO,GAAG,CAAEN,QAFO,CAGZR,KAAK,WAAKE,eAAL,UAHO,CAIZa,MAAM,CAAEV,QACR;AALY,CAAd,CAQAf,MAAM,CAAC0B,IAAP,CAAYJ,KAAZ,EACD,CACF,CA/BD,EAgCD,CAED,MAAOtB,OAAP,CACD,CAxCD,CA0CA,cAAeF,sBAAf"},"metadata":{},"sourceType":"module"}