{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\Form.js\";\nimport React, { Component } from 'react';\nimport './Form.css';\nimport { fetchColumns, fetchBoardAndGroupId } from './getids';\nimport { createItem } from './mutation';\nimport PopupMessage from './PopupMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Form extends Component {\n  async fetchBoardItems(boardId) {\n    try {\n      const response = await fetch(`https://api.monday.com/v2/boards/${boardId}/items`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'YOUR_API_KEY' // Replace with your Monday.com API key\n\n        }\n      });\n      const data = await response.json();\n      const boardItems = data.data.map(item => ({\n        id: item.id,\n        name: item.name\n      }));\n      return boardItems;\n    } catch (error) {\n      console.error('Error fetching board items:', error);\n      return [];\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.handlePopupClose = () => {\n      this.setState({\n        showPopup: false,\n        popupMessage: ''\n      });\n    };\n\n    this.handleBoardRelationChange = (e, column) => {\n      const selectedItemId = e.target.value;\n      const selectedBoardItems = this.state[column.id].items;\n      const selectedItem = selectedBoardItems.find(item => item.id === selectedItemId);\n      this.setState(prevState => ({ ...prevState,\n        [column.id]: {\n          selectedItemId,\n          selectedItem,\n          items: prevState[column.id].items\n        }\n      }));\n    };\n\n    this.handleInputChange = (e, column) => {\n      const {\n        value\n      } = e.target;\n      this.setState(prevState => ({ ...prevState,\n        [column.id]: value\n      }));\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const {\n        boardId,\n        groupId,\n        columns,\n        ...values\n      } = this.state;\n      const columnValues = {};\n      columns.forEach(column => {\n        const columnId = column.id;\n\n        if (values[columnId]) {\n          columnValues[columnId] = values[columnId];\n        }\n      });\n\n      try {\n        const newItem = await createItem(boardId, groupId, columnValues);\n\n        if (newItem) {\n          this.setState({\n            successMessage: 'Item created successfully',\n            errorMessage: '',\n            showPopup: true,\n            popupMessage: 'Item created successfully',\n            popupType: 'success'\n          });\n          this.resetFormState();\n          setTimeout(() => {\n            this.setState({\n              successMessage: ''\n            });\n          }, 3000);\n        } else {\n          this.setState({\n            errorMessage: 'Error creating item',\n            successMessage: '',\n            showPopup: true,\n            popupMessage: 'Error creating item',\n            popupType: 'error'\n          });\n        }\n      } catch (error) {\n        console.error('Error creating item:', error);\n        this.setState({\n          errorMessage: 'Error creating item',\n          successMessage: '',\n          showPopup: true,\n          popupMessage: 'Error creating item',\n          popupType: 'error'\n        });\n      }\n    };\n\n    this.state = {\n      columns: [],\n      boardId: null,\n      groupId: null,\n      successMessage: '',\n      errorMessage: '',\n      showPopup: false,\n      popupMessage: '',\n      popupType: 'success',\n      ...props\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const columns = await fetchColumns();\n      const {\n        boardId,\n        groupId\n      } = await fetchBoardAndGroupId();\n      const initialValues = {};\n      const boardRelationColumns = columns.filter(column => column.type === 'board-relation'); // Fetch and populate data for board-relation columns\n\n      for (const boardRelationColumn of boardRelationColumns) {\n        const {\n          boardIds\n        } = JSON.parse(boardRelationColumn.settings_str);\n        const boardItems = await this.fetchBoardItems(boardIds[0]);\n        initialValues[boardRelationColumn.id] = {\n          selectedItemId: '',\n          // Initialize selectedItemId\n          selectedItem: null,\n          // Initialize selectedItem\n          items: boardItems\n        };\n      } // Initialize other columns\n\n\n      columns.forEach(column => {\n        if (column.type !== 'board-relation') {\n          initialValues[column.id] = null;\n        }\n      });\n      this.setState({\n        columns,\n        boardId,\n        groupId,\n        ...initialValues\n      });\n    } catch (error) {\n      console.error('Error Fetching data.', error);\n    }\n  }\n\n  resetFormState() {\n    const {\n      columns\n    } = this.state;\n    const initialValues = {};\n    columns.forEach(column => {\n      initialValues[column.id] = null;\n    });\n    this.setState({\n      successMessage: '',\n      errorMessage: '',\n      ...initialValues\n    });\n  }\n\n  render() {\n    const {\n      columns,\n      successMessage,\n      errorMessage,\n      showPopup,\n      popupMessage,\n      popupType\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-row\",\n          children: columns.map((column, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this), column.type === 'board-relation' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              name: column.title,\n              value: this.state[column.id] ? this.state[column.id].selectedItemId : '',\n              onChange: e => this.handleBoardRelationChange(e, column),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select an option\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 21\n              }, this), this.state[column.id] && this.state[column.id].items.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: item.id,\n                children: item.name\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 19\n            }, this) : column.type === 'color' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              name: column.title,\n              value: this.state[column.id] || '',\n              onChange: e => this.handleInputChange(e, column),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select an option\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 21\n              }, this), column.settings_str ? Object.keys(JSON.parse(column.settings_str).labels).map(labelKey => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: labelKey,\n                children: JSON.parse(column.settings_str).labels[labelKey]\n              }, labelKey, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 25\n              }, this)) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n              type: column.type === 'color' ? 'text' : column.type,\n              name: column.title,\n              value: this.state[column.id] || '',\n              onChange: e => this.handleInputChange(e, column)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this)]\n          }, column.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-submit\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 28\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 26\n      }, this), showPopup && /*#__PURE__*/_jsxDEV(PopupMessage, {\n        message: popupMessage,\n        type: popupType,\n        onClose: this.handlePopupClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"names":["React","Component","fetchColumns","fetchBoardAndGroupId","createItem","PopupMessage","Form","fetchBoardItems","boardId","response","fetch","method","headers","data","json","boardItems","map","item","id","name","error","console","constructor","props","handlePopupClose","setState","showPopup","popupMessage","handleBoardRelationChange","e","column","selectedItemId","target","value","selectedBoardItems","state","items","selectedItem","find","prevState","handleInputChange","handleSubmit","preventDefault","groupId","columns","values","columnValues","forEach","columnId","newItem","successMessage","errorMessage","popupType","resetFormState","setTimeout","componentDidMount","initialValues","boardRelationColumns","filter","type","boardRelationColumn","boardIds","JSON","parse","settings_str","render","index","title","Object","keys","labels","labelKey"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/Form.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { fetchColumns, fetchBoardAndGroupId } from './getids';\r\nimport { createItem } from './mutation';\r\nimport PopupMessage from './PopupMessage';\r\n\r\n\r\n\r\nclass Form extends Component {\r\n\r\n  async fetchBoardItems(boardId) {\r\n    try {\r\n      const response = await fetch(`https://api.monday.com/v2/boards/${boardId}/items`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'YOUR_API_KEY', // Replace with your Monday.com API key\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      const boardItems = data.data.map((item) => ({\r\n        id: item.id,\r\n        name: item.name,\r\n      }));\r\n\r\n      return boardItems;\r\n    } catch (error) {\r\n      console.error('Error fetching board items:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [],\r\n      boardId: null,\r\n      groupId: null,\r\n      successMessage: '',\r\n      errorMessage: '',\r\n      showPopup: false,\r\n      popupMessage: '',\r\n      popupType: 'success',\r\n      ...props,\r\n    };\r\n  }\r\n\r\n  handlePopupClose = () => {\r\n    this.setState({\r\n      showPopup: false,\r\n      popupMessage: '',\r\n    });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const columns = await fetchColumns();\r\n      const { boardId, groupId } = await fetchBoardAndGroupId();\r\n      const initialValues = {};\r\n      const boardRelationColumns = columns.filter((column) => column.type === 'board-relation');\r\n\r\n      // Fetch and populate data for board-relation columns\r\n      for (const boardRelationColumn of boardRelationColumns) {\r\n        const { boardIds } = JSON.parse(boardRelationColumn.settings_str);\r\n        const boardItems = await this.fetchBoardItems(boardIds[0]);\r\n        initialValues[boardRelationColumn.id] = {\r\n          selectedItemId: '', // Initialize selectedItemId\r\n          selectedItem: null, // Initialize selectedItem\r\n          items: boardItems,\r\n        };\r\n      }\r\n\r\n      // Initialize other columns\r\n      columns.forEach((column) => {\r\n        if (column.type !== 'board-relation') {\r\n          initialValues[column.id] = null;\r\n        }\r\n      });\r\n\r\n      this.setState({ columns, boardId, groupId, ...initialValues });\r\n    } catch (error) {\r\n      console.error('Error Fetching data.', error);\r\n    }\r\n  }\r\n\r\n  handleBoardRelationChange = (e, column) => {\r\n    const selectedItemId = e.target.value;\r\n    const selectedBoardItems = this.state[column.id].items;\r\n    const selectedItem = selectedBoardItems.find((item) => item.id === selectedItemId);\r\n\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: {\r\n        selectedItemId,\r\n        selectedItem,\r\n        items: prevState[column.id].items,\r\n      },\r\n    }));\r\n  };\r\n\r\n  \r\n\r\n  handleInputChange = (e, column) => {\r\n    const { value } = e.target;\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: value,\r\n    }));\r\n  }\r\n\r\n  resetFormState() {\r\n    const { columns } = this.state;\r\n    const initialValues = {};\r\n    columns.forEach((column) => {\r\n      initialValues[column.id] = null;\r\n    });\r\n\r\n    this.setState({ successMessage: '', errorMessage: '', ...initialValues });\r\n  }\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { boardId, groupId, columns, ...values } = this.state;\r\n\r\n    const columnValues = {};\r\n    columns.forEach((column) => {\r\n      const columnId = column.id;\r\n      if (values[columnId]) {\r\n        columnValues[columnId] = values[columnId];\r\n      }\r\n    });\r\n\r\n    try {\r\n      const newItem = await createItem(boardId, groupId, columnValues);\r\n\r\n      if (newItem) {\r\n        this.setState({\r\n          successMessage: 'Item created successfully',\r\n          errorMessage: '',\r\n          showPopup: true,\r\n          popupMessage: 'Item created successfully',\r\n          popupType: 'success',\r\n        });\r\n        this.resetFormState();\r\n        setTimeout(() => {\r\n          this.setState({ successMessage: '' });\r\n        }, 3000);\r\n      } else {\r\n        this.setState({\r\n          errorMessage: 'Error creating item',\r\n          successMessage: '',\r\n          showPopup: true,\r\n          popupMessage: 'Error creating item',\r\n          popupType: 'error',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating item:', error);\r\n      this.setState({\r\n        errorMessage: 'Error creating item',\r\n        successMessage: '',\r\n        showPopup: true,\r\n        popupMessage: 'Error creating item',\r\n        popupType: 'error',\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { columns, successMessage, errorMessage, showPopup, popupMessage, popupType } = this.state;\r\n\r\n    return (\r\n      <div className=\"form-container\">\r\n        <h1>{/* Add your form title here */}</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-row\">\r\n            {columns.map((column, index) => (\r\n              <div key={column.id} className=\"form-input\">\r\n                <label>{column.title}</label>\r\n                {column.type === 'board-relation' ? (\r\n                  <select\r\n                    name={column.title}\r\n                    value={this.state[column.id] ? this.state[column.id].selectedItemId : ''}\r\n                    onChange={(e) => this.handleBoardRelationChange(e, column)}\r\n                  >\r\n                    <option value=\"\">Select an option</option>\r\n                    {this.state[column.id] && this.state[column.id].items.map((item) => (\r\n                      <option\r\n                        key={item.id}\r\n                        value={item.id}\r\n                      >\r\n                        {item.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ) : column.type === 'color' ? (\r\n                  <select\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  >\r\n                    <option value=\"\">Select an option</option>\r\n                    {column.settings_str ? (\r\n                      Object.keys(JSON.parse(column.settings_str).labels).map((labelKey) => (\r\n                        <option\r\n                          key={labelKey}\r\n                          value={labelKey}\r\n                        >\r\n                          {JSON.parse(column.settings_str).labels[labelKey]}\r\n                        </option>\r\n                      ))\r\n                    ) : null}\r\n                  </select>\r\n                ) : (\r\n                  <input\r\n                    type={column.type === 'color' ? 'text' : column.type}\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"form-submit\">\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n        </form>\r\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        {showPopup && (\r\n          <PopupMessage message={popupMessage} type={popupType} onClose={this.handlePopupClose} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}