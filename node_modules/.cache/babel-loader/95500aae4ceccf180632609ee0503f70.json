{"ast":null,"code":"import _regeneratorRuntime from\"D:/monday.com/Monday.form/quickstart-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/monday.com/Monday.form/quickstart-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";var columnsData=null;// Variable to store the fetched columns\nexport function fetchColumns(){return _fetchColumns.apply(this,arguments);}function _fetchColumns(){_fetchColumns=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var query,response,data,responseData,boards;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(columnsData===null)){_context.next=14;break;}// Fetch columns only if they haven't been fetched yet\nquery='{boards(ids: 5488627974) {name workspace {id name} columns {id title type settings_str}}}';_context.next=4;return fetch(\"https://api.monday.com/v2\",{method:'post',headers:{'Content-Type':'application/json','Authorization':'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk'// Replace with your API key\n},body:JSON.stringify({'query':query})});case 4:response=_context.sent;if(response.ok){_context.next=7;break;}throw new Error('Failed to fetch data');case 7:_context.next=9;return response.json();case 9:data=_context.sent;responseData=data.data;console.log(responseData);boards=responseData.boards;if(boards.length>0){columnsData=boards[0].columns;}else{columnsData=[];}case 14:return _context.abrupt(\"return\",columnsData);case 15:case\"end\":return _context.stop();}}},_callee);}));return _fetchColumns.apply(this,arguments);}export function fetchBoardAndGroupId(){return _fetchBoardAndGroupId.apply(this,arguments);}function _fetchBoardAndGroupId(){_fetchBoardAndGroupId=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var response,data,responseData,boardId,groupId;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return fetch(\"https://api.monday.com/v2\",{method:'post',headers:{'Content-Type':'application/json','Authorization':'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk'// Replace with your API key\n},body:JSON.stringify({'query':\"\\n            query {\\n              boards(ids: 5488627974) {\\n                id\\n                groups {\\n                  id\\n                  title\\n                }\\n              }\\n            }\\n          \"})});case 3:response=_context2.sent;if(response.ok){_context2.next=6;break;}throw new Error('Failed to fetch board and group data');case 6:_context2.next=8;return response.json();case 8:data=_context2.sent;responseData=data.data;boardId=responseData.boards[0].id;groupId=responseData.boards[0].groups[0].id;// You may need to adjust this to get the correct group\nreturn _context2.abrupt(\"return\",{boardId:boardId,groupId:groupId});case 15:_context2.prev=15;_context2.t0=_context2[\"catch\"](0);throw new Error('Error fetching board and group data: '+_context2.t0.message);case 18:case\"end\":return _context2.stop();}}},_callee2,null,[[0,15]]);}));return _fetchBoardAndGroupId.apply(this,arguments);}","map":{"version":3,"names":["columnsData","fetchColumns","query","fetch","method","headers","body","JSON","stringify","response","ok","Error","json","data","responseData","console","log","boards","length","columns","fetchBoardAndGroupId","boardId","id","groupId","groups","message"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/getids.js"],"sourcesContent":["let columnsData = null; // Variable to store the fetched columns\r\n\r\nexport async function fetchColumns() {\r\n  if (columnsData === null) {\r\n    // Fetch columns only if they haven't been fetched yet\r\n    const query = '{boards(ids: 5488627974) {name workspace {id name} columns {id title type settings_str}}}';\r\n\r\n    const response = await fetch(\"https://api.monday.com/v2\", {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk' // Replace with your API key\r\n      },\r\n      body: JSON.stringify({\r\n        'query': query\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n\r\n    const data = await response.json();\r\n    const responseData = data.data;\r\n    console.log(responseData);\r\n    const boards = responseData.boards;\r\n    if (boards.length > 0) {\r\n      columnsData = boards[0].columns;\r\n    } else {\r\n      columnsData = [];\r\n    }\r\n  }\r\n\r\n  return columnsData;\r\n}\r\n\r\nexport async function fetchBoardAndGroupId() {\r\n    try {\r\n      // Make an API call to fetch the boardId and groupId from Monday.com\r\n      const response = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'post',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk', // Replace with your API key\r\n        },\r\n        body: JSON.stringify({\r\n          'query': `\r\n            query {\r\n              boards(ids: 5488627974) {\r\n                id\r\n                groups {\r\n                  id\r\n                  title\r\n                }\r\n              }\r\n            }\r\n          `,\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch board and group data');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      const responseData = data.data;\r\n      const boardId = responseData.boards[0].id;\r\n      const groupId = responseData.boards[0].groups[0].id; // You may need to adjust this to get the correct group\r\n      return { boardId, groupId };\r\n    } catch (error) {\r\n      throw new Error('Error fetching board and group data: ' + error.message);\r\n    }\r\n  }"],"mappings":"gRAAA,GAAIA,YAAW,CAAG,IAAlB,CAAwB;AAExB,eAAsBC,aAAtB,+C,iGAAO,sLACDD,WAAW,GAAK,IADf,2BAEH;AACME,KAHH,CAGW,2FAHX,uBAKoBC,MAAK,CAAC,2BAAD,CAA8B,CACxDC,MAAM,CAAE,MADgD,CAExDC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEP,gBAAiB,qOAAsO;AAFhP,CAF+C,CAMxDC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnB,QAASN,KADU,CAAf,CANkD,CAA9B,CALzB,QAKGO,QALH,kBAgBEA,QAAQ,CAACC,EAhBX,8BAiBK,IAAIC,MAAJ,CAAU,sBAAV,CAjBL,8BAoBgBF,SAAQ,CAACG,IAAT,EApBhB,QAoBGC,IApBH,eAqBGC,YArBH,CAqBkBD,IAAI,CAACA,IArBvB,CAsBHE,OAAO,CAACC,GAAR,CAAYF,YAAZ,EACMG,MAvBH,CAuBYH,YAAY,CAACG,MAvBzB,CAwBH,GAAIA,MAAM,CAACC,MAAP,CAAgB,CAApB,CAAuB,CACrBlB,WAAW,CAAGiB,MAAM,CAAC,CAAD,CAAN,CAAUE,OAAxB,CACD,CAFD,IAEO,CACLnB,WAAW,CAAG,EAAd,CACD,CA5BE,wCA+BEA,WA/BF,yD,+CAkCP,eAAsBoB,qBAAtB,uD,iHAAO,iOAGsBjB,MAAK,CAAC,2BAAD,CAA8B,CACxDC,MAAM,CAAE,MADgD,CAExDC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEP,gBAAiB,qOAAuO;AAFjP,CAF+C,CAMxDC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnB,oOADmB,CAAf,CANkD,CAA9B,CAH3B,QAGKC,QAHL,mBAwBIA,QAAQ,CAACC,EAxBb,+BAyBO,IAAIC,MAAJ,CAAU,sCAAV,CAzBP,+BA4BkBF,SAAQ,CAACG,IAAT,EA5BlB,QA4BKC,IA5BL,gBA6BKC,YA7BL,CA6BoBD,IAAI,CAACA,IA7BzB,CA8BKQ,OA9BL,CA8BeP,YAAY,CAACG,MAAb,CAAoB,CAApB,EAAuBK,EA9BtC,CA+BKC,OA/BL,CA+BeT,YAAY,CAACG,MAAb,CAAoB,CAApB,EAAuBO,MAAvB,CAA8B,CAA9B,EAAiCF,EA/BhD,CA+BoD;AA/BpD,iCAgCM,CAAED,OAAO,CAAPA,OAAF,CAAWE,OAAO,CAAPA,OAAX,CAhCN,oEAkCK,IAAIZ,MAAJ,CAAU,wCAA0C,aAAMc,OAA1D,CAlCL,wE"},"metadata":{},"sourceType":"module"}