{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\Form.js\";\nimport React, { Component } from 'react';\nimport styles from './Form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault(); // Handle form submission, e.g., send data to a server\n\n      console.log(this.state);\n    };\n\n    this.state = {\n      columns: [],\n      // Initialize columns as an empty array\n      name: '',\n      email: ''\n    };\n  }\n\n  componentDidMount() {\n    let query = '{boards(ids: 5382001836) {columns {id title type settings_str}}}';\n    fetch(\"https://api.monday.com/v2\", {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk' // Replace with your API key\n\n      },\n      body: JSON.stringify({\n        'query': query\n      })\n    }).then(res => res.json()).then(data => {\n      const responseData = data.data;\n      const boards = responseData.boards;\n      const settingsStr = responseData.boards[0].columns[0].settings_str;\n      console.log(settingsStr);\n\n      if (boards.length > 0) {\n        const columns = boards[0].columns;\n        this.setState({\n          columns\n        }); // Set the columns in the component's state\n      } else {\n        console.log('No data available');\n      }\n\n      if (settingsStr) {\n        try {\n          const settings = JSON.parse(settingsStr);\n          const labels = settings.labels; // 'labels' now contains the labels (status values)\n\n          console.log(labels); // Use the 'labels' in your code to populate the dropdown options\n          // For example, if you are using React and 'labels' is in your component's state:\n          // this.setState({ dropdownOptions: Object.values(labels) });\n        } catch (error) {\n          console.error('Error parsing settings_str:', error);\n        }\n      }\n    }).catch(error => {\n      console.error('Error Fetching data.', error);\n    });\n  }\n\n  render() {\n    const {\n      columns\n    } = this.state; // Get columns from the component's state\n\n    console.log(columns);\n    const formContainerStyle = {\n      display: 'flex',\n      flexDirection: 'column',\n      // Align fields vertically\n      alignItems: 'center' // Center-align fields horizontally\n\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: formContainerStyle,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [columns.map(column => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: column.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), column.type === 'color' ? /*#__PURE__*/_jsxDEV(\"select\", {\n            name: column.title,\n            value: this.state[column.title],\n            onChange: this.handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"option1\",\n              children: \"Option 1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"option2\",\n              children: \"Option 2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"option3\",\n              children: \"Option 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: column.type,\n            name: column.title,\n            value: this.state[column.title],\n            onChange: this.handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this)]\n        }, column.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"names":["React","Component","styles","Form","constructor","props","handleInputChange","e","setState","target","name","value","handleSubmit","preventDefault","console","log","state","columns","email","componentDidMount","query","fetch","method","headers","body","JSON","stringify","then","res","json","data","responseData","boards","settingsStr","settings_str","length","settings","parse","labels","error","catch","render","formContainerStyle","display","flexDirection","alignItems","map","column","title","type","id"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/Form.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport styles from './Form.css';\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [], // Initialize columns as an empty array\r\n      name: '',\r\n      email: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let query = '{boards(ids: 5382001836) {columns {id title type settings_str}}}';\r\n\r\n    fetch(\"https://api.monday.com/v2\", {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk' // Replace with your API key\r\n      },\r\n      body: JSON.stringify({\r\n        'query': query\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const responseData = data.data;\r\n        const boards = responseData.boards;\r\n        const settingsStr = responseData.boards[0].columns[0].settings_str;\r\n        console.log(settingsStr);\r\n        if (boards.length > 0) {\r\n          const columns = boards[0].columns;\r\n          this.setState({ columns }); // Set the columns in the component's state\r\n        } else {\r\n          console.log('No data available');\r\n        }\r\n        if (settingsStr) {\r\n          try {\r\n            const settings = JSON.parse(settingsStr);\r\n            const labels = settings.labels;\r\n        \r\n            // 'labels' now contains the labels (status values)\r\n            console.log(labels);\r\n        \r\n            // Use the 'labels' in your code to populate the dropdown options\r\n            // For example, if you are using React and 'labels' is in your component's state:\r\n            // this.setState({ dropdownOptions: Object.values(labels) });\r\n          } catch (error) {\r\n            console.error('Error parsing settings_str:', error);\r\n          }\r\n        }\r\n\r\n      })\r\n      .catch(error => {\r\n        console.error('Error Fetching data.', error);\r\n      });\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission, e.g., send data to a server\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    const { columns } = this.state; // Get columns from the component's state\r\n    console.log(columns);\r\n    const formContainerStyle = {\r\n      display: 'flex',\r\n      flexDirection: 'column', // Align fields vertically\r\n      alignItems: 'center', // Center-align fields horizontally\r\n    };\r\n\r\n    return (\r\n      <div style={formContainerStyle}>\r\n        <form onSubmit={this.handleSubmit}>\r\n          {/* Render input fields based on columns */}\r\n          {columns.map(column => (\r\n            <div key={column.id}>\r\n              <label>{column.title}</label>\r\n              {column.type === 'color' ? (\r\n                <select\r\n                  name={column.title}\r\n                  value={this.state[column.title]}\r\n                  onChange={this.handleInputChange}\r\n                >\r\n                  {/* You can render options for the dropdown here */}\r\n                  <option value=\"option1\">Option 1</option>\r\n                  <option value=\"option2\">Option 2</option>\r\n                  <option value=\"option3\">Option 3</option>\r\n                </select>\r\n              ) : (\r\n                <input\r\n                  type={column.type}\r\n                  name={column.title}\r\n                  value={this.state[column.title]}\r\n                  onChange={this.handleInputChange}\r\n                />\r\n              )}\r\n            </div>\r\n          ))}\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,YAAnB;;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;EAC3BG,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAwDnBC,iBAxDmB,GAwDEC,CAAD,IAAO;MACzB,KAAKC,QAAL,CAAc;QAAE,CAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;MAA5B,CAAd;IACD,CA1DkB;;IAAA,KA4DnBC,YA5DmB,GA4DHL,CAAD,IAAO;MACpBA,CAAC,CAACM,cAAF,GADoB,CAEpB;;MACAC,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;IACD,CAhEkB;;IAEjB,KAAKA,KAAL,GAAa;MACXC,OAAO,EAAE,EADE;MACE;MACbP,IAAI,EAAE,EAFK;MAGXQ,KAAK,EAAE;IAHI,CAAb;EAKD;;EAEDC,iBAAiB,GAAG;IAClB,IAAIC,KAAK,GAAG,kEAAZ;IAEAC,KAAK,CAAC,2BAAD,EAA8B;MACjCC,MAAM,EAAE,MADyB;MAEjCC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,iBAAiB,qOAFV,CAEgP;;MAFhP,CAFwB;MAMjCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnB,SAASN;MADU,CAAf;IAN2B,CAA9B,CAAL,CAUGO,IAVH,CAUQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAVf,EAWGF,IAXH,CAWQG,IAAI,IAAI;MACZ,MAAMC,YAAY,GAAGD,IAAI,CAACA,IAA1B;MACA,MAAME,MAAM,GAAGD,YAAY,CAACC,MAA5B;MACA,MAAMC,WAAW,GAAGF,YAAY,CAACC,MAAb,CAAoB,CAApB,EAAuBf,OAAvB,CAA+B,CAA/B,EAAkCiB,YAAtD;MACApB,OAAO,CAACC,GAAR,CAAYkB,WAAZ;;MACA,IAAID,MAAM,CAACG,MAAP,GAAgB,CAApB,EAAuB;QACrB,MAAMlB,OAAO,GAAGe,MAAM,CAAC,CAAD,CAAN,CAAUf,OAA1B;QACA,KAAKT,QAAL,CAAc;UAAES;QAAF,CAAd,EAFqB,CAEO;MAC7B,CAHD,MAGO;QACLH,OAAO,CAACC,GAAR,CAAY,mBAAZ;MACD;;MACD,IAAIkB,WAAJ,EAAiB;QACf,IAAI;UACF,MAAMG,QAAQ,GAAGX,IAAI,CAACY,KAAL,CAAWJ,WAAX,CAAjB;UACA,MAAMK,MAAM,GAAGF,QAAQ,CAACE,MAAxB,CAFE,CAIF;;UACAxB,OAAO,CAACC,GAAR,CAAYuB,MAAZ,EALE,CAOF;UACA;UACA;QACD,CAVD,CAUE,OAAOC,KAAP,EAAc;UACdzB,OAAO,CAACyB,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;QACD;MACF;IAEF,CAtCH,EAuCGC,KAvCH,CAuCSD,KAAK,IAAI;MACdzB,OAAO,CAACyB,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;IACD,CAzCH;EA0CD;;EAYDE,MAAM,GAAG;IACP,MAAM;MAAExB;IAAF,IAAc,KAAKD,KAAzB,CADO,CACyB;;IAChCF,OAAO,CAACC,GAAR,CAAYE,OAAZ;IACA,MAAMyB,kBAAkB,GAAG;MACzBC,OAAO,EAAE,MADgB;MAEzBC,aAAa,EAAE,QAFU;MAEA;MACzBC,UAAU,EAAE,QAHa,CAGH;;IAHG,CAA3B;IAMA,oBACE;MAAK,KAAK,EAAEH,kBAAZ;MAAA,uBACE;QAAM,QAAQ,EAAE,KAAK9B,YAArB;QAAA,WAEGK,OAAO,CAAC6B,GAAR,CAAYC,MAAM,iBACjB;UAAA,wBACE;YAAA,UAAQA,MAAM,CAACC;UAAf;YAAA;YAAA;YAAA;UAAA,QADF,EAEGD,MAAM,CAACE,IAAP,KAAgB,OAAhB,gBACC;YACE,IAAI,EAAEF,MAAM,CAACC,KADf;YAEE,KAAK,EAAE,KAAKhC,KAAL,CAAW+B,MAAM,CAACC,KAAlB,CAFT;YAGE,QAAQ,EAAE,KAAK1C,iBAHjB;YAAA,wBAME;cAAQ,KAAK,EAAC,SAAd;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QANF,eAOE;cAAQ,KAAK,EAAC,SAAd;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAPF,eAQE;cAAQ,KAAK,EAAC,SAAd;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QARF;UAAA;YAAA;YAAA;YAAA;UAAA,QADD,gBAYC;YACE,IAAI,EAAEyC,MAAM,CAACE,IADf;YAEE,IAAI,EAAEF,MAAM,CAACC,KAFf;YAGE,KAAK,EAAE,KAAKhC,KAAL,CAAW+B,MAAM,CAACC,KAAlB,CAHT;YAIE,QAAQ,EAAE,KAAK1C;UAJjB;YAAA;YAAA;YAAA;UAAA,QAdJ;QAAA,GAAUyC,MAAM,CAACG,EAAjB;UAAA;UAAA;UAAA;QAAA,QADD,CAFH,eA0BE;UAAQ,IAAI,EAAC,QAAb;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QA1BF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAgCD;;AA5G0B;;AA+G7B,eAAe/C,IAAf"},"metadata":{},"sourceType":"module"}