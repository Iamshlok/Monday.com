{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\Form.js\";\nimport React, { Component } from 'react';\nimport './Form.css';\nimport { fetchColumns, fetchBoardAndGroupId } from './getids';\nimport { createItem } from './mutation';\nimport PopupMessage from './PopupMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePopupClose = () => {\n      this.setState({\n        showPopup: false,\n        popupMessage: ''\n      });\n    };\n\n    this.handleBoardRelationChange = (e, column) => {\n      const selectedItemId = e.target.value;\n      const selectedBoardItems = this.state[column.id].items;\n      const selectedItem = selectedBoardItems.find(item => item.id === selectedItemId);\n      this.setState(prevState => ({ ...prevState,\n        [column.id]: {\n          selectedItemId,\n          selectedItem,\n          items: prevState[column.id].items\n        }\n      }));\n    };\n\n    this.handleInputChange = (e, column) => {\n      const {\n        value\n      } = e.target;\n      this.setState(prevState => ({ ...prevState,\n        [column.id]: value\n      }));\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const {\n        boardId,\n        groupId,\n        columns,\n        ...values\n      } = this.state; // Filter out columns with values\n\n      const columnValues = {};\n      columns.forEach(column => {\n        const columnId = column.id;\n\n        if (values[columnId]) {\n          columnValues[columnId] = values[columnId];\n        }\n      });\n\n      try {\n        const newItem = await createItem(boardId, groupId, columnValues);\n\n        if (newItem) {\n          this.setState({\n            successMessage: 'Item created successfully',\n            errorMessage: '',\n            showPopup: true,\n            popupMessage: 'Item created successfully',\n            popupType: 'success'\n          });\n          this.resetFormState();\n          setTimeout(() => {\n            this.setState({\n              successMessage: ''\n            });\n          }, 3000);\n        } else {\n          this.setState({\n            errorMessage: 'Error creating item',\n            successMessage: '',\n            showPopup: true,\n            popupMessage: 'Error creating item',\n            popupType: 'error'\n          });\n        }\n      } catch (error) {\n        console.error('Error creating item:', error);\n        this.setState({\n          errorMessage: 'Error creating item',\n          successMessage: '',\n          showPopup: true,\n          popupMessage: 'Error creating item',\n          popupType: 'error'\n        });\n      }\n    };\n\n    this.state = {\n      columns: [],\n      boardId: null,\n      // Initialize boardId as null\n      groupId: null,\n      // Initialize groupId as null\n      successMessage: '',\n      // Add this\n      errorMessage: '',\n      // Add this\n      showPopup: false,\n      // Add a flag to control the popup visibility\n      popupMessage: '',\n      // Message for the popup\n      popupType: 'success',\n      // Type of the popup (success or error)\n      ...props\n    };\n  } // ...\n\n\n  // ...\n  async componentDidMount() {\n    try {\n      const columns = await fetchColumns();\n      const {\n        boardId,\n        groupId\n      } = await fetchBoardAndGroupId(); // Fetch boardId and groupId\n\n      console.log(columns);\n      const initialValues = {};\n      const boardRelationColumns = columns.filter(column => column.type === 'board-relation'); // Fetch and populate data for board-relation columns\n\n      for (const boardRelationColumn of boardRelationColumns) {\n        const {\n          boardIds\n        } = JSON.parse(boardRelationColumn.settings_str);\n        const boardItems = await this.fetchBoardItems(boardIds[0]); // Assuming only one board ID for simplicity\n\n        initialValues[boardRelationColumn.id] = boardItems;\n      } // Initialize other columns\n\n\n      columns.forEach(column => {\n        if (column.type !== 'board-relation') {\n          initialValues[column.id] = null;\n        }\n      });\n      this.setState({\n        columns,\n        boardId,\n        groupId,\n        ...initialValues\n      });\n    } catch (error) {\n      console.error('Error Fetching data.', error);\n    }\n  }\n\n  async fetchBoardItems(boardId) {\n    try {\n      // Fetch items from Monday.com based on the boardId\n      const response = await fetch(`https://api.monday.com/v2/boards/${boardId}/items`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk' // Replace with your Monday.com API key\n\n        }\n      });\n      const data = await response.json(); // Extract item id and name from the response\n\n      const boardItems = data.data.map(item => ({\n        id: item.id,\n        name: item.name\n      }));\n      return boardItems;\n    } catch (error) {\n      console.error('Error fetching board items:', error);\n      return [];\n    }\n  }\n\n  resetFormState() {\n    const {\n      columns\n    } = this.state;\n    const initialValues = {};\n    columns.forEach(column => {\n      initialValues[column.id] = null;\n    });\n    this.setState({\n      successMessage: '',\n      errorMessage: '',\n      ...initialValues\n    });\n  }\n\n  render() {\n    const {\n      columns,\n      successMessage,\n      errorMessage,\n      showPopup,\n      popupMessage,\n      popupType\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-row\",\n          children: columns.map((column, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this), column.type === 'board-relation' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              name: column.title,\n              value: this.state[column.id] ? this.state[column.id].selectedItemId : '',\n              onChange: e => this.handleBoardRelationChange(e, column),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select an option\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 21\n              }, this), \" \", this.state[column.id] && this.state[column.id].items.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: item.id,\n                children: item.name\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 19\n            }, this) : column.type === 'color' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              name: column.title,\n              value: this.state[column.id] || '',\n              onChange: e => this.handleInputChange(e, column),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select an option\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 21\n              }, this), \" \", column.settings_str ? Object.keys(JSON.parse(column.settings_str).labels).map(labelKey => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: labelKey,\n                children: JSON.parse(column.settings_str).labels[labelKey]\n              }, labelKey, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 25\n              }, this)) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n              type: column.type === 'color' ? 'text' : column.type,\n              name: column.title,\n              value: this.state[column.id] || '',\n              onChange: e => this.handleInputChange(e, column)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this)]\n          }, column.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-submit\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 28\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 26\n      }, this), showPopup && /*#__PURE__*/_jsxDEV(PopupMessage, {\n        message: popupMessage,\n        type: popupType,\n        onClose: this.handlePopupClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"names":["React","Component","fetchColumns","fetchBoardAndGroupId","createItem","PopupMessage","Form","constructor","props","handlePopupClose","setState","showPopup","popupMessage","handleBoardRelationChange","e","column","selectedItemId","target","value","selectedBoardItems","state","id","items","selectedItem","find","item","prevState","handleInputChange","handleSubmit","preventDefault","boardId","groupId","columns","values","columnValues","forEach","columnId","newItem","successMessage","errorMessage","popupType","resetFormState","setTimeout","error","console","componentDidMount","log","initialValues","boardRelationColumns","filter","type","boardRelationColumn","boardIds","JSON","parse","settings_str","boardItems","fetchBoardItems","response","fetch","method","headers","data","json","map","name","render","index","title","Object","keys","labels","labelKey"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/Form.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { fetchColumns, fetchBoardAndGroupId } from './getids';\r\nimport { createItem } from './mutation';\r\nimport PopupMessage from './PopupMessage';\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [],\r\n      boardId: null, // Initialize boardId as null\r\n      groupId: null, // Initialize groupId as null\r\n      successMessage: '', // Add this\r\n      errorMessage: '', // Add this\r\n      showPopup: false, // Add a flag to control the popup visibility\r\n      popupMessage: '', // Message for the popup\r\n      popupType: 'success', // Type of the popup (success or error)\r\n      ...props,\r\n    };\r\n  }\r\n\r\n  // ...\r\n\r\n  handlePopupClose = () => {\r\n    this.setState({\r\n      showPopup: false,\r\n      popupMessage: '',\r\n    });\r\n  };\r\n\r\n  // ...\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const columns = await fetchColumns();\r\n      const { boardId, groupId } = await fetchBoardAndGroupId(); // Fetch boardId and groupId\r\n      console.log(columns);\r\n      const initialValues = {};\r\n      const boardRelationColumns = columns.filter((column) => column.type === 'board-relation');\r\n  \r\n      // Fetch and populate data for board-relation columns\r\n      for (const boardRelationColumn of boardRelationColumns) {\r\n        const { boardIds } = JSON.parse(boardRelationColumn.settings_str);\r\n        const boardItems = await this.fetchBoardItems(boardIds[0]); // Assuming only one board ID for simplicity\r\n        initialValues[boardRelationColumn.id] = boardItems;\r\n      }\r\n  \r\n      // Initialize other columns\r\n      columns.forEach((column) => {\r\n        if (column.type !== 'board-relation') {\r\n          initialValues[column.id] = null;\r\n        }\r\n      });\r\n  \r\n      this.setState({ columns, boardId, groupId, ...initialValues });\r\n    } catch (error) {\r\n      console.error('Error Fetching data.', error);\r\n    }\r\n  }\r\n  \r\n  handleBoardRelationChange = (e, column) => {\r\n    const selectedItemId = e.target.value;\r\n    const selectedBoardItems = this.state[column.id].items;\r\n    const selectedItem = selectedBoardItems.find(item => item.id === selectedItemId);\r\n  \r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: {\r\n        selectedItemId,\r\n        selectedItem,\r\n        items: prevState[column.id].items,\r\n      },\r\n    }));\r\n  };  \r\n\r\n  async fetchBoardItems(boardId) {\r\n    try {\r\n      // Fetch items from Monday.com based on the boardId\r\n      const response = await fetch(`https://api.monday.com/v2/boards/${boardId}/items`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk', // Replace with your Monday.com API key\r\n        },\r\n      });\r\n  \r\n      const data = await response.json();\r\n  \r\n      // Extract item id and name from the response\r\n      const boardItems = data.data.map((item) => ({\r\n        id: item.id,\r\n        name: item.name,\r\n      }));\r\n  \r\n      return boardItems;\r\n    } catch (error) {\r\n      console.error('Error fetching board items:', error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  handleInputChange = (e, column) => {\r\n    const { value } = e.target;\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      [column.id]: value,\r\n    }));\r\n  }\r\n\r\n  resetFormState() {\r\n    const { columns } = this.state;\r\n    const initialValues = {};\r\n    columns.forEach((column) => {\r\n      initialValues[column.id] = null;\r\n    });\r\n\r\n    this.setState({ successMessage: '', errorMessage: '', ...initialValues });\r\n  }\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { boardId, groupId, columns, ...values } = this.state;\r\n  \r\n    // Filter out columns with values\r\n    const columnValues = {};\r\n    columns.forEach((column) => {\r\n      const columnId = column.id;\r\n      if (values[columnId]) {\r\n        columnValues[columnId] = values[columnId];\r\n      }\r\n    });\r\n  \r\n    try {\r\n      const newItem = await createItem(boardId, groupId, columnValues);\r\n  \r\n      if (newItem) {\r\n        this.setState({\r\n          successMessage: 'Item created successfully',\r\n          errorMessage: '',\r\n          showPopup: true,\r\n          popupMessage: 'Item created successfully',\r\n          popupType: 'success',\r\n        });\r\n        this.resetFormState();\r\n        setTimeout(() => {\r\n          this.setState({ successMessage: '' });\r\n        }, 3000);\r\n      } else {\r\n        this.setState({ errorMessage: 'Error creating item', successMessage: '', \r\n        showPopup: true,\r\n        popupMessage: 'Error creating item',\r\n        popupType: 'error',});\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating item:', error);\r\n      this.setState({ errorMessage: 'Error creating item', successMessage: '',showPopup: true,\r\n      popupMessage: 'Error creating item',\r\n      popupType: 'error', });\r\n    }\r\n  }\r\n  \r\n\r\n  render() {\r\n    const { columns, successMessage, errorMessage, showPopup, popupMessage, popupType } = this.state;\r\n  \r\n    return (\r\n      <div className=\"form-container\">\r\n        <h1>{/* Add your form title here */}</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-row\">\r\n            {columns.map((column, index) => (\r\n              <div key={column.id} className=\"form-input\">\r\n                <label>{column.title}</label>\r\n                {column.type === 'board-relation' ? (\r\n                  <select\r\n                    name={column.title}\r\n                    value={this.state[column.id] ? this.state[column.id].selectedItemId : ''}\r\n                    onChange={(e) => this.handleBoardRelationChange(e, column)}\r\n                  >\r\n                    <option value=\"\">Select an option</option> {/* Blank initial option */}\r\n                    {this.state[column.id] && this.state[column.id].items.map((item) => (\r\n                      <option\r\n                        key={item.id}\r\n                        value={item.id}\r\n                      >\r\n                        {item.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ) : column.type === 'color' ? (\r\n                  <select\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  >\r\n                    <option value=\"\">Select an option</option> {/* Blank initial option */}\r\n                    {column.settings_str ? (\r\n                      Object.keys(JSON.parse(column.settings_str).labels).map((labelKey) => (\r\n                        <option\r\n                          key={labelKey}\r\n                          value={labelKey}\r\n                        >\r\n                          {JSON.parse(column.settings_str).labels[labelKey]}\r\n                        </option>\r\n                      ))\r\n                    ) : null}\r\n                  </select>\r\n                ) : (\r\n                  <input\r\n                    type={column.type === 'color' ? 'text' : column.type}\r\n                    name={column.title}\r\n                    value={this.state[column.id] || ''}\r\n                    onChange={(e) => this.handleInputChange(e, column)}\r\n                  />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"form-submit\">\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n        </form>\r\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        {showPopup && (\r\n          <PopupMessage message={popupMessage} type={popupType} onClose={this.handlePopupClose} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}