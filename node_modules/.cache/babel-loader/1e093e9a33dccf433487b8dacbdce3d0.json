{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\TableCreation.js\";\nimport React from 'react';\nimport './TableCreation.css'; // Import the CSS file for styling\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TableCreation = _ref => {\n  let {\n    groupedItems\n  } = _ref;\n\n  const extractValue = col => {\n    if (!col.value) return ''; // Handle null or undefined values\n\n    try {\n      const parsedValue = JSON.parse(col.value);\n\n      if (parsedValue) {\n        if (col.type === 'date') {\n          return parsedValue.date || '';\n        } else if (col.type === 'numeric') {\n          return parsedValue || '';\n        } else if (col.type === 'color') {\n          return parsedValue.index !== undefined ? parsedValue.index : '';\n        } else if (col.type === 'multiple-person') {\n          return Array.isArray(parsedValue.personsAndTeams) && parsedValue.personsAndTeams.length ? parsedValue.personsAndTeams[0].id : '';\n        } else if (col.type === 'board-relation') {\n          const linkedPulseIds = parsedValue.linkedPulseIds;\n\n          if (Array.isArray(linkedPulseIds) && linkedPulseIds.length > 0) {\n            return linkedPulseIds[0].linkedPulseId;\n          } else {\n            return '';\n          }\n        }\n      }\n    } catch (error) {\n      console.error('JSON parsing error:', error);\n      return col.value; // Return the original string value if parsing fails\n    }\n\n    return col.value; // Return the value as is for other data types\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Monday.com Board Tables\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), Object.keys(groupedItems).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(groupedItems).map(groupId => {\n        const group = groupedItems[groupId];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Group: \", group.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"custom-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Item Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 23\n                }, this), group.items[0].column_values.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: col.title\n                }, col.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: group.items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 25\n                }, this), item.column_values.map(col => /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: extractValue(col)\n                }, col.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 27\n                }, this))]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this)]\n        }, groupId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TableCreation;\nexport default TableCreation;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableCreation\");","map":{"version":3,"names":["React","TableCreation","groupedItems","extractValue","col","value","parsedValue","JSON","parse","type","date","index","undefined","Array","isArray","personsAndTeams","length","id","linkedPulseIds","linkedPulseId","error","console","Object","keys","map","groupId","group","title","items","column_values","item","name"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/TableCreation.js"],"sourcesContent":["import React from 'react';\r\nimport './TableCreation.css'; // Import the CSS file for styling\r\n\r\nconst TableCreation = ({ groupedItems }) => {\r\n  const extractValue = (col) => {\r\n    if (!col.value) return ''; // Handle null or undefined values\r\n\r\n    try {\r\n      const parsedValue = JSON.parse(col.value);\r\n      if (parsedValue) {\r\n        if (col.type === 'date') {\r\n          return parsedValue.date || '';\r\n        } else if (col.type === 'numeric') {\r\n          return parsedValue || '';\r\n        } else if (col.type === 'color') {\r\n          return parsedValue.index !== undefined ? parsedValue.index : '';\r\n        } else if (col.type === 'multiple-person') {\r\n          return Array.isArray(parsedValue.personsAndTeams) && parsedValue.personsAndTeams.length\r\n            ? parsedValue.personsAndTeams[0].id\r\n            : '';\r\n        }else if (col.type === 'board-relation') {\r\n            const linkedPulseIds = parsedValue.linkedPulseIds;\r\n            if (Array.isArray(linkedPulseIds) && linkedPulseIds.length > 0) {\r\n              return linkedPulseIds[0].linkedPulseId;\r\n            } else {\r\n              return '';\r\n            }\r\n          }\r\n      }\r\n    } catch (error) {\r\n      console.error('JSON parsing error:', error);\r\n      return col.value; // Return the original string value if parsing fails\r\n    }\r\n\r\n    return col.value; // Return the value as is for other data types\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Monday.com Board Tables</h1>\r\n      {Object.keys(groupedItems).length === 0 ? (\r\n        <p>Loading data...</p>\r\n      ) : (\r\n        <div>\r\n          {Object.keys(groupedItems).map((groupId) => {\r\n            const group = groupedItems[groupId];\r\n            return (\r\n              <div key={groupId}>\r\n                <h2>Group: {group.title}</h2>\r\n                <table className=\"custom-table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Item Name</th>\r\n                      {group.items[0].column_values.map((col) => (\r\n                        <th key={col.id}>{col.title}</th>\r\n                      ))}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {group.items.map((item) => (\r\n                      <tr key={item.id}>\r\n                        {/* <td>{item.id}</td> */}\r\n                        <td>{item.name}</td>\r\n                        {item.column_values.map((col) => (\r\n                          <td key={col.id}>{extractValue(col)}</td>\r\n                        ))}\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableCreation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}