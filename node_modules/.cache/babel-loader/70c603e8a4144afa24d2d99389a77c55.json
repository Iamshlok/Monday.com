{"ast":null,"code":"export async function createItem(boardId, groupId, columnData) {\n  // Filter out columns with null values\n  const filteredColumnData = columnData.filter(_ref => {\n    let {\n      value\n    } = _ref;\n    return value !== null && value !== '';\n  }); // Construct the mutation query dynamically\n\n  const itemName = filteredColumnData.find(column => column.id === 'name').value;\n  const columnValues = filteredColumnData.map(_ref2 => {\n    let {\n      id,\n      value,\n      type\n    } = _ref2;\n\n    if (type === 'board-relation' && typeof value === 'object' && value !== null) {\n      return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"linkedPulseIds\\\\\\\":\\\\\\\"${value.selectedItemId}\\\\\\\"}`;\n    } else {\n      return `\\\\\\\"${id}\\\\\\\": \\\\\\\"${value}\\\\\\\"`;\n    }\n  }).join(', ');\n  const query = `mutation {\n    create_item (\n      board_id: ${boardId},\n      group_id: \"${groupId}\",\n      item_name: \"${itemName.replace(/\"/g, '\\\\\"')}\",\n      column_values: \"{${columnValues}}\"\n    ) {\n      id\n    }\n  }`; // Make the API request with the dynamic query\n\n  const response = await fetch(\"https://api.monday.com/v2\", {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk' // Replace with your API key\n\n    },\n    body: JSON.stringify({\n      'query': query\n    })\n  });\n\n  if (!response.ok) {\n    const responseData = await response.json();\n    console.log(responseData);\n    throw new Error('Failed to create item');\n  }\n\n  const data = await response.json();\n  return data.data;\n}","map":{"version":3,"names":["createItem","boardId","groupId","columnData","filteredColumnData","filter","value","itemName","find","column","id","columnValues","map","type","selectedItemId","join","query","replace","response","fetch","method","headers","body","JSON","stringify","ok","responseData","json","console","log","Error","data"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/mutation.js"],"sourcesContent":["export async function createItem(boardId, groupId, columnData) {\r\n  // Filter out columns with null values\r\n  const filteredColumnData = columnData.filter(({ value }) => value !== null && value !== '');\r\n\r\n  // Construct the mutation query dynamically\r\n  const itemName = filteredColumnData.find(column => column.id === 'name').value;\r\n\r\n  const columnValues = filteredColumnData\r\n    .map(({ id, value, type }) => {\r\n      if (type === 'board-relation' && typeof value === 'object' && value !== null) {\r\n        return `\\\\\\\"${id}\\\\\\\":{\\\\\\\"linkedPulseIds\\\\\\\":\\\\\\\"${value.selectedItemId}\\\\\\\"}`;\r\n      } else {\r\n        return `\\\\\\\"${id}\\\\\\\": \\\\\\\"${value}\\\\\\\"`;\r\n      }\r\n    })\r\n    .join(', ');\r\n\r\n  const query = `mutation {\r\n    create_item (\r\n      board_id: ${boardId},\r\n      group_id: \"${groupId}\",\r\n      item_name: \"${itemName.replace(/\"/g, '\\\\\"')}\",\r\n      column_values: \"{${columnValues}}\"\r\n    ) {\r\n      id\r\n    }\r\n  }`;\r\n\r\n  // Make the API request with the dynamic query\r\n  const response = await fetch(\"https://api.monday.com/v2\", {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTk3MzkwMCwiYWFpIjoxMSwidWlkIjo1MDc0MDc5NiwiaWFkIjoiMjAyMy0xMC0yNlQxMTozOToxNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTg2ODA3NDQsInJnbiI6InVzZTEifQ.YqNGkoV6ioF5pgYl_F9t32cOSUxaX_ETL_iPmpEjBOk', // Replace with your API key\r\n    },\r\n    body: JSON.stringify({\r\n      'query': query,\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const responseData = await response.json();\r\n    console.log(responseData);\r\n    throw new Error('Failed to create item');\r\n  }\r\n\r\n  const data = await response.json();\r\n  return data.data;\r\n}\r\n"],"mappings":"AAAA,OAAO,eAAeA,UAAf,CAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,UAA5C,EAAwD;EAC7D;EACA,MAAMC,kBAAkB,GAAGD,UAAU,CAACE,MAAX,CAAkB;IAAA,IAAC;MAAEC;IAAF,CAAD;IAAA,OAAeA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,EAA3C;EAAA,CAAlB,CAA3B,CAF6D,CAI7D;;EACA,MAAMC,QAAQ,GAAGH,kBAAkB,CAACI,IAAnB,CAAwBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAc,MAAhD,EAAwDJ,KAAzE;EAEA,MAAMK,YAAY,GAAGP,kBAAkB,CACpCQ,GADkB,CACd,SAAyB;IAAA,IAAxB;MAAEF,EAAF;MAAMJ,KAAN;MAAaO;IAAb,CAAwB;;IAC5B,IAAIA,IAAI,KAAK,gBAAT,IAA6B,OAAOP,KAAP,KAAiB,QAA9C,IAA0DA,KAAK,KAAK,IAAxE,EAA8E;MAC5E,OAAQ,OAAMI,EAAG,oCAAmCJ,KAAK,CAACQ,cAAe,OAAzE;IACD,CAFD,MAEO;MACL,OAAQ,OAAMJ,EAAG,aAAYJ,KAAM,MAAnC;IACD;EACF,CAPkB,EAQlBS,IARkB,CAQb,IARa,CAArB;EAUA,MAAMC,KAAK,GAAI;AACjB;AACA,kBAAkBf,OAAQ;AAC1B,mBAAmBC,OAAQ;AAC3B,oBAAoBK,QAAQ,CAACU,OAAT,CAAiB,IAAjB,EAAuB,KAAvB,CAA8B;AAClD,yBAAyBN,YAAa;AACtC;AACA;AACA;AACA,IATE,CAjB6D,CA4B7D;;EACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAAD,EAA8B;IACxDC,MAAM,EAAE,MADgD;IAExDC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEP,iBAAiB,qOAFV,CAEiP;;IAFjP,CAF+C;IAMxDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnB,SAASR;IADU,CAAf;EANkD,CAA9B,CAA5B;;EAWA,IAAI,CAACE,QAAQ,CAACO,EAAd,EAAkB;IAChB,MAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAA3B;IACAC,OAAO,CAACC,GAAR,CAAYH,YAAZ;IACA,MAAM,IAAII,KAAJ,CAAU,uBAAV,CAAN;EACD;;EAED,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACS,IAAT,EAAnB;EACA,OAAOI,IAAI,CAACA,IAAZ;AACD"},"metadata":{},"sourceType":"module"}