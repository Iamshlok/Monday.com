{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\TableCreation.js\";\nimport React, { Component } from 'react';\nimport './TableCreation.css'; // Import the CSS file for styling\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TableCreation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.extractValue = col => {// Your existing extractValue logic\n    };\n\n    this.handleCheckboxChange = itemId => {\n      const {\n        selectedItems\n      } = this.state;\n\n      if (selectedItems.has(itemId)) {\n        selectedItems.delete(itemId);\n      } else {\n        selectedItems.add(itemId);\n      }\n\n      this.setState({\n        selectedItems\n      });\n    };\n\n    this.populateForm = () => {\n      // Implement the logic to populate the form with selected items\n      // You can access the selected items from this.state.selectedItems\n      // For example, iterate through the selected items and collect their data\n      // Then, pass this data to the Form component to populate the fields\n      const {\n        selectedItems\n      } = this.state;\n      const selectedData = [];\n\n      for (const itemId of selectedItems) {\n        // Retrieve the data for the selected item and collect it in selectedData\n        // You can use the groupedItems or other data sources for this\n        // Example:\n        const selectedItemData = this.props.groupedItems[itemId];\n        selectedData.push(selectedItemData);\n      } // Call the populateForm function from the parent component\n\n\n      this.props.populateForm(selectedData);\n    };\n\n    this.state = {\n      selectedItems: new Set()\n    };\n  }\n\n  render() {\n    const {\n      groupedItems,\n      boardName,\n      workspaceName\n    } = this.props;\n    const {\n      selectedItems\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Board Name: \", boardName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), Object.keys(groupedItems).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(groupedItems).map(groupId => {\n          const group = groupedItems[groupId];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Group: \", group.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"custom-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Select\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Item Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 65,\n                    columnNumber: 25\n                  }, this), group.items[0].column_values.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: col.title\n                  }, col.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 27\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: group.items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      onChange: () => this.handleCheckboxChange(item.id),\n                      checked: selectedItems.has(item.id)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 75,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: item.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 81,\n                    columnNumber: 27\n                  }, this), item.column_values.map(col => /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: this.extractValue(col)\n                  }, col.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 29\n                  }, this))]\n                }, item.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 19\n            }, this)]\n          }, groupId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.populateForm,\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TableCreation;","map":{"version":3,"names":["React","Component","TableCreation","constructor","props","extractValue","col","handleCheckboxChange","itemId","selectedItems","state","has","delete","add","setState","populateForm","selectedData","selectedItemData","groupedItems","push","Set","render","boardName","workspaceName","Object","keys","length","map","groupId","group","title","items","column_values","id","item","name"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/TableCreation.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './TableCreation.css'; // Import the CSS file for styling\r\n\r\nclass TableCreation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedItems: new Set(),\r\n    };\r\n  }\r\n\r\n  extractValue = (col) => {\r\n    // Your existing extractValue logic\r\n  };\r\n\r\n  handleCheckboxChange = (itemId) => {\r\n    const { selectedItems } = this.state;\r\n    if (selectedItems.has(itemId)) {\r\n      selectedItems.delete(itemId);\r\n    } else {\r\n      selectedItems.add(itemId);\r\n    }\r\n    this.setState({ selectedItems });\r\n  };\r\n\r\n  populateForm = () => {\r\n    // Implement the logic to populate the form with selected items\r\n    // You can access the selected items from this.state.selectedItems\r\n    // For example, iterate through the selected items and collect their data\r\n    // Then, pass this data to the Form component to populate the fields\r\n    const { selectedItems } = this.state;\r\n    const selectedData = [];\r\n    for (const itemId of selectedItems) {\r\n      // Retrieve the data for the selected item and collect it in selectedData\r\n      // You can use the groupedItems or other data sources for this\r\n      // Example:\r\n      const selectedItemData = this.props.groupedItems[itemId];\r\n      selectedData.push(selectedItemData);\r\n    }\r\n\r\n    // Call the populateForm function from the parent component\r\n    this.props.populateForm(selectedData);\r\n  };\r\n\r\n  render() {\r\n    const { groupedItems, boardName, workspaceName } = this.props;\r\n    const { selectedItems } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h1>Board Name: {boardName}</h1>\r\n        {Object.keys(groupedItems).length === 0 ? (\r\n          <p>Loading data...</p>\r\n        ) : (\r\n          <div>\r\n            {Object.keys(groupedItems).map((groupId) => {\r\n              const group = groupedItems[groupId];\r\n              return (\r\n                <div key={groupId}>\r\n                  <h2>Group: {group.title}</h2>\r\n                  <table className=\"custom-table\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Select</th>\r\n                        <th>Item Name</th>\r\n                        {group.items[0].column_values.map((col) => (\r\n                          <th key={col.id}>{col.title}</th>\r\n                        ))}\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {group.items.map((item) => (\r\n                        <tr key={item.id}>\r\n                          <td>\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              onChange={() => this.handleCheckboxChange(item.id)}\r\n                              checked={selectedItems.has(item.id)}\r\n                            />\r\n                          </td>\r\n                          <td>{item.name}</td>\r\n                          {item.column_values.map((col) => (\r\n                            <td key={col.id}>{this.extractValue(col)}</td>\r\n                          ))}\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              );\r\n            })}\r\n            <button onClick={this.populateForm}>Update</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableCreation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}