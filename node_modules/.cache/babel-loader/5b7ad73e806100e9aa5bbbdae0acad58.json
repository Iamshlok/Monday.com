{"ast":null,"code":"var _jsxFileName = \"D:\\\\monday.com\\\\Monday.form\\\\quickstart-react\\\\src\\\\TableCreation.js\";\nimport React from 'react';\nimport './TableCreation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TableCreation = _ref => {\n  let {\n    groupedItems,\n    boardName,\n    workspaceName,\n    populateForm\n  } = _ref;\n\n  const extractValue = col => {\n    if (!col.value) return '';\n\n    try {\n      const parsedValue = JSON.parse(col.value);\n\n      if (parsedValue) {\n        if (col.type === 'duration') {\n          return parsedValue.ended_at || '';\n        } else if (col.type === 'date') {\n          return parsedValue.date || '';\n        } else if (col.type === 'numeric') {\n          return parsedValue || '';\n        } else if (col.type === 'color') {\n          return parsedValue.index !== undefined ? parsedValue.index : '';\n        } else if (col.type === 'multiple-person') {\n          return Array.isArray(parsedValue.personsAndTeams) && parsedValue.personsAndTeams.length ? parsedValue.personsAndTeams[0].id : '';\n        } else if (col.type === 'board-relation' || col.type === 'lookup') {\n          const linkedPulseIds = parsedValue.linkedPulseIds;\n\n          if (Array.isArray(linkedPulseIds) && linkedPulseIds.length > 0) {\n            const linkedIds = linkedPulseIds.map(link => link.linkedPulseId).join(', ');\n            return linkedIds;\n          } else {\n            return '';\n          }\n        } else if (col.type === 'timerange') {\n          const parsedValue = JSON.parse(col.value);\n\n          if (parsedValue && parsedValue.to && parsedValue.from) {\n            const fromDate = parsedValue.from;\n            const toDate = parsedValue.to;\n            return `From: ${fromDate} To: ${toDate}` || '';\n          }\n        }\n      }\n    } catch (error) {\n      console.error('JSON parsing error:', error);\n      return col.value;\n    }\n\n    return col.value;\n  };\n\n  const handleCheckboxChange = item => {\n    // Implement your code to handle the checkbox change\n    populateForm(item); // Call the populateForm function with the selected item\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Board Name: \", boardName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), Object.keys(groupedItems).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(groupedItems).map(groupId => {\n        const group = groupedItems[groupId];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Group: \", group.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"custom-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Item Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 23\n                }, this), group.items[0].column_values.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: col.title\n                }, col.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: group.items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    onChange: () => handleCheckboxChange(item)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 27\n                  }, this), item.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 25\n                }, this), item.column_values.map(col => /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: extractValue(col)\n                }, col.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 27\n                }, this))]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)]\n        }, groupId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TableCreation;\nexport default TableCreation;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableCreation\");","map":{"version":3,"names":["React","TableCreation","groupedItems","boardName","workspaceName","populateForm","extractValue","col","value","parsedValue","JSON","parse","type","ended_at","date","index","undefined","Array","isArray","personsAndTeams","length","id","linkedPulseIds","linkedIds","map","link","linkedPulseId","join","to","from","fromDate","toDate","error","console","handleCheckboxChange","item","Object","keys","groupId","group","title","items","column_values","name"],"sources":["D:/monday.com/Monday.form/quickstart-react/src/TableCreation.js"],"sourcesContent":["import React from 'react';\r\nimport './TableCreation.css';\r\n\r\nconst TableCreation = ({ groupedItems, boardName, workspaceName, populateForm }) => {\r\n  const extractValue = (col) => {\r\n    if (!col.value) return '';\r\n\r\n    try {\r\n      const parsedValue = JSON.parse(col.value);\r\n      if (parsedValue) {\r\n        if (col.type === 'duration') {\r\n          return parsedValue.ended_at || '';\r\n        } else if (col.type === 'date') {\r\n          return parsedValue.date || '';\r\n        } else if (col.type === 'numeric') {\r\n          return parsedValue || '';\r\n        } else if (col.type === 'color') {\r\n          return parsedValue.index !== undefined ? parsedValue.index : '';\r\n        } else if (col.type === 'multiple-person') {\r\n          return Array.isArray(parsedValue.personsAndTeams) && parsedValue.personsAndTeams.length\r\n            ? parsedValue.personsAndTeams[0].id\r\n            : '';\r\n        } else if (col.type === 'board-relation' || col.type === 'lookup') {\r\n          const linkedPulseIds = parsedValue.linkedPulseIds;\r\n          if (Array.isArray(linkedPulseIds) && linkedPulseIds.length > 0) {\r\n            const linkedIds = linkedPulseIds.map((link) => link.linkedPulseId).join(', ');\r\n            return linkedIds;\r\n          } else {\r\n            return '';\r\n          }\r\n        } else if (col.type === 'timerange') {\r\n          const parsedValue = JSON.parse(col.value);\r\n          if (parsedValue && parsedValue.to && parsedValue.from) {\r\n            const fromDate = parsedValue.from;\r\n            const toDate = parsedValue.to;\r\n            return `From: ${fromDate} To: ${toDate}` || '';\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('JSON parsing error:', error);\r\n      return col.value;\r\n    }\r\n\r\n    return col.value;\r\n  };\r\n\r\n  const handleCheckboxChange = (item) => {\r\n    // Implement your code to handle the checkbox change\r\n    populateForm(item); // Call the populateForm function with the selected item\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Board Name: {boardName}</h1>\r\n      {Object.keys(groupedItems).length === 0 ? (\r\n        <p>Loading data...</p>\r\n      ) : (\r\n        <div>\r\n          {Object.keys(groupedItems).map((groupId) => {\r\n            const group = groupedItems[groupId];\r\n            return (\r\n              <div key={groupId}>\r\n                <h2>Group: {group.title}</h2>\r\n                <table className=\"custom-table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Item Name</th>\r\n                      {group.items[0].column_values.map((col) => (\r\n                        <th key={col.id}>{col.title}</th>\r\n                      ))}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {group.items.map((item) => (\r\n                      <tr key={item.id}>\r\n                        <td>\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            onChange={() => handleCheckboxChange(item)}\r\n                          />\r\n                          {item.name}\r\n                        </td>\r\n                        {item.column_values.map((col) => (\r\n                          <td key={col.id}>{extractValue(col)}</td>\r\n                        ))}\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableCreation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}